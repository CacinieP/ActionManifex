
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Wish
 * 
 */
export type Wish = $Result.DefaultSelection<Prisma.$WishPayload>
/**
 * Model Goal
 * 
 */
export type Goal = $Result.DefaultSelection<Prisma.$GoalPayload>
/**
 * Model CheckIn
 * 
 */
export type CheckIn = $Result.DefaultSelection<Prisma.$CheckInPayload>
/**
 * Model Gratitude
 * 
 */
export type Gratitude = $Result.DefaultSelection<Prisma.$GratitudePayload>
/**
 * Model VisionBoard
 * 
 */
export type VisionBoard = $Result.DefaultSelection<Prisma.$VisionBoardPayload>
/**
 * Model VisionBoardItem
 * 
 */
export type VisionBoardItem = $Result.DefaultSelection<Prisma.$VisionBoardItemPayload>
/**
 * Model Reward
 * 
 */
export type Reward = $Result.DefaultSelection<Prisma.$RewardPayload>
/**
 * Model GrowthPoint
 * 
 */
export type GrowthPoint = $Result.DefaultSelection<Prisma.$GrowthPointPayload>
/**
 * Model AIInteraction
 * 
 */
export type AIInteraction = $Result.DefaultSelection<Prisma.$AIInteractionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.wish`: Exposes CRUD operations for the **Wish** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wishes
    * const wishes = await prisma.wish.findMany()
    * ```
    */
  get wish(): Prisma.WishDelegate<ExtArgs>;

  /**
   * `prisma.goal`: Exposes CRUD operations for the **Goal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goals
    * const goals = await prisma.goal.findMany()
    * ```
    */
  get goal(): Prisma.GoalDelegate<ExtArgs>;

  /**
   * `prisma.checkIn`: Exposes CRUD operations for the **CheckIn** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CheckIns
    * const checkIns = await prisma.checkIn.findMany()
    * ```
    */
  get checkIn(): Prisma.CheckInDelegate<ExtArgs>;

  /**
   * `prisma.gratitude`: Exposes CRUD operations for the **Gratitude** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gratitudes
    * const gratitudes = await prisma.gratitude.findMany()
    * ```
    */
  get gratitude(): Prisma.GratitudeDelegate<ExtArgs>;

  /**
   * `prisma.visionBoard`: Exposes CRUD operations for the **VisionBoard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VisionBoards
    * const visionBoards = await prisma.visionBoard.findMany()
    * ```
    */
  get visionBoard(): Prisma.VisionBoardDelegate<ExtArgs>;

  /**
   * `prisma.visionBoardItem`: Exposes CRUD operations for the **VisionBoardItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VisionBoardItems
    * const visionBoardItems = await prisma.visionBoardItem.findMany()
    * ```
    */
  get visionBoardItem(): Prisma.VisionBoardItemDelegate<ExtArgs>;

  /**
   * `prisma.reward`: Exposes CRUD operations for the **Reward** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rewards
    * const rewards = await prisma.reward.findMany()
    * ```
    */
  get reward(): Prisma.RewardDelegate<ExtArgs>;

  /**
   * `prisma.growthPoint`: Exposes CRUD operations for the **GrowthPoint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GrowthPoints
    * const growthPoints = await prisma.growthPoint.findMany()
    * ```
    */
  get growthPoint(): Prisma.GrowthPointDelegate<ExtArgs>;

  /**
   * `prisma.aIInteraction`: Exposes CRUD operations for the **AIInteraction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AIInteractions
    * const aIInteractions = await prisma.aIInteraction.findMany()
    * ```
    */
  get aIInteraction(): Prisma.AIInteractionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Wish: 'Wish',
    Goal: 'Goal',
    CheckIn: 'CheckIn',
    Gratitude: 'Gratitude',
    VisionBoard: 'VisionBoard',
    VisionBoardItem: 'VisionBoardItem',
    Reward: 'Reward',
    GrowthPoint: 'GrowthPoint',
    AIInteraction: 'AIInteraction'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "wish" | "goal" | "checkIn" | "gratitude" | "visionBoard" | "visionBoardItem" | "reward" | "growthPoint" | "aIInteraction"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Wish: {
        payload: Prisma.$WishPayload<ExtArgs>
        fields: Prisma.WishFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WishFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WishFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishPayload>
          }
          findFirst: {
            args: Prisma.WishFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WishFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishPayload>
          }
          findMany: {
            args: Prisma.WishFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishPayload>[]
          }
          create: {
            args: Prisma.WishCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishPayload>
          }
          createMany: {
            args: Prisma.WishCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WishCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishPayload>[]
          }
          delete: {
            args: Prisma.WishDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishPayload>
          }
          update: {
            args: Prisma.WishUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishPayload>
          }
          deleteMany: {
            args: Prisma.WishDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WishUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WishUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishPayload>
          }
          aggregate: {
            args: Prisma.WishAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWish>
          }
          groupBy: {
            args: Prisma.WishGroupByArgs<ExtArgs>
            result: $Utils.Optional<WishGroupByOutputType>[]
          }
          count: {
            args: Prisma.WishCountArgs<ExtArgs>
            result: $Utils.Optional<WishCountAggregateOutputType> | number
          }
        }
      }
      Goal: {
        payload: Prisma.$GoalPayload<ExtArgs>
        fields: Prisma.GoalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findFirst: {
            args: Prisma.GoalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findMany: {
            args: Prisma.GoalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          create: {
            args: Prisma.GoalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          createMany: {
            args: Prisma.GoalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          delete: {
            args: Prisma.GoalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          update: {
            args: Prisma.GoalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          deleteMany: {
            args: Prisma.GoalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GoalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          aggregate: {
            args: Prisma.GoalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoal>
          }
          groupBy: {
            args: Prisma.GoalGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoalCountArgs<ExtArgs>
            result: $Utils.Optional<GoalCountAggregateOutputType> | number
          }
        }
      }
      CheckIn: {
        payload: Prisma.$CheckInPayload<ExtArgs>
        fields: Prisma.CheckInFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CheckInFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CheckInFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>
          }
          findFirst: {
            args: Prisma.CheckInFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CheckInFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>
          }
          findMany: {
            args: Prisma.CheckInFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>[]
          }
          create: {
            args: Prisma.CheckInCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>
          }
          createMany: {
            args: Prisma.CheckInCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CheckInCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>[]
          }
          delete: {
            args: Prisma.CheckInDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>
          }
          update: {
            args: Prisma.CheckInUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>
          }
          deleteMany: {
            args: Prisma.CheckInDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CheckInUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CheckInUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckInPayload>
          }
          aggregate: {
            args: Prisma.CheckInAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCheckIn>
          }
          groupBy: {
            args: Prisma.CheckInGroupByArgs<ExtArgs>
            result: $Utils.Optional<CheckInGroupByOutputType>[]
          }
          count: {
            args: Prisma.CheckInCountArgs<ExtArgs>
            result: $Utils.Optional<CheckInCountAggregateOutputType> | number
          }
        }
      }
      Gratitude: {
        payload: Prisma.$GratitudePayload<ExtArgs>
        fields: Prisma.GratitudeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GratitudeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GratitudePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GratitudeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GratitudePayload>
          }
          findFirst: {
            args: Prisma.GratitudeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GratitudePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GratitudeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GratitudePayload>
          }
          findMany: {
            args: Prisma.GratitudeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GratitudePayload>[]
          }
          create: {
            args: Prisma.GratitudeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GratitudePayload>
          }
          createMany: {
            args: Prisma.GratitudeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GratitudeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GratitudePayload>[]
          }
          delete: {
            args: Prisma.GratitudeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GratitudePayload>
          }
          update: {
            args: Prisma.GratitudeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GratitudePayload>
          }
          deleteMany: {
            args: Prisma.GratitudeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GratitudeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GratitudeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GratitudePayload>
          }
          aggregate: {
            args: Prisma.GratitudeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGratitude>
          }
          groupBy: {
            args: Prisma.GratitudeGroupByArgs<ExtArgs>
            result: $Utils.Optional<GratitudeGroupByOutputType>[]
          }
          count: {
            args: Prisma.GratitudeCountArgs<ExtArgs>
            result: $Utils.Optional<GratitudeCountAggregateOutputType> | number
          }
        }
      }
      VisionBoard: {
        payload: Prisma.$VisionBoardPayload<ExtArgs>
        fields: Prisma.VisionBoardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VisionBoardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VisionBoardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardPayload>
          }
          findFirst: {
            args: Prisma.VisionBoardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VisionBoardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardPayload>
          }
          findMany: {
            args: Prisma.VisionBoardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardPayload>[]
          }
          create: {
            args: Prisma.VisionBoardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardPayload>
          }
          createMany: {
            args: Prisma.VisionBoardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VisionBoardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardPayload>[]
          }
          delete: {
            args: Prisma.VisionBoardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardPayload>
          }
          update: {
            args: Prisma.VisionBoardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardPayload>
          }
          deleteMany: {
            args: Prisma.VisionBoardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VisionBoardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VisionBoardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardPayload>
          }
          aggregate: {
            args: Prisma.VisionBoardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVisionBoard>
          }
          groupBy: {
            args: Prisma.VisionBoardGroupByArgs<ExtArgs>
            result: $Utils.Optional<VisionBoardGroupByOutputType>[]
          }
          count: {
            args: Prisma.VisionBoardCountArgs<ExtArgs>
            result: $Utils.Optional<VisionBoardCountAggregateOutputType> | number
          }
        }
      }
      VisionBoardItem: {
        payload: Prisma.$VisionBoardItemPayload<ExtArgs>
        fields: Prisma.VisionBoardItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VisionBoardItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VisionBoardItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardItemPayload>
          }
          findFirst: {
            args: Prisma.VisionBoardItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VisionBoardItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardItemPayload>
          }
          findMany: {
            args: Prisma.VisionBoardItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardItemPayload>[]
          }
          create: {
            args: Prisma.VisionBoardItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardItemPayload>
          }
          createMany: {
            args: Prisma.VisionBoardItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VisionBoardItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardItemPayload>[]
          }
          delete: {
            args: Prisma.VisionBoardItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardItemPayload>
          }
          update: {
            args: Prisma.VisionBoardItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardItemPayload>
          }
          deleteMany: {
            args: Prisma.VisionBoardItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VisionBoardItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VisionBoardItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisionBoardItemPayload>
          }
          aggregate: {
            args: Prisma.VisionBoardItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVisionBoardItem>
          }
          groupBy: {
            args: Prisma.VisionBoardItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<VisionBoardItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.VisionBoardItemCountArgs<ExtArgs>
            result: $Utils.Optional<VisionBoardItemCountAggregateOutputType> | number
          }
        }
      }
      Reward: {
        payload: Prisma.$RewardPayload<ExtArgs>
        fields: Prisma.RewardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RewardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RewardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          findFirst: {
            args: Prisma.RewardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RewardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          findMany: {
            args: Prisma.RewardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>[]
          }
          create: {
            args: Prisma.RewardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          createMany: {
            args: Prisma.RewardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RewardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>[]
          }
          delete: {
            args: Prisma.RewardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          update: {
            args: Prisma.RewardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          deleteMany: {
            args: Prisma.RewardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RewardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RewardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          aggregate: {
            args: Prisma.RewardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReward>
          }
          groupBy: {
            args: Prisma.RewardGroupByArgs<ExtArgs>
            result: $Utils.Optional<RewardGroupByOutputType>[]
          }
          count: {
            args: Prisma.RewardCountArgs<ExtArgs>
            result: $Utils.Optional<RewardCountAggregateOutputType> | number
          }
        }
      }
      GrowthPoint: {
        payload: Prisma.$GrowthPointPayload<ExtArgs>
        fields: Prisma.GrowthPointFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GrowthPointFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrowthPointPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GrowthPointFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrowthPointPayload>
          }
          findFirst: {
            args: Prisma.GrowthPointFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrowthPointPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GrowthPointFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrowthPointPayload>
          }
          findMany: {
            args: Prisma.GrowthPointFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrowthPointPayload>[]
          }
          create: {
            args: Prisma.GrowthPointCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrowthPointPayload>
          }
          createMany: {
            args: Prisma.GrowthPointCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GrowthPointCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrowthPointPayload>[]
          }
          delete: {
            args: Prisma.GrowthPointDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrowthPointPayload>
          }
          update: {
            args: Prisma.GrowthPointUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrowthPointPayload>
          }
          deleteMany: {
            args: Prisma.GrowthPointDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GrowthPointUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GrowthPointUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrowthPointPayload>
          }
          aggregate: {
            args: Prisma.GrowthPointAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrowthPoint>
          }
          groupBy: {
            args: Prisma.GrowthPointGroupByArgs<ExtArgs>
            result: $Utils.Optional<GrowthPointGroupByOutputType>[]
          }
          count: {
            args: Prisma.GrowthPointCountArgs<ExtArgs>
            result: $Utils.Optional<GrowthPointCountAggregateOutputType> | number
          }
        }
      }
      AIInteraction: {
        payload: Prisma.$AIInteractionPayload<ExtArgs>
        fields: Prisma.AIInteractionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AIInteractionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AIInteractionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionPayload>
          }
          findFirst: {
            args: Prisma.AIInteractionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AIInteractionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionPayload>
          }
          findMany: {
            args: Prisma.AIInteractionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionPayload>[]
          }
          create: {
            args: Prisma.AIInteractionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionPayload>
          }
          createMany: {
            args: Prisma.AIInteractionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AIInteractionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionPayload>[]
          }
          delete: {
            args: Prisma.AIInteractionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionPayload>
          }
          update: {
            args: Prisma.AIInteractionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionPayload>
          }
          deleteMany: {
            args: Prisma.AIInteractionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AIInteractionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AIInteractionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionPayload>
          }
          aggregate: {
            args: Prisma.AIInteractionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAIInteraction>
          }
          groupBy: {
            args: Prisma.AIInteractionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AIInteractionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AIInteractionCountArgs<ExtArgs>
            result: $Utils.Optional<AIInteractionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    wishes: number
    goals: number
    gratitudes: number
    checkIns: number
    rewards: number
    growthPoints: number
    visionBoards: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wishes?: boolean | UserCountOutputTypeCountWishesArgs
    goals?: boolean | UserCountOutputTypeCountGoalsArgs
    gratitudes?: boolean | UserCountOutputTypeCountGratitudesArgs
    checkIns?: boolean | UserCountOutputTypeCountCheckInsArgs
    rewards?: boolean | UserCountOutputTypeCountRewardsArgs
    growthPoints?: boolean | UserCountOutputTypeCountGrowthPointsArgs
    visionBoards?: boolean | UserCountOutputTypeCountVisionBoardsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWishesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WishWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGratitudesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GratitudeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCheckInsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckInWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RewardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGrowthPointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrowthPointWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVisionBoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VisionBoardWhereInput
  }


  /**
   * Count Type WishCountOutputType
   */

  export type WishCountOutputType = {
    goals: number
    visionBoardItems: number
  }

  export type WishCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goals?: boolean | WishCountOutputTypeCountGoalsArgs
    visionBoardItems?: boolean | WishCountOutputTypeCountVisionBoardItemsArgs
  }

  // Custom InputTypes
  /**
   * WishCountOutputType without action
   */
  export type WishCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WishCountOutputType
     */
    select?: WishCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WishCountOutputType without action
   */
  export type WishCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }

  /**
   * WishCountOutputType without action
   */
  export type WishCountOutputTypeCountVisionBoardItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VisionBoardItemWhereInput
  }


  /**
   * Count Type GoalCountOutputType
   */

  export type GoalCountOutputType = {
    checkIns: number
  }

  export type GoalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checkIns?: boolean | GoalCountOutputTypeCountCheckInsArgs
  }

  // Custom InputTypes
  /**
   * GoalCountOutputType without action
   */
  export type GoalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalCountOutputType
     */
    select?: GoalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GoalCountOutputType without action
   */
  export type GoalCountOutputTypeCountCheckInsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckInWhereInput
  }


  /**
   * Count Type VisionBoardCountOutputType
   */

  export type VisionBoardCountOutputType = {
    items: number
  }

  export type VisionBoardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | VisionBoardCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * VisionBoardCountOutputType without action
   */
  export type VisionBoardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoardCountOutputType
     */
    select?: VisionBoardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VisionBoardCountOutputType without action
   */
  export type VisionBoardCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VisionBoardItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    avatar: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string | null
    avatar: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    wishes?: boolean | User$wishesArgs<ExtArgs>
    goals?: boolean | User$goalsArgs<ExtArgs>
    gratitudes?: boolean | User$gratitudesArgs<ExtArgs>
    checkIns?: boolean | User$checkInsArgs<ExtArgs>
    rewards?: boolean | User$rewardsArgs<ExtArgs>
    growthPoints?: boolean | User$growthPointsArgs<ExtArgs>
    visionBoards?: boolean | User$visionBoardsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wishes?: boolean | User$wishesArgs<ExtArgs>
    goals?: boolean | User$goalsArgs<ExtArgs>
    gratitudes?: boolean | User$gratitudesArgs<ExtArgs>
    checkIns?: boolean | User$checkInsArgs<ExtArgs>
    rewards?: boolean | User$rewardsArgs<ExtArgs>
    growthPoints?: boolean | User$growthPointsArgs<ExtArgs>
    visionBoards?: boolean | User$visionBoardsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      wishes: Prisma.$WishPayload<ExtArgs>[]
      goals: Prisma.$GoalPayload<ExtArgs>[]
      gratitudes: Prisma.$GratitudePayload<ExtArgs>[]
      checkIns: Prisma.$CheckInPayload<ExtArgs>[]
      rewards: Prisma.$RewardPayload<ExtArgs>[]
      growthPoints: Prisma.$GrowthPointPayload<ExtArgs>[]
      visionBoards: Prisma.$VisionBoardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string | null
      avatar: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wishes<T extends User$wishesArgs<ExtArgs> = {}>(args?: Subset<T, User$wishesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findMany"> | Null>
    goals<T extends User$goalsArgs<ExtArgs> = {}>(args?: Subset<T, User$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany"> | Null>
    gratitudes<T extends User$gratitudesArgs<ExtArgs> = {}>(args?: Subset<T, User$gratitudesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GratitudePayload<ExtArgs>, T, "findMany"> | Null>
    checkIns<T extends User$checkInsArgs<ExtArgs> = {}>(args?: Subset<T, User$checkInsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findMany"> | Null>
    rewards<T extends User$rewardsArgs<ExtArgs> = {}>(args?: Subset<T, User$rewardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findMany"> | Null>
    growthPoints<T extends User$growthPointsArgs<ExtArgs> = {}>(args?: Subset<T, User$growthPointsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrowthPointPayload<ExtArgs>, T, "findMany"> | Null>
    visionBoards<T extends User$visionBoardsArgs<ExtArgs> = {}>(args?: Subset<T, User$visionBoardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisionBoardPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.wishes
   */
  export type User$wishesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wish
     */
    select?: WishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishInclude<ExtArgs> | null
    where?: WishWhereInput
    orderBy?: WishOrderByWithRelationInput | WishOrderByWithRelationInput[]
    cursor?: WishWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WishScalarFieldEnum | WishScalarFieldEnum[]
  }

  /**
   * User.goals
   */
  export type User$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * User.gratitudes
   */
  export type User$gratitudesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gratitude
     */
    select?: GratitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GratitudeInclude<ExtArgs> | null
    where?: GratitudeWhereInput
    orderBy?: GratitudeOrderByWithRelationInput | GratitudeOrderByWithRelationInput[]
    cursor?: GratitudeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GratitudeScalarFieldEnum | GratitudeScalarFieldEnum[]
  }

  /**
   * User.checkIns
   */
  export type User$checkInsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    where?: CheckInWhereInput
    orderBy?: CheckInOrderByWithRelationInput | CheckInOrderByWithRelationInput[]
    cursor?: CheckInWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckInScalarFieldEnum | CheckInScalarFieldEnum[]
  }

  /**
   * User.rewards
   */
  export type User$rewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    where?: RewardWhereInput
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    cursor?: RewardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * User.growthPoints
   */
  export type User$growthPointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthPoint
     */
    select?: GrowthPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrowthPointInclude<ExtArgs> | null
    where?: GrowthPointWhereInput
    orderBy?: GrowthPointOrderByWithRelationInput | GrowthPointOrderByWithRelationInput[]
    cursor?: GrowthPointWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrowthPointScalarFieldEnum | GrowthPointScalarFieldEnum[]
  }

  /**
   * User.visionBoards
   */
  export type User$visionBoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoard
     */
    select?: VisionBoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardInclude<ExtArgs> | null
    where?: VisionBoardWhereInput
    orderBy?: VisionBoardOrderByWithRelationInput | VisionBoardOrderByWithRelationInput[]
    cursor?: VisionBoardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VisionBoardScalarFieldEnum | VisionBoardScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Wish
   */

  export type AggregateWish = {
    _count: WishCountAggregateOutputType | null
    _min: WishMinAggregateOutputType | null
    _max: WishMaxAggregateOutputType | null
  }

  export type WishMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    category: string | null
    isOptimized: boolean | null
    optimizedText: string | null
    status: string | null
    priority: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type WishMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    category: string | null
    isOptimized: boolean | null
    optimizedText: string | null
    status: string | null
    priority: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type WishCountAggregateOutputType = {
    id: number
    title: number
    description: number
    category: number
    isOptimized: number
    optimizedText: number
    keywords: number
    status: number
    priority: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type WishMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    isOptimized?: true
    optimizedText?: true
    status?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type WishMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    isOptimized?: true
    optimizedText?: true
    status?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type WishCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    isOptimized?: true
    optimizedText?: true
    keywords?: true
    status?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type WishAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wish to aggregate.
     */
    where?: WishWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishes to fetch.
     */
    orderBy?: WishOrderByWithRelationInput | WishOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WishWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wishes
    **/
    _count?: true | WishCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WishMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WishMaxAggregateInputType
  }

  export type GetWishAggregateType<T extends WishAggregateArgs> = {
        [P in keyof T & keyof AggregateWish]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWish[P]>
      : GetScalarType<T[P], AggregateWish[P]>
  }




  export type WishGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WishWhereInput
    orderBy?: WishOrderByWithAggregationInput | WishOrderByWithAggregationInput[]
    by: WishScalarFieldEnum[] | WishScalarFieldEnum
    having?: WishScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WishCountAggregateInputType | true
    _min?: WishMinAggregateInputType
    _max?: WishMaxAggregateInputType
  }

  export type WishGroupByOutputType = {
    id: string
    title: string
    description: string | null
    category: string
    isOptimized: boolean
    optimizedText: string | null
    keywords: string[]
    status: string
    priority: string
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: WishCountAggregateOutputType | null
    _min: WishMinAggregateOutputType | null
    _max: WishMaxAggregateOutputType | null
  }

  type GetWishGroupByPayload<T extends WishGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WishGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WishGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WishGroupByOutputType[P]>
            : GetScalarType<T[P], WishGroupByOutputType[P]>
        }
      >
    >


  export type WishSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    isOptimized?: boolean
    optimizedText?: boolean
    keywords?: boolean
    status?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    goals?: boolean | Wish$goalsArgs<ExtArgs>
    visionBoardItems?: boolean | Wish$visionBoardItemsArgs<ExtArgs>
    _count?: boolean | WishCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wish"]>

  export type WishSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    isOptimized?: boolean
    optimizedText?: boolean
    keywords?: boolean
    status?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wish"]>

  export type WishSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    isOptimized?: boolean
    optimizedText?: boolean
    keywords?: boolean
    status?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type WishInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    goals?: boolean | Wish$goalsArgs<ExtArgs>
    visionBoardItems?: boolean | Wish$visionBoardItemsArgs<ExtArgs>
    _count?: boolean | WishCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WishIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WishPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wish"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      goals: Prisma.$GoalPayload<ExtArgs>[]
      visionBoardItems: Prisma.$VisionBoardItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      category: string
      isOptimized: boolean
      optimizedText: string | null
      keywords: string[]
      status: string
      priority: string
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["wish"]>
    composites: {}
  }

  type WishGetPayload<S extends boolean | null | undefined | WishDefaultArgs> = $Result.GetResult<Prisma.$WishPayload, S>

  type WishCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WishFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WishCountAggregateInputType | true
    }

  export interface WishDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wish'], meta: { name: 'Wish' } }
    /**
     * Find zero or one Wish that matches the filter.
     * @param {WishFindUniqueArgs} args - Arguments to find a Wish
     * @example
     * // Get one Wish
     * const wish = await prisma.wish.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WishFindUniqueArgs>(args: SelectSubset<T, WishFindUniqueArgs<ExtArgs>>): Prisma__WishClient<$Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Wish that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WishFindUniqueOrThrowArgs} args - Arguments to find a Wish
     * @example
     * // Get one Wish
     * const wish = await prisma.wish.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WishFindUniqueOrThrowArgs>(args: SelectSubset<T, WishFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WishClient<$Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Wish that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishFindFirstArgs} args - Arguments to find a Wish
     * @example
     * // Get one Wish
     * const wish = await prisma.wish.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WishFindFirstArgs>(args?: SelectSubset<T, WishFindFirstArgs<ExtArgs>>): Prisma__WishClient<$Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Wish that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishFindFirstOrThrowArgs} args - Arguments to find a Wish
     * @example
     * // Get one Wish
     * const wish = await prisma.wish.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WishFindFirstOrThrowArgs>(args?: SelectSubset<T, WishFindFirstOrThrowArgs<ExtArgs>>): Prisma__WishClient<$Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Wishes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wishes
     * const wishes = await prisma.wish.findMany()
     * 
     * // Get first 10 Wishes
     * const wishes = await prisma.wish.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wishWithIdOnly = await prisma.wish.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WishFindManyArgs>(args?: SelectSubset<T, WishFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Wish.
     * @param {WishCreateArgs} args - Arguments to create a Wish.
     * @example
     * // Create one Wish
     * const Wish = await prisma.wish.create({
     *   data: {
     *     // ... data to create a Wish
     *   }
     * })
     * 
     */
    create<T extends WishCreateArgs>(args: SelectSubset<T, WishCreateArgs<ExtArgs>>): Prisma__WishClient<$Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Wishes.
     * @param {WishCreateManyArgs} args - Arguments to create many Wishes.
     * @example
     * // Create many Wishes
     * const wish = await prisma.wish.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WishCreateManyArgs>(args?: SelectSubset<T, WishCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wishes and returns the data saved in the database.
     * @param {WishCreateManyAndReturnArgs} args - Arguments to create many Wishes.
     * @example
     * // Create many Wishes
     * const wish = await prisma.wish.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wishes and only return the `id`
     * const wishWithIdOnly = await prisma.wish.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WishCreateManyAndReturnArgs>(args?: SelectSubset<T, WishCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Wish.
     * @param {WishDeleteArgs} args - Arguments to delete one Wish.
     * @example
     * // Delete one Wish
     * const Wish = await prisma.wish.delete({
     *   where: {
     *     // ... filter to delete one Wish
     *   }
     * })
     * 
     */
    delete<T extends WishDeleteArgs>(args: SelectSubset<T, WishDeleteArgs<ExtArgs>>): Prisma__WishClient<$Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Wish.
     * @param {WishUpdateArgs} args - Arguments to update one Wish.
     * @example
     * // Update one Wish
     * const wish = await prisma.wish.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WishUpdateArgs>(args: SelectSubset<T, WishUpdateArgs<ExtArgs>>): Prisma__WishClient<$Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Wishes.
     * @param {WishDeleteManyArgs} args - Arguments to filter Wishes to delete.
     * @example
     * // Delete a few Wishes
     * const { count } = await prisma.wish.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WishDeleteManyArgs>(args?: SelectSubset<T, WishDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wishes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wishes
     * const wish = await prisma.wish.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WishUpdateManyArgs>(args: SelectSubset<T, WishUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Wish.
     * @param {WishUpsertArgs} args - Arguments to update or create a Wish.
     * @example
     * // Update or create a Wish
     * const wish = await prisma.wish.upsert({
     *   create: {
     *     // ... data to create a Wish
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wish we want to update
     *   }
     * })
     */
    upsert<T extends WishUpsertArgs>(args: SelectSubset<T, WishUpsertArgs<ExtArgs>>): Prisma__WishClient<$Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Wishes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishCountArgs} args - Arguments to filter Wishes to count.
     * @example
     * // Count the number of Wishes
     * const count = await prisma.wish.count({
     *   where: {
     *     // ... the filter for the Wishes we want to count
     *   }
     * })
    **/
    count<T extends WishCountArgs>(
      args?: Subset<T, WishCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WishCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wish.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WishAggregateArgs>(args: Subset<T, WishAggregateArgs>): Prisma.PrismaPromise<GetWishAggregateType<T>>

    /**
     * Group by Wish.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WishGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WishGroupByArgs['orderBy'] }
        : { orderBy?: WishGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WishGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWishGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wish model
   */
  readonly fields: WishFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wish.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WishClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    goals<T extends Wish$goalsArgs<ExtArgs> = {}>(args?: Subset<T, Wish$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany"> | Null>
    visionBoardItems<T extends Wish$visionBoardItemsArgs<ExtArgs> = {}>(args?: Subset<T, Wish$visionBoardItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisionBoardItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Wish model
   */ 
  interface WishFieldRefs {
    readonly id: FieldRef<"Wish", 'String'>
    readonly title: FieldRef<"Wish", 'String'>
    readonly description: FieldRef<"Wish", 'String'>
    readonly category: FieldRef<"Wish", 'String'>
    readonly isOptimized: FieldRef<"Wish", 'Boolean'>
    readonly optimizedText: FieldRef<"Wish", 'String'>
    readonly keywords: FieldRef<"Wish", 'String[]'>
    readonly status: FieldRef<"Wish", 'String'>
    readonly priority: FieldRef<"Wish", 'String'>
    readonly createdAt: FieldRef<"Wish", 'DateTime'>
    readonly updatedAt: FieldRef<"Wish", 'DateTime'>
    readonly userId: FieldRef<"Wish", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Wish findUnique
   */
  export type WishFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wish
     */
    select?: WishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishInclude<ExtArgs> | null
    /**
     * Filter, which Wish to fetch.
     */
    where: WishWhereUniqueInput
  }

  /**
   * Wish findUniqueOrThrow
   */
  export type WishFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wish
     */
    select?: WishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishInclude<ExtArgs> | null
    /**
     * Filter, which Wish to fetch.
     */
    where: WishWhereUniqueInput
  }

  /**
   * Wish findFirst
   */
  export type WishFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wish
     */
    select?: WishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishInclude<ExtArgs> | null
    /**
     * Filter, which Wish to fetch.
     */
    where?: WishWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishes to fetch.
     */
    orderBy?: WishOrderByWithRelationInput | WishOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wishes.
     */
    cursor?: WishWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wishes.
     */
    distinct?: WishScalarFieldEnum | WishScalarFieldEnum[]
  }

  /**
   * Wish findFirstOrThrow
   */
  export type WishFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wish
     */
    select?: WishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishInclude<ExtArgs> | null
    /**
     * Filter, which Wish to fetch.
     */
    where?: WishWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishes to fetch.
     */
    orderBy?: WishOrderByWithRelationInput | WishOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wishes.
     */
    cursor?: WishWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wishes.
     */
    distinct?: WishScalarFieldEnum | WishScalarFieldEnum[]
  }

  /**
   * Wish findMany
   */
  export type WishFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wish
     */
    select?: WishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishInclude<ExtArgs> | null
    /**
     * Filter, which Wishes to fetch.
     */
    where?: WishWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishes to fetch.
     */
    orderBy?: WishOrderByWithRelationInput | WishOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wishes.
     */
    cursor?: WishWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishes.
     */
    skip?: number
    distinct?: WishScalarFieldEnum | WishScalarFieldEnum[]
  }

  /**
   * Wish create
   */
  export type WishCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wish
     */
    select?: WishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishInclude<ExtArgs> | null
    /**
     * The data needed to create a Wish.
     */
    data: XOR<WishCreateInput, WishUncheckedCreateInput>
  }

  /**
   * Wish createMany
   */
  export type WishCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wishes.
     */
    data: WishCreateManyInput | WishCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Wish createManyAndReturn
   */
  export type WishCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wish
     */
    select?: WishSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Wishes.
     */
    data: WishCreateManyInput | WishCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wish update
   */
  export type WishUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wish
     */
    select?: WishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishInclude<ExtArgs> | null
    /**
     * The data needed to update a Wish.
     */
    data: XOR<WishUpdateInput, WishUncheckedUpdateInput>
    /**
     * Choose, which Wish to update.
     */
    where: WishWhereUniqueInput
  }

  /**
   * Wish updateMany
   */
  export type WishUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wishes.
     */
    data: XOR<WishUpdateManyMutationInput, WishUncheckedUpdateManyInput>
    /**
     * Filter which Wishes to update
     */
    where?: WishWhereInput
  }

  /**
   * Wish upsert
   */
  export type WishUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wish
     */
    select?: WishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishInclude<ExtArgs> | null
    /**
     * The filter to search for the Wish to update in case it exists.
     */
    where: WishWhereUniqueInput
    /**
     * In case the Wish found by the `where` argument doesn't exist, create a new Wish with this data.
     */
    create: XOR<WishCreateInput, WishUncheckedCreateInput>
    /**
     * In case the Wish was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WishUpdateInput, WishUncheckedUpdateInput>
  }

  /**
   * Wish delete
   */
  export type WishDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wish
     */
    select?: WishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishInclude<ExtArgs> | null
    /**
     * Filter which Wish to delete.
     */
    where: WishWhereUniqueInput
  }

  /**
   * Wish deleteMany
   */
  export type WishDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wishes to delete
     */
    where?: WishWhereInput
  }

  /**
   * Wish.goals
   */
  export type Wish$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Wish.visionBoardItems
   */
  export type Wish$visionBoardItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoardItem
     */
    select?: VisionBoardItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardItemInclude<ExtArgs> | null
    where?: VisionBoardItemWhereInput
    orderBy?: VisionBoardItemOrderByWithRelationInput | VisionBoardItemOrderByWithRelationInput[]
    cursor?: VisionBoardItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VisionBoardItemScalarFieldEnum | VisionBoardItemScalarFieldEnum[]
  }

  /**
   * Wish without action
   */
  export type WishDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wish
     */
    select?: WishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishInclude<ExtArgs> | null
  }


  /**
   * Model Goal
   */

  export type AggregateGoal = {
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  export type GoalAvgAggregateOutputType = {
    progress: number | null
    order: number | null
  }

  export type GoalSumAggregateOutputType = {
    progress: number | null
    order: number | null
  }

  export type GoalMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: string | null
    status: string | null
    priority: string | null
    dueDate: Date | null
    completedAt: Date | null
    progress: number | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
    specific: string | null
    measurable: string | null
    achievable: string | null
    relevant: string | null
    timeBound: string | null
    wishId: string | null
    userId: string | null
  }

  export type GoalMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: string | null
    status: string | null
    priority: string | null
    dueDate: Date | null
    completedAt: Date | null
    progress: number | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
    specific: string | null
    measurable: string | null
    achievable: string | null
    relevant: string | null
    timeBound: string | null
    wishId: string | null
    userId: string | null
  }

  export type GoalCountAggregateOutputType = {
    id: number
    title: number
    description: number
    type: number
    status: number
    priority: number
    dueDate: number
    completedAt: number
    progress: number
    order: number
    createdAt: number
    updatedAt: number
    specific: number
    measurable: number
    achievable: number
    relevant: number
    timeBound: number
    wishId: number
    userId: number
    _all: number
  }


  export type GoalAvgAggregateInputType = {
    progress?: true
    order?: true
  }

  export type GoalSumAggregateInputType = {
    progress?: true
    order?: true
  }

  export type GoalMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    priority?: true
    dueDate?: true
    completedAt?: true
    progress?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    specific?: true
    measurable?: true
    achievable?: true
    relevant?: true
    timeBound?: true
    wishId?: true
    userId?: true
  }

  export type GoalMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    priority?: true
    dueDate?: true
    completedAt?: true
    progress?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    specific?: true
    measurable?: true
    achievable?: true
    relevant?: true
    timeBound?: true
    wishId?: true
    userId?: true
  }

  export type GoalCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    priority?: true
    dueDate?: true
    completedAt?: true
    progress?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    specific?: true
    measurable?: true
    achievable?: true
    relevant?: true
    timeBound?: true
    wishId?: true
    userId?: true
    _all?: true
  }

  export type GoalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goal to aggregate.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Goals
    **/
    _count?: true | GoalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalMaxAggregateInputType
  }

  export type GetGoalAggregateType<T extends GoalAggregateArgs> = {
        [P in keyof T & keyof AggregateGoal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoal[P]>
      : GetScalarType<T[P], AggregateGoal[P]>
  }




  export type GoalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithAggregationInput | GoalOrderByWithAggregationInput[]
    by: GoalScalarFieldEnum[] | GoalScalarFieldEnum
    having?: GoalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalCountAggregateInputType | true
    _avg?: GoalAvgAggregateInputType
    _sum?: GoalSumAggregateInputType
    _min?: GoalMinAggregateInputType
    _max?: GoalMaxAggregateInputType
  }

  export type GoalGroupByOutputType = {
    id: string
    title: string
    description: string | null
    type: string
    status: string
    priority: string
    dueDate: Date | null
    completedAt: Date | null
    progress: number
    order: number
    createdAt: Date
    updatedAt: Date
    specific: string | null
    measurable: string | null
    achievable: string | null
    relevant: string | null
    timeBound: string | null
    wishId: string
    userId: string
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  type GetGoalGroupByPayload<T extends GoalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalGroupByOutputType[P]>
            : GetScalarType<T[P], GoalGroupByOutputType[P]>
        }
      >
    >


  export type GoalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    completedAt?: boolean
    progress?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    specific?: boolean
    measurable?: boolean
    achievable?: boolean
    relevant?: boolean
    timeBound?: boolean
    wishId?: boolean
    userId?: boolean
    wish?: boolean | WishDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    checkIns?: boolean | Goal$checkInsArgs<ExtArgs>
    _count?: boolean | GoalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    completedAt?: boolean
    progress?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    specific?: boolean
    measurable?: boolean
    achievable?: boolean
    relevant?: boolean
    timeBound?: boolean
    wishId?: boolean
    userId?: boolean
    wish?: boolean | WishDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    completedAt?: boolean
    progress?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    specific?: boolean
    measurable?: boolean
    achievable?: boolean
    relevant?: boolean
    timeBound?: boolean
    wishId?: boolean
    userId?: boolean
  }

  export type GoalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wish?: boolean | WishDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    checkIns?: boolean | Goal$checkInsArgs<ExtArgs>
    _count?: boolean | GoalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GoalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wish?: boolean | WishDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GoalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Goal"
    objects: {
      wish: Prisma.$WishPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      checkIns: Prisma.$CheckInPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      type: string
      status: string
      priority: string
      dueDate: Date | null
      completedAt: Date | null
      progress: number
      order: number
      createdAt: Date
      updatedAt: Date
      specific: string | null
      measurable: string | null
      achievable: string | null
      relevant: string | null
      timeBound: string | null
      wishId: string
      userId: string
    }, ExtArgs["result"]["goal"]>
    composites: {}
  }

  type GoalGetPayload<S extends boolean | null | undefined | GoalDefaultArgs> = $Result.GetResult<Prisma.$GoalPayload, S>

  type GoalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GoalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GoalCountAggregateInputType | true
    }

  export interface GoalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Goal'], meta: { name: 'Goal' } }
    /**
     * Find zero or one Goal that matches the filter.
     * @param {GoalFindUniqueArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoalFindUniqueArgs>(args: SelectSubset<T, GoalFindUniqueArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Goal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GoalFindUniqueOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoalFindUniqueOrThrowArgs>(args: SelectSubset<T, GoalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Goal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoalFindFirstArgs>(args?: SelectSubset<T, GoalFindFirstArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Goal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoalFindFirstOrThrowArgs>(args?: SelectSubset<T, GoalFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goals
     * const goals = await prisma.goal.findMany()
     * 
     * // Get first 10 Goals
     * const goals = await prisma.goal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalWithIdOnly = await prisma.goal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoalFindManyArgs>(args?: SelectSubset<T, GoalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Goal.
     * @param {GoalCreateArgs} args - Arguments to create a Goal.
     * @example
     * // Create one Goal
     * const Goal = await prisma.goal.create({
     *   data: {
     *     // ... data to create a Goal
     *   }
     * })
     * 
     */
    create<T extends GoalCreateArgs>(args: SelectSubset<T, GoalCreateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Goals.
     * @param {GoalCreateManyArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoalCreateManyArgs>(args?: SelectSubset<T, GoalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Goals and returns the data saved in the database.
     * @param {GoalCreateManyAndReturnArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Goals and only return the `id`
     * const goalWithIdOnly = await prisma.goal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoalCreateManyAndReturnArgs>(args?: SelectSubset<T, GoalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Goal.
     * @param {GoalDeleteArgs} args - Arguments to delete one Goal.
     * @example
     * // Delete one Goal
     * const Goal = await prisma.goal.delete({
     *   where: {
     *     // ... filter to delete one Goal
     *   }
     * })
     * 
     */
    delete<T extends GoalDeleteArgs>(args: SelectSubset<T, GoalDeleteArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Goal.
     * @param {GoalUpdateArgs} args - Arguments to update one Goal.
     * @example
     * // Update one Goal
     * const goal = await prisma.goal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoalUpdateArgs>(args: SelectSubset<T, GoalUpdateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Goals.
     * @param {GoalDeleteManyArgs} args - Arguments to filter Goals to delete.
     * @example
     * // Delete a few Goals
     * const { count } = await prisma.goal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoalDeleteManyArgs>(args?: SelectSubset<T, GoalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goals
     * const goal = await prisma.goal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoalUpdateManyArgs>(args: SelectSubset<T, GoalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Goal.
     * @param {GoalUpsertArgs} args - Arguments to update or create a Goal.
     * @example
     * // Update or create a Goal
     * const goal = await prisma.goal.upsert({
     *   create: {
     *     // ... data to create a Goal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goal we want to update
     *   }
     * })
     */
    upsert<T extends GoalUpsertArgs>(args: SelectSubset<T, GoalUpsertArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalCountArgs} args - Arguments to filter Goals to count.
     * @example
     * // Count the number of Goals
     * const count = await prisma.goal.count({
     *   where: {
     *     // ... the filter for the Goals we want to count
     *   }
     * })
    **/
    count<T extends GoalCountArgs>(
      args?: Subset<T, GoalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalAggregateArgs>(args: Subset<T, GoalAggregateArgs>): Prisma.PrismaPromise<GetGoalAggregateType<T>>

    /**
     * Group by Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalGroupByArgs['orderBy'] }
        : { orderBy?: GoalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Goal model
   */
  readonly fields: GoalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Goal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wish<T extends WishDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WishDefaultArgs<ExtArgs>>): Prisma__WishClient<$Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    checkIns<T extends Goal$checkInsArgs<ExtArgs> = {}>(args?: Subset<T, Goal$checkInsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Goal model
   */ 
  interface GoalFieldRefs {
    readonly id: FieldRef<"Goal", 'String'>
    readonly title: FieldRef<"Goal", 'String'>
    readonly description: FieldRef<"Goal", 'String'>
    readonly type: FieldRef<"Goal", 'String'>
    readonly status: FieldRef<"Goal", 'String'>
    readonly priority: FieldRef<"Goal", 'String'>
    readonly dueDate: FieldRef<"Goal", 'DateTime'>
    readonly completedAt: FieldRef<"Goal", 'DateTime'>
    readonly progress: FieldRef<"Goal", 'Int'>
    readonly order: FieldRef<"Goal", 'Int'>
    readonly createdAt: FieldRef<"Goal", 'DateTime'>
    readonly updatedAt: FieldRef<"Goal", 'DateTime'>
    readonly specific: FieldRef<"Goal", 'String'>
    readonly measurable: FieldRef<"Goal", 'String'>
    readonly achievable: FieldRef<"Goal", 'String'>
    readonly relevant: FieldRef<"Goal", 'String'>
    readonly timeBound: FieldRef<"Goal", 'String'>
    readonly wishId: FieldRef<"Goal", 'String'>
    readonly userId: FieldRef<"Goal", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Goal findUnique
   */
  export type GoalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findUniqueOrThrow
   */
  export type GoalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findFirst
   */
  export type GoalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findFirstOrThrow
   */
  export type GoalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findMany
   */
  export type GoalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goals to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal create
   */
  export type GoalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to create a Goal.
     */
    data: XOR<GoalCreateInput, GoalUncheckedCreateInput>
  }

  /**
   * Goal createMany
   */
  export type GoalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Goal createManyAndReturn
   */
  export type GoalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Goal update
   */
  export type GoalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to update a Goal.
     */
    data: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
    /**
     * Choose, which Goal to update.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal updateMany
   */
  export type GoalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Goals.
     */
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyInput>
    /**
     * Filter which Goals to update
     */
    where?: GoalWhereInput
  }

  /**
   * Goal upsert
   */
  export type GoalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The filter to search for the Goal to update in case it exists.
     */
    where: GoalWhereUniqueInput
    /**
     * In case the Goal found by the `where` argument doesn't exist, create a new Goal with this data.
     */
    create: XOR<GoalCreateInput, GoalUncheckedCreateInput>
    /**
     * In case the Goal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
  }

  /**
   * Goal delete
   */
  export type GoalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter which Goal to delete.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal deleteMany
   */
  export type GoalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goals to delete
     */
    where?: GoalWhereInput
  }

  /**
   * Goal.checkIns
   */
  export type Goal$checkInsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    where?: CheckInWhereInput
    orderBy?: CheckInOrderByWithRelationInput | CheckInOrderByWithRelationInput[]
    cursor?: CheckInWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckInScalarFieldEnum | CheckInScalarFieldEnum[]
  }

  /**
   * Goal without action
   */
  export type GoalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
  }


  /**
   * Model CheckIn
   */

  export type AggregateCheckIn = {
    _count: CheckInCountAggregateOutputType | null
    _avg: CheckInAvgAggregateOutputType | null
    _sum: CheckInSumAggregateOutputType | null
    _min: CheckInMinAggregateOutputType | null
    _max: CheckInMaxAggregateOutputType | null
  }

  export type CheckInAvgAggregateOutputType = {
    progress: number | null
  }

  export type CheckInSumAggregateOutputType = {
    progress: number | null
  }

  export type CheckInMinAggregateOutputType = {
    id: string | null
    type: string | null
    content: string | null
    mediaUrl: string | null
    notes: string | null
    mood: string | null
    progress: number | null
    createdAt: Date | null
    goalId: string | null
    userId: string | null
  }

  export type CheckInMaxAggregateOutputType = {
    id: string | null
    type: string | null
    content: string | null
    mediaUrl: string | null
    notes: string | null
    mood: string | null
    progress: number | null
    createdAt: Date | null
    goalId: string | null
    userId: string | null
  }

  export type CheckInCountAggregateOutputType = {
    id: number
    type: number
    content: number
    mediaUrl: number
    notes: number
    mood: number
    progress: number
    createdAt: number
    goalId: number
    userId: number
    _all: number
  }


  export type CheckInAvgAggregateInputType = {
    progress?: true
  }

  export type CheckInSumAggregateInputType = {
    progress?: true
  }

  export type CheckInMinAggregateInputType = {
    id?: true
    type?: true
    content?: true
    mediaUrl?: true
    notes?: true
    mood?: true
    progress?: true
    createdAt?: true
    goalId?: true
    userId?: true
  }

  export type CheckInMaxAggregateInputType = {
    id?: true
    type?: true
    content?: true
    mediaUrl?: true
    notes?: true
    mood?: true
    progress?: true
    createdAt?: true
    goalId?: true
    userId?: true
  }

  export type CheckInCountAggregateInputType = {
    id?: true
    type?: true
    content?: true
    mediaUrl?: true
    notes?: true
    mood?: true
    progress?: true
    createdAt?: true
    goalId?: true
    userId?: true
    _all?: true
  }

  export type CheckInAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckIn to aggregate.
     */
    where?: CheckInWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckIns to fetch.
     */
    orderBy?: CheckInOrderByWithRelationInput | CheckInOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CheckInWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckIns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckIns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CheckIns
    **/
    _count?: true | CheckInCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CheckInAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CheckInSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CheckInMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CheckInMaxAggregateInputType
  }

  export type GetCheckInAggregateType<T extends CheckInAggregateArgs> = {
        [P in keyof T & keyof AggregateCheckIn]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCheckIn[P]>
      : GetScalarType<T[P], AggregateCheckIn[P]>
  }




  export type CheckInGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckInWhereInput
    orderBy?: CheckInOrderByWithAggregationInput | CheckInOrderByWithAggregationInput[]
    by: CheckInScalarFieldEnum[] | CheckInScalarFieldEnum
    having?: CheckInScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CheckInCountAggregateInputType | true
    _avg?: CheckInAvgAggregateInputType
    _sum?: CheckInSumAggregateInputType
    _min?: CheckInMinAggregateInputType
    _max?: CheckInMaxAggregateInputType
  }

  export type CheckInGroupByOutputType = {
    id: string
    type: string
    content: string
    mediaUrl: string | null
    notes: string | null
    mood: string | null
    progress: number
    createdAt: Date
    goalId: string
    userId: string
    _count: CheckInCountAggregateOutputType | null
    _avg: CheckInAvgAggregateOutputType | null
    _sum: CheckInSumAggregateOutputType | null
    _min: CheckInMinAggregateOutputType | null
    _max: CheckInMaxAggregateOutputType | null
  }

  type GetCheckInGroupByPayload<T extends CheckInGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CheckInGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CheckInGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CheckInGroupByOutputType[P]>
            : GetScalarType<T[P], CheckInGroupByOutputType[P]>
        }
      >
    >


  export type CheckInSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    content?: boolean
    mediaUrl?: boolean
    notes?: boolean
    mood?: boolean
    progress?: boolean
    createdAt?: boolean
    goalId?: boolean
    userId?: boolean
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkIn"]>

  export type CheckInSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    content?: boolean
    mediaUrl?: boolean
    notes?: boolean
    mood?: boolean
    progress?: boolean
    createdAt?: boolean
    goalId?: boolean
    userId?: boolean
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkIn"]>

  export type CheckInSelectScalar = {
    id?: boolean
    type?: boolean
    content?: boolean
    mediaUrl?: boolean
    notes?: boolean
    mood?: boolean
    progress?: boolean
    createdAt?: boolean
    goalId?: boolean
    userId?: boolean
  }

  export type CheckInInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CheckInIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CheckInPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CheckIn"
    objects: {
      goal: Prisma.$GoalPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      content: string
      mediaUrl: string | null
      notes: string | null
      mood: string | null
      progress: number
      createdAt: Date
      goalId: string
      userId: string
    }, ExtArgs["result"]["checkIn"]>
    composites: {}
  }

  type CheckInGetPayload<S extends boolean | null | undefined | CheckInDefaultArgs> = $Result.GetResult<Prisma.$CheckInPayload, S>

  type CheckInCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CheckInFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CheckInCountAggregateInputType | true
    }

  export interface CheckInDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CheckIn'], meta: { name: 'CheckIn' } }
    /**
     * Find zero or one CheckIn that matches the filter.
     * @param {CheckInFindUniqueArgs} args - Arguments to find a CheckIn
     * @example
     * // Get one CheckIn
     * const checkIn = await prisma.checkIn.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CheckInFindUniqueArgs>(args: SelectSubset<T, CheckInFindUniqueArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CheckIn that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CheckInFindUniqueOrThrowArgs} args - Arguments to find a CheckIn
     * @example
     * // Get one CheckIn
     * const checkIn = await prisma.checkIn.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CheckInFindUniqueOrThrowArgs>(args: SelectSubset<T, CheckInFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CheckIn that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckInFindFirstArgs} args - Arguments to find a CheckIn
     * @example
     * // Get one CheckIn
     * const checkIn = await prisma.checkIn.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CheckInFindFirstArgs>(args?: SelectSubset<T, CheckInFindFirstArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CheckIn that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckInFindFirstOrThrowArgs} args - Arguments to find a CheckIn
     * @example
     * // Get one CheckIn
     * const checkIn = await prisma.checkIn.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CheckInFindFirstOrThrowArgs>(args?: SelectSubset<T, CheckInFindFirstOrThrowArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CheckIns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckInFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CheckIns
     * const checkIns = await prisma.checkIn.findMany()
     * 
     * // Get first 10 CheckIns
     * const checkIns = await prisma.checkIn.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const checkInWithIdOnly = await prisma.checkIn.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CheckInFindManyArgs>(args?: SelectSubset<T, CheckInFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CheckIn.
     * @param {CheckInCreateArgs} args - Arguments to create a CheckIn.
     * @example
     * // Create one CheckIn
     * const CheckIn = await prisma.checkIn.create({
     *   data: {
     *     // ... data to create a CheckIn
     *   }
     * })
     * 
     */
    create<T extends CheckInCreateArgs>(args: SelectSubset<T, CheckInCreateArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CheckIns.
     * @param {CheckInCreateManyArgs} args - Arguments to create many CheckIns.
     * @example
     * // Create many CheckIns
     * const checkIn = await prisma.checkIn.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CheckInCreateManyArgs>(args?: SelectSubset<T, CheckInCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CheckIns and returns the data saved in the database.
     * @param {CheckInCreateManyAndReturnArgs} args - Arguments to create many CheckIns.
     * @example
     * // Create many CheckIns
     * const checkIn = await prisma.checkIn.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CheckIns and only return the `id`
     * const checkInWithIdOnly = await prisma.checkIn.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CheckInCreateManyAndReturnArgs>(args?: SelectSubset<T, CheckInCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CheckIn.
     * @param {CheckInDeleteArgs} args - Arguments to delete one CheckIn.
     * @example
     * // Delete one CheckIn
     * const CheckIn = await prisma.checkIn.delete({
     *   where: {
     *     // ... filter to delete one CheckIn
     *   }
     * })
     * 
     */
    delete<T extends CheckInDeleteArgs>(args: SelectSubset<T, CheckInDeleteArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CheckIn.
     * @param {CheckInUpdateArgs} args - Arguments to update one CheckIn.
     * @example
     * // Update one CheckIn
     * const checkIn = await prisma.checkIn.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CheckInUpdateArgs>(args: SelectSubset<T, CheckInUpdateArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CheckIns.
     * @param {CheckInDeleteManyArgs} args - Arguments to filter CheckIns to delete.
     * @example
     * // Delete a few CheckIns
     * const { count } = await prisma.checkIn.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CheckInDeleteManyArgs>(args?: SelectSubset<T, CheckInDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CheckIns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckInUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CheckIns
     * const checkIn = await prisma.checkIn.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CheckInUpdateManyArgs>(args: SelectSubset<T, CheckInUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CheckIn.
     * @param {CheckInUpsertArgs} args - Arguments to update or create a CheckIn.
     * @example
     * // Update or create a CheckIn
     * const checkIn = await prisma.checkIn.upsert({
     *   create: {
     *     // ... data to create a CheckIn
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CheckIn we want to update
     *   }
     * })
     */
    upsert<T extends CheckInUpsertArgs>(args: SelectSubset<T, CheckInUpsertArgs<ExtArgs>>): Prisma__CheckInClient<$Result.GetResult<Prisma.$CheckInPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CheckIns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckInCountArgs} args - Arguments to filter CheckIns to count.
     * @example
     * // Count the number of CheckIns
     * const count = await prisma.checkIn.count({
     *   where: {
     *     // ... the filter for the CheckIns we want to count
     *   }
     * })
    **/
    count<T extends CheckInCountArgs>(
      args?: Subset<T, CheckInCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CheckInCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CheckIn.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckInAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CheckInAggregateArgs>(args: Subset<T, CheckInAggregateArgs>): Prisma.PrismaPromise<GetCheckInAggregateType<T>>

    /**
     * Group by CheckIn.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckInGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CheckInGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CheckInGroupByArgs['orderBy'] }
        : { orderBy?: CheckInGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CheckInGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCheckInGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CheckIn model
   */
  readonly fields: CheckInFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CheckIn.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CheckInClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    goal<T extends GoalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GoalDefaultArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CheckIn model
   */ 
  interface CheckInFieldRefs {
    readonly id: FieldRef<"CheckIn", 'String'>
    readonly type: FieldRef<"CheckIn", 'String'>
    readonly content: FieldRef<"CheckIn", 'String'>
    readonly mediaUrl: FieldRef<"CheckIn", 'String'>
    readonly notes: FieldRef<"CheckIn", 'String'>
    readonly mood: FieldRef<"CheckIn", 'String'>
    readonly progress: FieldRef<"CheckIn", 'Int'>
    readonly createdAt: FieldRef<"CheckIn", 'DateTime'>
    readonly goalId: FieldRef<"CheckIn", 'String'>
    readonly userId: FieldRef<"CheckIn", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CheckIn findUnique
   */
  export type CheckInFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * Filter, which CheckIn to fetch.
     */
    where: CheckInWhereUniqueInput
  }

  /**
   * CheckIn findUniqueOrThrow
   */
  export type CheckInFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * Filter, which CheckIn to fetch.
     */
    where: CheckInWhereUniqueInput
  }

  /**
   * CheckIn findFirst
   */
  export type CheckInFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * Filter, which CheckIn to fetch.
     */
    where?: CheckInWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckIns to fetch.
     */
    orderBy?: CheckInOrderByWithRelationInput | CheckInOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckIns.
     */
    cursor?: CheckInWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckIns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckIns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckIns.
     */
    distinct?: CheckInScalarFieldEnum | CheckInScalarFieldEnum[]
  }

  /**
   * CheckIn findFirstOrThrow
   */
  export type CheckInFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * Filter, which CheckIn to fetch.
     */
    where?: CheckInWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckIns to fetch.
     */
    orderBy?: CheckInOrderByWithRelationInput | CheckInOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckIns.
     */
    cursor?: CheckInWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckIns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckIns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckIns.
     */
    distinct?: CheckInScalarFieldEnum | CheckInScalarFieldEnum[]
  }

  /**
   * CheckIn findMany
   */
  export type CheckInFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * Filter, which CheckIns to fetch.
     */
    where?: CheckInWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckIns to fetch.
     */
    orderBy?: CheckInOrderByWithRelationInput | CheckInOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CheckIns.
     */
    cursor?: CheckInWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckIns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckIns.
     */
    skip?: number
    distinct?: CheckInScalarFieldEnum | CheckInScalarFieldEnum[]
  }

  /**
   * CheckIn create
   */
  export type CheckInCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * The data needed to create a CheckIn.
     */
    data: XOR<CheckInCreateInput, CheckInUncheckedCreateInput>
  }

  /**
   * CheckIn createMany
   */
  export type CheckInCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CheckIns.
     */
    data: CheckInCreateManyInput | CheckInCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CheckIn createManyAndReturn
   */
  export type CheckInCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CheckIns.
     */
    data: CheckInCreateManyInput | CheckInCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CheckIn update
   */
  export type CheckInUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * The data needed to update a CheckIn.
     */
    data: XOR<CheckInUpdateInput, CheckInUncheckedUpdateInput>
    /**
     * Choose, which CheckIn to update.
     */
    where: CheckInWhereUniqueInput
  }

  /**
   * CheckIn updateMany
   */
  export type CheckInUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CheckIns.
     */
    data: XOR<CheckInUpdateManyMutationInput, CheckInUncheckedUpdateManyInput>
    /**
     * Filter which CheckIns to update
     */
    where?: CheckInWhereInput
  }

  /**
   * CheckIn upsert
   */
  export type CheckInUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * The filter to search for the CheckIn to update in case it exists.
     */
    where: CheckInWhereUniqueInput
    /**
     * In case the CheckIn found by the `where` argument doesn't exist, create a new CheckIn with this data.
     */
    create: XOR<CheckInCreateInput, CheckInUncheckedCreateInput>
    /**
     * In case the CheckIn was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CheckInUpdateInput, CheckInUncheckedUpdateInput>
  }

  /**
   * CheckIn delete
   */
  export type CheckInDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
    /**
     * Filter which CheckIn to delete.
     */
    where: CheckInWhereUniqueInput
  }

  /**
   * CheckIn deleteMany
   */
  export type CheckInDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckIns to delete
     */
    where?: CheckInWhereInput
  }

  /**
   * CheckIn without action
   */
  export type CheckInDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckIn
     */
    select?: CheckInSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckInInclude<ExtArgs> | null
  }


  /**
   * Model Gratitude
   */

  export type AggregateGratitude = {
    _count: GratitudeCountAggregateOutputType | null
    _min: GratitudeMinAggregateOutputType | null
    _max: GratitudeMaxAggregateOutputType | null
  }

  export type GratitudeMinAggregateOutputType = {
    id: string | null
    content: string | null
    type: string | null
    mediaUrl: string | null
    mood: string | null
    aiQuote: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type GratitudeMaxAggregateOutputType = {
    id: string | null
    content: string | null
    type: string | null
    mediaUrl: string | null
    mood: string | null
    aiQuote: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type GratitudeCountAggregateOutputType = {
    id: number
    content: number
    type: number
    mediaUrl: number
    tags: number
    mood: number
    aiQuote: number
    createdAt: number
    userId: number
    _all: number
  }


  export type GratitudeMinAggregateInputType = {
    id?: true
    content?: true
    type?: true
    mediaUrl?: true
    mood?: true
    aiQuote?: true
    createdAt?: true
    userId?: true
  }

  export type GratitudeMaxAggregateInputType = {
    id?: true
    content?: true
    type?: true
    mediaUrl?: true
    mood?: true
    aiQuote?: true
    createdAt?: true
    userId?: true
  }

  export type GratitudeCountAggregateInputType = {
    id?: true
    content?: true
    type?: true
    mediaUrl?: true
    tags?: true
    mood?: true
    aiQuote?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type GratitudeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gratitude to aggregate.
     */
    where?: GratitudeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gratitudes to fetch.
     */
    orderBy?: GratitudeOrderByWithRelationInput | GratitudeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GratitudeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gratitudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gratitudes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Gratitudes
    **/
    _count?: true | GratitudeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GratitudeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GratitudeMaxAggregateInputType
  }

  export type GetGratitudeAggregateType<T extends GratitudeAggregateArgs> = {
        [P in keyof T & keyof AggregateGratitude]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGratitude[P]>
      : GetScalarType<T[P], AggregateGratitude[P]>
  }




  export type GratitudeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GratitudeWhereInput
    orderBy?: GratitudeOrderByWithAggregationInput | GratitudeOrderByWithAggregationInput[]
    by: GratitudeScalarFieldEnum[] | GratitudeScalarFieldEnum
    having?: GratitudeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GratitudeCountAggregateInputType | true
    _min?: GratitudeMinAggregateInputType
    _max?: GratitudeMaxAggregateInputType
  }

  export type GratitudeGroupByOutputType = {
    id: string
    content: string
    type: string
    mediaUrl: string | null
    tags: string[]
    mood: string | null
    aiQuote: string | null
    createdAt: Date
    userId: string
    _count: GratitudeCountAggregateOutputType | null
    _min: GratitudeMinAggregateOutputType | null
    _max: GratitudeMaxAggregateOutputType | null
  }

  type GetGratitudeGroupByPayload<T extends GratitudeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GratitudeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GratitudeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GratitudeGroupByOutputType[P]>
            : GetScalarType<T[P], GratitudeGroupByOutputType[P]>
        }
      >
    >


  export type GratitudeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    type?: boolean
    mediaUrl?: boolean
    tags?: boolean
    mood?: boolean
    aiQuote?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gratitude"]>

  export type GratitudeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    type?: boolean
    mediaUrl?: boolean
    tags?: boolean
    mood?: boolean
    aiQuote?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gratitude"]>

  export type GratitudeSelectScalar = {
    id?: boolean
    content?: boolean
    type?: boolean
    mediaUrl?: boolean
    tags?: boolean
    mood?: boolean
    aiQuote?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type GratitudeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GratitudeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GratitudePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Gratitude"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      type: string
      mediaUrl: string | null
      tags: string[]
      mood: string | null
      aiQuote: string | null
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["gratitude"]>
    composites: {}
  }

  type GratitudeGetPayload<S extends boolean | null | undefined | GratitudeDefaultArgs> = $Result.GetResult<Prisma.$GratitudePayload, S>

  type GratitudeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GratitudeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GratitudeCountAggregateInputType | true
    }

  export interface GratitudeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Gratitude'], meta: { name: 'Gratitude' } }
    /**
     * Find zero or one Gratitude that matches the filter.
     * @param {GratitudeFindUniqueArgs} args - Arguments to find a Gratitude
     * @example
     * // Get one Gratitude
     * const gratitude = await prisma.gratitude.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GratitudeFindUniqueArgs>(args: SelectSubset<T, GratitudeFindUniqueArgs<ExtArgs>>): Prisma__GratitudeClient<$Result.GetResult<Prisma.$GratitudePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Gratitude that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GratitudeFindUniqueOrThrowArgs} args - Arguments to find a Gratitude
     * @example
     * // Get one Gratitude
     * const gratitude = await prisma.gratitude.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GratitudeFindUniqueOrThrowArgs>(args: SelectSubset<T, GratitudeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GratitudeClient<$Result.GetResult<Prisma.$GratitudePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Gratitude that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GratitudeFindFirstArgs} args - Arguments to find a Gratitude
     * @example
     * // Get one Gratitude
     * const gratitude = await prisma.gratitude.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GratitudeFindFirstArgs>(args?: SelectSubset<T, GratitudeFindFirstArgs<ExtArgs>>): Prisma__GratitudeClient<$Result.GetResult<Prisma.$GratitudePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Gratitude that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GratitudeFindFirstOrThrowArgs} args - Arguments to find a Gratitude
     * @example
     * // Get one Gratitude
     * const gratitude = await prisma.gratitude.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GratitudeFindFirstOrThrowArgs>(args?: SelectSubset<T, GratitudeFindFirstOrThrowArgs<ExtArgs>>): Prisma__GratitudeClient<$Result.GetResult<Prisma.$GratitudePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Gratitudes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GratitudeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gratitudes
     * const gratitudes = await prisma.gratitude.findMany()
     * 
     * // Get first 10 Gratitudes
     * const gratitudes = await prisma.gratitude.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gratitudeWithIdOnly = await prisma.gratitude.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GratitudeFindManyArgs>(args?: SelectSubset<T, GratitudeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GratitudePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Gratitude.
     * @param {GratitudeCreateArgs} args - Arguments to create a Gratitude.
     * @example
     * // Create one Gratitude
     * const Gratitude = await prisma.gratitude.create({
     *   data: {
     *     // ... data to create a Gratitude
     *   }
     * })
     * 
     */
    create<T extends GratitudeCreateArgs>(args: SelectSubset<T, GratitudeCreateArgs<ExtArgs>>): Prisma__GratitudeClient<$Result.GetResult<Prisma.$GratitudePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Gratitudes.
     * @param {GratitudeCreateManyArgs} args - Arguments to create many Gratitudes.
     * @example
     * // Create many Gratitudes
     * const gratitude = await prisma.gratitude.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GratitudeCreateManyArgs>(args?: SelectSubset<T, GratitudeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Gratitudes and returns the data saved in the database.
     * @param {GratitudeCreateManyAndReturnArgs} args - Arguments to create many Gratitudes.
     * @example
     * // Create many Gratitudes
     * const gratitude = await prisma.gratitude.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Gratitudes and only return the `id`
     * const gratitudeWithIdOnly = await prisma.gratitude.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GratitudeCreateManyAndReturnArgs>(args?: SelectSubset<T, GratitudeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GratitudePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Gratitude.
     * @param {GratitudeDeleteArgs} args - Arguments to delete one Gratitude.
     * @example
     * // Delete one Gratitude
     * const Gratitude = await prisma.gratitude.delete({
     *   where: {
     *     // ... filter to delete one Gratitude
     *   }
     * })
     * 
     */
    delete<T extends GratitudeDeleteArgs>(args: SelectSubset<T, GratitudeDeleteArgs<ExtArgs>>): Prisma__GratitudeClient<$Result.GetResult<Prisma.$GratitudePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Gratitude.
     * @param {GratitudeUpdateArgs} args - Arguments to update one Gratitude.
     * @example
     * // Update one Gratitude
     * const gratitude = await prisma.gratitude.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GratitudeUpdateArgs>(args: SelectSubset<T, GratitudeUpdateArgs<ExtArgs>>): Prisma__GratitudeClient<$Result.GetResult<Prisma.$GratitudePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Gratitudes.
     * @param {GratitudeDeleteManyArgs} args - Arguments to filter Gratitudes to delete.
     * @example
     * // Delete a few Gratitudes
     * const { count } = await prisma.gratitude.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GratitudeDeleteManyArgs>(args?: SelectSubset<T, GratitudeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gratitudes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GratitudeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gratitudes
     * const gratitude = await prisma.gratitude.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GratitudeUpdateManyArgs>(args: SelectSubset<T, GratitudeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Gratitude.
     * @param {GratitudeUpsertArgs} args - Arguments to update or create a Gratitude.
     * @example
     * // Update or create a Gratitude
     * const gratitude = await prisma.gratitude.upsert({
     *   create: {
     *     // ... data to create a Gratitude
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gratitude we want to update
     *   }
     * })
     */
    upsert<T extends GratitudeUpsertArgs>(args: SelectSubset<T, GratitudeUpsertArgs<ExtArgs>>): Prisma__GratitudeClient<$Result.GetResult<Prisma.$GratitudePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Gratitudes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GratitudeCountArgs} args - Arguments to filter Gratitudes to count.
     * @example
     * // Count the number of Gratitudes
     * const count = await prisma.gratitude.count({
     *   where: {
     *     // ... the filter for the Gratitudes we want to count
     *   }
     * })
    **/
    count<T extends GratitudeCountArgs>(
      args?: Subset<T, GratitudeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GratitudeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gratitude.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GratitudeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GratitudeAggregateArgs>(args: Subset<T, GratitudeAggregateArgs>): Prisma.PrismaPromise<GetGratitudeAggregateType<T>>

    /**
     * Group by Gratitude.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GratitudeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GratitudeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GratitudeGroupByArgs['orderBy'] }
        : { orderBy?: GratitudeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GratitudeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGratitudeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Gratitude model
   */
  readonly fields: GratitudeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gratitude.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GratitudeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Gratitude model
   */ 
  interface GratitudeFieldRefs {
    readonly id: FieldRef<"Gratitude", 'String'>
    readonly content: FieldRef<"Gratitude", 'String'>
    readonly type: FieldRef<"Gratitude", 'String'>
    readonly mediaUrl: FieldRef<"Gratitude", 'String'>
    readonly tags: FieldRef<"Gratitude", 'String[]'>
    readonly mood: FieldRef<"Gratitude", 'String'>
    readonly aiQuote: FieldRef<"Gratitude", 'String'>
    readonly createdAt: FieldRef<"Gratitude", 'DateTime'>
    readonly userId: FieldRef<"Gratitude", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Gratitude findUnique
   */
  export type GratitudeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gratitude
     */
    select?: GratitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GratitudeInclude<ExtArgs> | null
    /**
     * Filter, which Gratitude to fetch.
     */
    where: GratitudeWhereUniqueInput
  }

  /**
   * Gratitude findUniqueOrThrow
   */
  export type GratitudeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gratitude
     */
    select?: GratitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GratitudeInclude<ExtArgs> | null
    /**
     * Filter, which Gratitude to fetch.
     */
    where: GratitudeWhereUniqueInput
  }

  /**
   * Gratitude findFirst
   */
  export type GratitudeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gratitude
     */
    select?: GratitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GratitudeInclude<ExtArgs> | null
    /**
     * Filter, which Gratitude to fetch.
     */
    where?: GratitudeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gratitudes to fetch.
     */
    orderBy?: GratitudeOrderByWithRelationInput | GratitudeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gratitudes.
     */
    cursor?: GratitudeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gratitudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gratitudes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gratitudes.
     */
    distinct?: GratitudeScalarFieldEnum | GratitudeScalarFieldEnum[]
  }

  /**
   * Gratitude findFirstOrThrow
   */
  export type GratitudeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gratitude
     */
    select?: GratitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GratitudeInclude<ExtArgs> | null
    /**
     * Filter, which Gratitude to fetch.
     */
    where?: GratitudeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gratitudes to fetch.
     */
    orderBy?: GratitudeOrderByWithRelationInput | GratitudeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gratitudes.
     */
    cursor?: GratitudeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gratitudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gratitudes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gratitudes.
     */
    distinct?: GratitudeScalarFieldEnum | GratitudeScalarFieldEnum[]
  }

  /**
   * Gratitude findMany
   */
  export type GratitudeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gratitude
     */
    select?: GratitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GratitudeInclude<ExtArgs> | null
    /**
     * Filter, which Gratitudes to fetch.
     */
    where?: GratitudeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gratitudes to fetch.
     */
    orderBy?: GratitudeOrderByWithRelationInput | GratitudeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Gratitudes.
     */
    cursor?: GratitudeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gratitudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gratitudes.
     */
    skip?: number
    distinct?: GratitudeScalarFieldEnum | GratitudeScalarFieldEnum[]
  }

  /**
   * Gratitude create
   */
  export type GratitudeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gratitude
     */
    select?: GratitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GratitudeInclude<ExtArgs> | null
    /**
     * The data needed to create a Gratitude.
     */
    data: XOR<GratitudeCreateInput, GratitudeUncheckedCreateInput>
  }

  /**
   * Gratitude createMany
   */
  export type GratitudeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Gratitudes.
     */
    data: GratitudeCreateManyInput | GratitudeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Gratitude createManyAndReturn
   */
  export type GratitudeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gratitude
     */
    select?: GratitudeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Gratitudes.
     */
    data: GratitudeCreateManyInput | GratitudeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GratitudeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Gratitude update
   */
  export type GratitudeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gratitude
     */
    select?: GratitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GratitudeInclude<ExtArgs> | null
    /**
     * The data needed to update a Gratitude.
     */
    data: XOR<GratitudeUpdateInput, GratitudeUncheckedUpdateInput>
    /**
     * Choose, which Gratitude to update.
     */
    where: GratitudeWhereUniqueInput
  }

  /**
   * Gratitude updateMany
   */
  export type GratitudeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Gratitudes.
     */
    data: XOR<GratitudeUpdateManyMutationInput, GratitudeUncheckedUpdateManyInput>
    /**
     * Filter which Gratitudes to update
     */
    where?: GratitudeWhereInput
  }

  /**
   * Gratitude upsert
   */
  export type GratitudeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gratitude
     */
    select?: GratitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GratitudeInclude<ExtArgs> | null
    /**
     * The filter to search for the Gratitude to update in case it exists.
     */
    where: GratitudeWhereUniqueInput
    /**
     * In case the Gratitude found by the `where` argument doesn't exist, create a new Gratitude with this data.
     */
    create: XOR<GratitudeCreateInput, GratitudeUncheckedCreateInput>
    /**
     * In case the Gratitude was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GratitudeUpdateInput, GratitudeUncheckedUpdateInput>
  }

  /**
   * Gratitude delete
   */
  export type GratitudeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gratitude
     */
    select?: GratitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GratitudeInclude<ExtArgs> | null
    /**
     * Filter which Gratitude to delete.
     */
    where: GratitudeWhereUniqueInput
  }

  /**
   * Gratitude deleteMany
   */
  export type GratitudeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gratitudes to delete
     */
    where?: GratitudeWhereInput
  }

  /**
   * Gratitude without action
   */
  export type GratitudeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gratitude
     */
    select?: GratitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GratitudeInclude<ExtArgs> | null
  }


  /**
   * Model VisionBoard
   */

  export type AggregateVisionBoard = {
    _count: VisionBoardCountAggregateOutputType | null
    _min: VisionBoardMinAggregateOutputType | null
    _max: VisionBoardMaxAggregateOutputType | null
  }

  export type VisionBoardMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    isPublic: boolean | null
    layout: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type VisionBoardMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    isPublic: boolean | null
    layout: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type VisionBoardCountAggregateOutputType = {
    id: number
    title: number
    description: number
    isPublic: number
    layout: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type VisionBoardMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    isPublic?: true
    layout?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type VisionBoardMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    isPublic?: true
    layout?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type VisionBoardCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    isPublic?: true
    layout?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type VisionBoardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VisionBoard to aggregate.
     */
    where?: VisionBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisionBoards to fetch.
     */
    orderBy?: VisionBoardOrderByWithRelationInput | VisionBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VisionBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisionBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisionBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VisionBoards
    **/
    _count?: true | VisionBoardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VisionBoardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VisionBoardMaxAggregateInputType
  }

  export type GetVisionBoardAggregateType<T extends VisionBoardAggregateArgs> = {
        [P in keyof T & keyof AggregateVisionBoard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVisionBoard[P]>
      : GetScalarType<T[P], AggregateVisionBoard[P]>
  }




  export type VisionBoardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VisionBoardWhereInput
    orderBy?: VisionBoardOrderByWithAggregationInput | VisionBoardOrderByWithAggregationInput[]
    by: VisionBoardScalarFieldEnum[] | VisionBoardScalarFieldEnum
    having?: VisionBoardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VisionBoardCountAggregateInputType | true
    _min?: VisionBoardMinAggregateInputType
    _max?: VisionBoardMaxAggregateInputType
  }

  export type VisionBoardGroupByOutputType = {
    id: string
    title: string
    description: string | null
    isPublic: boolean
    layout: string
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: VisionBoardCountAggregateOutputType | null
    _min: VisionBoardMinAggregateOutputType | null
    _max: VisionBoardMaxAggregateOutputType | null
  }

  type GetVisionBoardGroupByPayload<T extends VisionBoardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VisionBoardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VisionBoardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VisionBoardGroupByOutputType[P]>
            : GetScalarType<T[P], VisionBoardGroupByOutputType[P]>
        }
      >
    >


  export type VisionBoardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    isPublic?: boolean
    layout?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | VisionBoard$itemsArgs<ExtArgs>
    _count?: boolean | VisionBoardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["visionBoard"]>

  export type VisionBoardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    isPublic?: boolean
    layout?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["visionBoard"]>

  export type VisionBoardSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    isPublic?: boolean
    layout?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type VisionBoardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | VisionBoard$itemsArgs<ExtArgs>
    _count?: boolean | VisionBoardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VisionBoardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $VisionBoardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VisionBoard"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      items: Prisma.$VisionBoardItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      isPublic: boolean
      layout: string
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["visionBoard"]>
    composites: {}
  }

  type VisionBoardGetPayload<S extends boolean | null | undefined | VisionBoardDefaultArgs> = $Result.GetResult<Prisma.$VisionBoardPayload, S>

  type VisionBoardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VisionBoardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VisionBoardCountAggregateInputType | true
    }

  export interface VisionBoardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VisionBoard'], meta: { name: 'VisionBoard' } }
    /**
     * Find zero or one VisionBoard that matches the filter.
     * @param {VisionBoardFindUniqueArgs} args - Arguments to find a VisionBoard
     * @example
     * // Get one VisionBoard
     * const visionBoard = await prisma.visionBoard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VisionBoardFindUniqueArgs>(args: SelectSubset<T, VisionBoardFindUniqueArgs<ExtArgs>>): Prisma__VisionBoardClient<$Result.GetResult<Prisma.$VisionBoardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VisionBoard that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VisionBoardFindUniqueOrThrowArgs} args - Arguments to find a VisionBoard
     * @example
     * // Get one VisionBoard
     * const visionBoard = await prisma.visionBoard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VisionBoardFindUniqueOrThrowArgs>(args: SelectSubset<T, VisionBoardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VisionBoardClient<$Result.GetResult<Prisma.$VisionBoardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VisionBoard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisionBoardFindFirstArgs} args - Arguments to find a VisionBoard
     * @example
     * // Get one VisionBoard
     * const visionBoard = await prisma.visionBoard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VisionBoardFindFirstArgs>(args?: SelectSubset<T, VisionBoardFindFirstArgs<ExtArgs>>): Prisma__VisionBoardClient<$Result.GetResult<Prisma.$VisionBoardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VisionBoard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisionBoardFindFirstOrThrowArgs} args - Arguments to find a VisionBoard
     * @example
     * // Get one VisionBoard
     * const visionBoard = await prisma.visionBoard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VisionBoardFindFirstOrThrowArgs>(args?: SelectSubset<T, VisionBoardFindFirstOrThrowArgs<ExtArgs>>): Prisma__VisionBoardClient<$Result.GetResult<Prisma.$VisionBoardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VisionBoards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisionBoardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VisionBoards
     * const visionBoards = await prisma.visionBoard.findMany()
     * 
     * // Get first 10 VisionBoards
     * const visionBoards = await prisma.visionBoard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const visionBoardWithIdOnly = await prisma.visionBoard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VisionBoardFindManyArgs>(args?: SelectSubset<T, VisionBoardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisionBoardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VisionBoard.
     * @param {VisionBoardCreateArgs} args - Arguments to create a VisionBoard.
     * @example
     * // Create one VisionBoard
     * const VisionBoard = await prisma.visionBoard.create({
     *   data: {
     *     // ... data to create a VisionBoard
     *   }
     * })
     * 
     */
    create<T extends VisionBoardCreateArgs>(args: SelectSubset<T, VisionBoardCreateArgs<ExtArgs>>): Prisma__VisionBoardClient<$Result.GetResult<Prisma.$VisionBoardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VisionBoards.
     * @param {VisionBoardCreateManyArgs} args - Arguments to create many VisionBoards.
     * @example
     * // Create many VisionBoards
     * const visionBoard = await prisma.visionBoard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VisionBoardCreateManyArgs>(args?: SelectSubset<T, VisionBoardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VisionBoards and returns the data saved in the database.
     * @param {VisionBoardCreateManyAndReturnArgs} args - Arguments to create many VisionBoards.
     * @example
     * // Create many VisionBoards
     * const visionBoard = await prisma.visionBoard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VisionBoards and only return the `id`
     * const visionBoardWithIdOnly = await prisma.visionBoard.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VisionBoardCreateManyAndReturnArgs>(args?: SelectSubset<T, VisionBoardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisionBoardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a VisionBoard.
     * @param {VisionBoardDeleteArgs} args - Arguments to delete one VisionBoard.
     * @example
     * // Delete one VisionBoard
     * const VisionBoard = await prisma.visionBoard.delete({
     *   where: {
     *     // ... filter to delete one VisionBoard
     *   }
     * })
     * 
     */
    delete<T extends VisionBoardDeleteArgs>(args: SelectSubset<T, VisionBoardDeleteArgs<ExtArgs>>): Prisma__VisionBoardClient<$Result.GetResult<Prisma.$VisionBoardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VisionBoard.
     * @param {VisionBoardUpdateArgs} args - Arguments to update one VisionBoard.
     * @example
     * // Update one VisionBoard
     * const visionBoard = await prisma.visionBoard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VisionBoardUpdateArgs>(args: SelectSubset<T, VisionBoardUpdateArgs<ExtArgs>>): Prisma__VisionBoardClient<$Result.GetResult<Prisma.$VisionBoardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VisionBoards.
     * @param {VisionBoardDeleteManyArgs} args - Arguments to filter VisionBoards to delete.
     * @example
     * // Delete a few VisionBoards
     * const { count } = await prisma.visionBoard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VisionBoardDeleteManyArgs>(args?: SelectSubset<T, VisionBoardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VisionBoards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisionBoardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VisionBoards
     * const visionBoard = await prisma.visionBoard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VisionBoardUpdateManyArgs>(args: SelectSubset<T, VisionBoardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VisionBoard.
     * @param {VisionBoardUpsertArgs} args - Arguments to update or create a VisionBoard.
     * @example
     * // Update or create a VisionBoard
     * const visionBoard = await prisma.visionBoard.upsert({
     *   create: {
     *     // ... data to create a VisionBoard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VisionBoard we want to update
     *   }
     * })
     */
    upsert<T extends VisionBoardUpsertArgs>(args: SelectSubset<T, VisionBoardUpsertArgs<ExtArgs>>): Prisma__VisionBoardClient<$Result.GetResult<Prisma.$VisionBoardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VisionBoards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisionBoardCountArgs} args - Arguments to filter VisionBoards to count.
     * @example
     * // Count the number of VisionBoards
     * const count = await prisma.visionBoard.count({
     *   where: {
     *     // ... the filter for the VisionBoards we want to count
     *   }
     * })
    **/
    count<T extends VisionBoardCountArgs>(
      args?: Subset<T, VisionBoardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VisionBoardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VisionBoard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisionBoardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VisionBoardAggregateArgs>(args: Subset<T, VisionBoardAggregateArgs>): Prisma.PrismaPromise<GetVisionBoardAggregateType<T>>

    /**
     * Group by VisionBoard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisionBoardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VisionBoardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VisionBoardGroupByArgs['orderBy'] }
        : { orderBy?: VisionBoardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VisionBoardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVisionBoardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VisionBoard model
   */
  readonly fields: VisionBoardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VisionBoard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VisionBoardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    items<T extends VisionBoard$itemsArgs<ExtArgs> = {}>(args?: Subset<T, VisionBoard$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisionBoardItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VisionBoard model
   */ 
  interface VisionBoardFieldRefs {
    readonly id: FieldRef<"VisionBoard", 'String'>
    readonly title: FieldRef<"VisionBoard", 'String'>
    readonly description: FieldRef<"VisionBoard", 'String'>
    readonly isPublic: FieldRef<"VisionBoard", 'Boolean'>
    readonly layout: FieldRef<"VisionBoard", 'String'>
    readonly createdAt: FieldRef<"VisionBoard", 'DateTime'>
    readonly updatedAt: FieldRef<"VisionBoard", 'DateTime'>
    readonly userId: FieldRef<"VisionBoard", 'String'>
  }
    

  // Custom InputTypes
  /**
   * VisionBoard findUnique
   */
  export type VisionBoardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoard
     */
    select?: VisionBoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardInclude<ExtArgs> | null
    /**
     * Filter, which VisionBoard to fetch.
     */
    where: VisionBoardWhereUniqueInput
  }

  /**
   * VisionBoard findUniqueOrThrow
   */
  export type VisionBoardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoard
     */
    select?: VisionBoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardInclude<ExtArgs> | null
    /**
     * Filter, which VisionBoard to fetch.
     */
    where: VisionBoardWhereUniqueInput
  }

  /**
   * VisionBoard findFirst
   */
  export type VisionBoardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoard
     */
    select?: VisionBoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardInclude<ExtArgs> | null
    /**
     * Filter, which VisionBoard to fetch.
     */
    where?: VisionBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisionBoards to fetch.
     */
    orderBy?: VisionBoardOrderByWithRelationInput | VisionBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VisionBoards.
     */
    cursor?: VisionBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisionBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisionBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VisionBoards.
     */
    distinct?: VisionBoardScalarFieldEnum | VisionBoardScalarFieldEnum[]
  }

  /**
   * VisionBoard findFirstOrThrow
   */
  export type VisionBoardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoard
     */
    select?: VisionBoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardInclude<ExtArgs> | null
    /**
     * Filter, which VisionBoard to fetch.
     */
    where?: VisionBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisionBoards to fetch.
     */
    orderBy?: VisionBoardOrderByWithRelationInput | VisionBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VisionBoards.
     */
    cursor?: VisionBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisionBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisionBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VisionBoards.
     */
    distinct?: VisionBoardScalarFieldEnum | VisionBoardScalarFieldEnum[]
  }

  /**
   * VisionBoard findMany
   */
  export type VisionBoardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoard
     */
    select?: VisionBoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardInclude<ExtArgs> | null
    /**
     * Filter, which VisionBoards to fetch.
     */
    where?: VisionBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisionBoards to fetch.
     */
    orderBy?: VisionBoardOrderByWithRelationInput | VisionBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VisionBoards.
     */
    cursor?: VisionBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisionBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisionBoards.
     */
    skip?: number
    distinct?: VisionBoardScalarFieldEnum | VisionBoardScalarFieldEnum[]
  }

  /**
   * VisionBoard create
   */
  export type VisionBoardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoard
     */
    select?: VisionBoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardInclude<ExtArgs> | null
    /**
     * The data needed to create a VisionBoard.
     */
    data: XOR<VisionBoardCreateInput, VisionBoardUncheckedCreateInput>
  }

  /**
   * VisionBoard createMany
   */
  export type VisionBoardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VisionBoards.
     */
    data: VisionBoardCreateManyInput | VisionBoardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VisionBoard createManyAndReturn
   */
  export type VisionBoardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoard
     */
    select?: VisionBoardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many VisionBoards.
     */
    data: VisionBoardCreateManyInput | VisionBoardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VisionBoard update
   */
  export type VisionBoardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoard
     */
    select?: VisionBoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardInclude<ExtArgs> | null
    /**
     * The data needed to update a VisionBoard.
     */
    data: XOR<VisionBoardUpdateInput, VisionBoardUncheckedUpdateInput>
    /**
     * Choose, which VisionBoard to update.
     */
    where: VisionBoardWhereUniqueInput
  }

  /**
   * VisionBoard updateMany
   */
  export type VisionBoardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VisionBoards.
     */
    data: XOR<VisionBoardUpdateManyMutationInput, VisionBoardUncheckedUpdateManyInput>
    /**
     * Filter which VisionBoards to update
     */
    where?: VisionBoardWhereInput
  }

  /**
   * VisionBoard upsert
   */
  export type VisionBoardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoard
     */
    select?: VisionBoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardInclude<ExtArgs> | null
    /**
     * The filter to search for the VisionBoard to update in case it exists.
     */
    where: VisionBoardWhereUniqueInput
    /**
     * In case the VisionBoard found by the `where` argument doesn't exist, create a new VisionBoard with this data.
     */
    create: XOR<VisionBoardCreateInput, VisionBoardUncheckedCreateInput>
    /**
     * In case the VisionBoard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VisionBoardUpdateInput, VisionBoardUncheckedUpdateInput>
  }

  /**
   * VisionBoard delete
   */
  export type VisionBoardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoard
     */
    select?: VisionBoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardInclude<ExtArgs> | null
    /**
     * Filter which VisionBoard to delete.
     */
    where: VisionBoardWhereUniqueInput
  }

  /**
   * VisionBoard deleteMany
   */
  export type VisionBoardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VisionBoards to delete
     */
    where?: VisionBoardWhereInput
  }

  /**
   * VisionBoard.items
   */
  export type VisionBoard$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoardItem
     */
    select?: VisionBoardItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardItemInclude<ExtArgs> | null
    where?: VisionBoardItemWhereInput
    orderBy?: VisionBoardItemOrderByWithRelationInput | VisionBoardItemOrderByWithRelationInput[]
    cursor?: VisionBoardItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VisionBoardItemScalarFieldEnum | VisionBoardItemScalarFieldEnum[]
  }

  /**
   * VisionBoard without action
   */
  export type VisionBoardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoard
     */
    select?: VisionBoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardInclude<ExtArgs> | null
  }


  /**
   * Model VisionBoardItem
   */

  export type AggregateVisionBoardItem = {
    _count: VisionBoardItemCountAggregateOutputType | null
    _avg: VisionBoardItemAvgAggregateOutputType | null
    _sum: VisionBoardItemSumAggregateOutputType | null
    _min: VisionBoardItemMinAggregateOutputType | null
    _max: VisionBoardItemMaxAggregateOutputType | null
  }

  export type VisionBoardItemAvgAggregateOutputType = {
    positionX: number | null
    positionY: number | null
    width: number | null
    height: number | null
    order: number | null
  }

  export type VisionBoardItemSumAggregateOutputType = {
    positionX: number | null
    positionY: number | null
    width: number | null
    height: number | null
    order: number | null
  }

  export type VisionBoardItemMinAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    content: string | null
    imageUrl: string | null
    positionX: number | null
    positionY: number | null
    width: number | null
    height: number | null
    order: number | null
    createdAt: Date | null
    visionBoardId: string | null
    wishId: string | null
  }

  export type VisionBoardItemMaxAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    content: string | null
    imageUrl: string | null
    positionX: number | null
    positionY: number | null
    width: number | null
    height: number | null
    order: number | null
    createdAt: Date | null
    visionBoardId: string | null
    wishId: string | null
  }

  export type VisionBoardItemCountAggregateOutputType = {
    id: number
    type: number
    title: number
    content: number
    imageUrl: number
    positionX: number
    positionY: number
    width: number
    height: number
    order: number
    createdAt: number
    visionBoardId: number
    wishId: number
    _all: number
  }


  export type VisionBoardItemAvgAggregateInputType = {
    positionX?: true
    positionY?: true
    width?: true
    height?: true
    order?: true
  }

  export type VisionBoardItemSumAggregateInputType = {
    positionX?: true
    positionY?: true
    width?: true
    height?: true
    order?: true
  }

  export type VisionBoardItemMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    content?: true
    imageUrl?: true
    positionX?: true
    positionY?: true
    width?: true
    height?: true
    order?: true
    createdAt?: true
    visionBoardId?: true
    wishId?: true
  }

  export type VisionBoardItemMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    content?: true
    imageUrl?: true
    positionX?: true
    positionY?: true
    width?: true
    height?: true
    order?: true
    createdAt?: true
    visionBoardId?: true
    wishId?: true
  }

  export type VisionBoardItemCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    content?: true
    imageUrl?: true
    positionX?: true
    positionY?: true
    width?: true
    height?: true
    order?: true
    createdAt?: true
    visionBoardId?: true
    wishId?: true
    _all?: true
  }

  export type VisionBoardItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VisionBoardItem to aggregate.
     */
    where?: VisionBoardItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisionBoardItems to fetch.
     */
    orderBy?: VisionBoardItemOrderByWithRelationInput | VisionBoardItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VisionBoardItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisionBoardItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisionBoardItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VisionBoardItems
    **/
    _count?: true | VisionBoardItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VisionBoardItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VisionBoardItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VisionBoardItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VisionBoardItemMaxAggregateInputType
  }

  export type GetVisionBoardItemAggregateType<T extends VisionBoardItemAggregateArgs> = {
        [P in keyof T & keyof AggregateVisionBoardItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVisionBoardItem[P]>
      : GetScalarType<T[P], AggregateVisionBoardItem[P]>
  }




  export type VisionBoardItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VisionBoardItemWhereInput
    orderBy?: VisionBoardItemOrderByWithAggregationInput | VisionBoardItemOrderByWithAggregationInput[]
    by: VisionBoardItemScalarFieldEnum[] | VisionBoardItemScalarFieldEnum
    having?: VisionBoardItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VisionBoardItemCountAggregateInputType | true
    _avg?: VisionBoardItemAvgAggregateInputType
    _sum?: VisionBoardItemSumAggregateInputType
    _min?: VisionBoardItemMinAggregateInputType
    _max?: VisionBoardItemMaxAggregateInputType
  }

  export type VisionBoardItemGroupByOutputType = {
    id: string
    type: string
    title: string | null
    content: string
    imageUrl: string | null
    positionX: number
    positionY: number
    width: number
    height: number
    order: number
    createdAt: Date
    visionBoardId: string
    wishId: string | null
    _count: VisionBoardItemCountAggregateOutputType | null
    _avg: VisionBoardItemAvgAggregateOutputType | null
    _sum: VisionBoardItemSumAggregateOutputType | null
    _min: VisionBoardItemMinAggregateOutputType | null
    _max: VisionBoardItemMaxAggregateOutputType | null
  }

  type GetVisionBoardItemGroupByPayload<T extends VisionBoardItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VisionBoardItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VisionBoardItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VisionBoardItemGroupByOutputType[P]>
            : GetScalarType<T[P], VisionBoardItemGroupByOutputType[P]>
        }
      >
    >


  export type VisionBoardItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    imageUrl?: boolean
    positionX?: boolean
    positionY?: boolean
    width?: boolean
    height?: boolean
    order?: boolean
    createdAt?: boolean
    visionBoardId?: boolean
    wishId?: boolean
    visionBoard?: boolean | VisionBoardDefaultArgs<ExtArgs>
    wish?: boolean | VisionBoardItem$wishArgs<ExtArgs>
  }, ExtArgs["result"]["visionBoardItem"]>

  export type VisionBoardItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    imageUrl?: boolean
    positionX?: boolean
    positionY?: boolean
    width?: boolean
    height?: boolean
    order?: boolean
    createdAt?: boolean
    visionBoardId?: boolean
    wishId?: boolean
    visionBoard?: boolean | VisionBoardDefaultArgs<ExtArgs>
    wish?: boolean | VisionBoardItem$wishArgs<ExtArgs>
  }, ExtArgs["result"]["visionBoardItem"]>

  export type VisionBoardItemSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    imageUrl?: boolean
    positionX?: boolean
    positionY?: boolean
    width?: boolean
    height?: boolean
    order?: boolean
    createdAt?: boolean
    visionBoardId?: boolean
    wishId?: boolean
  }

  export type VisionBoardItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    visionBoard?: boolean | VisionBoardDefaultArgs<ExtArgs>
    wish?: boolean | VisionBoardItem$wishArgs<ExtArgs>
  }
  export type VisionBoardItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    visionBoard?: boolean | VisionBoardDefaultArgs<ExtArgs>
    wish?: boolean | VisionBoardItem$wishArgs<ExtArgs>
  }

  export type $VisionBoardItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VisionBoardItem"
    objects: {
      visionBoard: Prisma.$VisionBoardPayload<ExtArgs>
      wish: Prisma.$WishPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      title: string | null
      content: string
      imageUrl: string | null
      positionX: number
      positionY: number
      width: number
      height: number
      order: number
      createdAt: Date
      visionBoardId: string
      wishId: string | null
    }, ExtArgs["result"]["visionBoardItem"]>
    composites: {}
  }

  type VisionBoardItemGetPayload<S extends boolean | null | undefined | VisionBoardItemDefaultArgs> = $Result.GetResult<Prisma.$VisionBoardItemPayload, S>

  type VisionBoardItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VisionBoardItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VisionBoardItemCountAggregateInputType | true
    }

  export interface VisionBoardItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VisionBoardItem'], meta: { name: 'VisionBoardItem' } }
    /**
     * Find zero or one VisionBoardItem that matches the filter.
     * @param {VisionBoardItemFindUniqueArgs} args - Arguments to find a VisionBoardItem
     * @example
     * // Get one VisionBoardItem
     * const visionBoardItem = await prisma.visionBoardItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VisionBoardItemFindUniqueArgs>(args: SelectSubset<T, VisionBoardItemFindUniqueArgs<ExtArgs>>): Prisma__VisionBoardItemClient<$Result.GetResult<Prisma.$VisionBoardItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VisionBoardItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VisionBoardItemFindUniqueOrThrowArgs} args - Arguments to find a VisionBoardItem
     * @example
     * // Get one VisionBoardItem
     * const visionBoardItem = await prisma.visionBoardItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VisionBoardItemFindUniqueOrThrowArgs>(args: SelectSubset<T, VisionBoardItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VisionBoardItemClient<$Result.GetResult<Prisma.$VisionBoardItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VisionBoardItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisionBoardItemFindFirstArgs} args - Arguments to find a VisionBoardItem
     * @example
     * // Get one VisionBoardItem
     * const visionBoardItem = await prisma.visionBoardItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VisionBoardItemFindFirstArgs>(args?: SelectSubset<T, VisionBoardItemFindFirstArgs<ExtArgs>>): Prisma__VisionBoardItemClient<$Result.GetResult<Prisma.$VisionBoardItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VisionBoardItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisionBoardItemFindFirstOrThrowArgs} args - Arguments to find a VisionBoardItem
     * @example
     * // Get one VisionBoardItem
     * const visionBoardItem = await prisma.visionBoardItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VisionBoardItemFindFirstOrThrowArgs>(args?: SelectSubset<T, VisionBoardItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__VisionBoardItemClient<$Result.GetResult<Prisma.$VisionBoardItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VisionBoardItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisionBoardItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VisionBoardItems
     * const visionBoardItems = await prisma.visionBoardItem.findMany()
     * 
     * // Get first 10 VisionBoardItems
     * const visionBoardItems = await prisma.visionBoardItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const visionBoardItemWithIdOnly = await prisma.visionBoardItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VisionBoardItemFindManyArgs>(args?: SelectSubset<T, VisionBoardItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisionBoardItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VisionBoardItem.
     * @param {VisionBoardItemCreateArgs} args - Arguments to create a VisionBoardItem.
     * @example
     * // Create one VisionBoardItem
     * const VisionBoardItem = await prisma.visionBoardItem.create({
     *   data: {
     *     // ... data to create a VisionBoardItem
     *   }
     * })
     * 
     */
    create<T extends VisionBoardItemCreateArgs>(args: SelectSubset<T, VisionBoardItemCreateArgs<ExtArgs>>): Prisma__VisionBoardItemClient<$Result.GetResult<Prisma.$VisionBoardItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VisionBoardItems.
     * @param {VisionBoardItemCreateManyArgs} args - Arguments to create many VisionBoardItems.
     * @example
     * // Create many VisionBoardItems
     * const visionBoardItem = await prisma.visionBoardItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VisionBoardItemCreateManyArgs>(args?: SelectSubset<T, VisionBoardItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VisionBoardItems and returns the data saved in the database.
     * @param {VisionBoardItemCreateManyAndReturnArgs} args - Arguments to create many VisionBoardItems.
     * @example
     * // Create many VisionBoardItems
     * const visionBoardItem = await prisma.visionBoardItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VisionBoardItems and only return the `id`
     * const visionBoardItemWithIdOnly = await prisma.visionBoardItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VisionBoardItemCreateManyAndReturnArgs>(args?: SelectSubset<T, VisionBoardItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisionBoardItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a VisionBoardItem.
     * @param {VisionBoardItemDeleteArgs} args - Arguments to delete one VisionBoardItem.
     * @example
     * // Delete one VisionBoardItem
     * const VisionBoardItem = await prisma.visionBoardItem.delete({
     *   where: {
     *     // ... filter to delete one VisionBoardItem
     *   }
     * })
     * 
     */
    delete<T extends VisionBoardItemDeleteArgs>(args: SelectSubset<T, VisionBoardItemDeleteArgs<ExtArgs>>): Prisma__VisionBoardItemClient<$Result.GetResult<Prisma.$VisionBoardItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VisionBoardItem.
     * @param {VisionBoardItemUpdateArgs} args - Arguments to update one VisionBoardItem.
     * @example
     * // Update one VisionBoardItem
     * const visionBoardItem = await prisma.visionBoardItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VisionBoardItemUpdateArgs>(args: SelectSubset<T, VisionBoardItemUpdateArgs<ExtArgs>>): Prisma__VisionBoardItemClient<$Result.GetResult<Prisma.$VisionBoardItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VisionBoardItems.
     * @param {VisionBoardItemDeleteManyArgs} args - Arguments to filter VisionBoardItems to delete.
     * @example
     * // Delete a few VisionBoardItems
     * const { count } = await prisma.visionBoardItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VisionBoardItemDeleteManyArgs>(args?: SelectSubset<T, VisionBoardItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VisionBoardItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisionBoardItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VisionBoardItems
     * const visionBoardItem = await prisma.visionBoardItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VisionBoardItemUpdateManyArgs>(args: SelectSubset<T, VisionBoardItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VisionBoardItem.
     * @param {VisionBoardItemUpsertArgs} args - Arguments to update or create a VisionBoardItem.
     * @example
     * // Update or create a VisionBoardItem
     * const visionBoardItem = await prisma.visionBoardItem.upsert({
     *   create: {
     *     // ... data to create a VisionBoardItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VisionBoardItem we want to update
     *   }
     * })
     */
    upsert<T extends VisionBoardItemUpsertArgs>(args: SelectSubset<T, VisionBoardItemUpsertArgs<ExtArgs>>): Prisma__VisionBoardItemClient<$Result.GetResult<Prisma.$VisionBoardItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VisionBoardItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisionBoardItemCountArgs} args - Arguments to filter VisionBoardItems to count.
     * @example
     * // Count the number of VisionBoardItems
     * const count = await prisma.visionBoardItem.count({
     *   where: {
     *     // ... the filter for the VisionBoardItems we want to count
     *   }
     * })
    **/
    count<T extends VisionBoardItemCountArgs>(
      args?: Subset<T, VisionBoardItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VisionBoardItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VisionBoardItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisionBoardItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VisionBoardItemAggregateArgs>(args: Subset<T, VisionBoardItemAggregateArgs>): Prisma.PrismaPromise<GetVisionBoardItemAggregateType<T>>

    /**
     * Group by VisionBoardItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisionBoardItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VisionBoardItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VisionBoardItemGroupByArgs['orderBy'] }
        : { orderBy?: VisionBoardItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VisionBoardItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVisionBoardItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VisionBoardItem model
   */
  readonly fields: VisionBoardItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VisionBoardItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VisionBoardItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    visionBoard<T extends VisionBoardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VisionBoardDefaultArgs<ExtArgs>>): Prisma__VisionBoardClient<$Result.GetResult<Prisma.$VisionBoardPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    wish<T extends VisionBoardItem$wishArgs<ExtArgs> = {}>(args?: Subset<T, VisionBoardItem$wishArgs<ExtArgs>>): Prisma__WishClient<$Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VisionBoardItem model
   */ 
  interface VisionBoardItemFieldRefs {
    readonly id: FieldRef<"VisionBoardItem", 'String'>
    readonly type: FieldRef<"VisionBoardItem", 'String'>
    readonly title: FieldRef<"VisionBoardItem", 'String'>
    readonly content: FieldRef<"VisionBoardItem", 'String'>
    readonly imageUrl: FieldRef<"VisionBoardItem", 'String'>
    readonly positionX: FieldRef<"VisionBoardItem", 'Int'>
    readonly positionY: FieldRef<"VisionBoardItem", 'Int'>
    readonly width: FieldRef<"VisionBoardItem", 'Int'>
    readonly height: FieldRef<"VisionBoardItem", 'Int'>
    readonly order: FieldRef<"VisionBoardItem", 'Int'>
    readonly createdAt: FieldRef<"VisionBoardItem", 'DateTime'>
    readonly visionBoardId: FieldRef<"VisionBoardItem", 'String'>
    readonly wishId: FieldRef<"VisionBoardItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * VisionBoardItem findUnique
   */
  export type VisionBoardItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoardItem
     */
    select?: VisionBoardItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardItemInclude<ExtArgs> | null
    /**
     * Filter, which VisionBoardItem to fetch.
     */
    where: VisionBoardItemWhereUniqueInput
  }

  /**
   * VisionBoardItem findUniqueOrThrow
   */
  export type VisionBoardItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoardItem
     */
    select?: VisionBoardItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardItemInclude<ExtArgs> | null
    /**
     * Filter, which VisionBoardItem to fetch.
     */
    where: VisionBoardItemWhereUniqueInput
  }

  /**
   * VisionBoardItem findFirst
   */
  export type VisionBoardItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoardItem
     */
    select?: VisionBoardItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardItemInclude<ExtArgs> | null
    /**
     * Filter, which VisionBoardItem to fetch.
     */
    where?: VisionBoardItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisionBoardItems to fetch.
     */
    orderBy?: VisionBoardItemOrderByWithRelationInput | VisionBoardItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VisionBoardItems.
     */
    cursor?: VisionBoardItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisionBoardItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisionBoardItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VisionBoardItems.
     */
    distinct?: VisionBoardItemScalarFieldEnum | VisionBoardItemScalarFieldEnum[]
  }

  /**
   * VisionBoardItem findFirstOrThrow
   */
  export type VisionBoardItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoardItem
     */
    select?: VisionBoardItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardItemInclude<ExtArgs> | null
    /**
     * Filter, which VisionBoardItem to fetch.
     */
    where?: VisionBoardItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisionBoardItems to fetch.
     */
    orderBy?: VisionBoardItemOrderByWithRelationInput | VisionBoardItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VisionBoardItems.
     */
    cursor?: VisionBoardItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisionBoardItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisionBoardItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VisionBoardItems.
     */
    distinct?: VisionBoardItemScalarFieldEnum | VisionBoardItemScalarFieldEnum[]
  }

  /**
   * VisionBoardItem findMany
   */
  export type VisionBoardItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoardItem
     */
    select?: VisionBoardItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardItemInclude<ExtArgs> | null
    /**
     * Filter, which VisionBoardItems to fetch.
     */
    where?: VisionBoardItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisionBoardItems to fetch.
     */
    orderBy?: VisionBoardItemOrderByWithRelationInput | VisionBoardItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VisionBoardItems.
     */
    cursor?: VisionBoardItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisionBoardItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisionBoardItems.
     */
    skip?: number
    distinct?: VisionBoardItemScalarFieldEnum | VisionBoardItemScalarFieldEnum[]
  }

  /**
   * VisionBoardItem create
   */
  export type VisionBoardItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoardItem
     */
    select?: VisionBoardItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardItemInclude<ExtArgs> | null
    /**
     * The data needed to create a VisionBoardItem.
     */
    data: XOR<VisionBoardItemCreateInput, VisionBoardItemUncheckedCreateInput>
  }

  /**
   * VisionBoardItem createMany
   */
  export type VisionBoardItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VisionBoardItems.
     */
    data: VisionBoardItemCreateManyInput | VisionBoardItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VisionBoardItem createManyAndReturn
   */
  export type VisionBoardItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoardItem
     */
    select?: VisionBoardItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many VisionBoardItems.
     */
    data: VisionBoardItemCreateManyInput | VisionBoardItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VisionBoardItem update
   */
  export type VisionBoardItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoardItem
     */
    select?: VisionBoardItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardItemInclude<ExtArgs> | null
    /**
     * The data needed to update a VisionBoardItem.
     */
    data: XOR<VisionBoardItemUpdateInput, VisionBoardItemUncheckedUpdateInput>
    /**
     * Choose, which VisionBoardItem to update.
     */
    where: VisionBoardItemWhereUniqueInput
  }

  /**
   * VisionBoardItem updateMany
   */
  export type VisionBoardItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VisionBoardItems.
     */
    data: XOR<VisionBoardItemUpdateManyMutationInput, VisionBoardItemUncheckedUpdateManyInput>
    /**
     * Filter which VisionBoardItems to update
     */
    where?: VisionBoardItemWhereInput
  }

  /**
   * VisionBoardItem upsert
   */
  export type VisionBoardItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoardItem
     */
    select?: VisionBoardItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardItemInclude<ExtArgs> | null
    /**
     * The filter to search for the VisionBoardItem to update in case it exists.
     */
    where: VisionBoardItemWhereUniqueInput
    /**
     * In case the VisionBoardItem found by the `where` argument doesn't exist, create a new VisionBoardItem with this data.
     */
    create: XOR<VisionBoardItemCreateInput, VisionBoardItemUncheckedCreateInput>
    /**
     * In case the VisionBoardItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VisionBoardItemUpdateInput, VisionBoardItemUncheckedUpdateInput>
  }

  /**
   * VisionBoardItem delete
   */
  export type VisionBoardItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoardItem
     */
    select?: VisionBoardItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardItemInclude<ExtArgs> | null
    /**
     * Filter which VisionBoardItem to delete.
     */
    where: VisionBoardItemWhereUniqueInput
  }

  /**
   * VisionBoardItem deleteMany
   */
  export type VisionBoardItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VisionBoardItems to delete
     */
    where?: VisionBoardItemWhereInput
  }

  /**
   * VisionBoardItem.wish
   */
  export type VisionBoardItem$wishArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wish
     */
    select?: WishSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishInclude<ExtArgs> | null
    where?: WishWhereInput
  }

  /**
   * VisionBoardItem without action
   */
  export type VisionBoardItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisionBoardItem
     */
    select?: VisionBoardItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisionBoardItemInclude<ExtArgs> | null
  }


  /**
   * Model Reward
   */

  export type AggregateReward = {
    _count: RewardCountAggregateOutputType | null
    _avg: RewardAvgAggregateOutputType | null
    _sum: RewardSumAggregateOutputType | null
    _min: RewardMinAggregateOutputType | null
    _max: RewardMaxAggregateOutputType | null
  }

  export type RewardAvgAggregateOutputType = {
    points: number | null
  }

  export type RewardSumAggregateOutputType = {
    points: number | null
  }

  export type RewardMinAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    description: string | null
    content: string | null
    points: number | null
    category: string | null
    isClaimed: boolean | null
    claimedAt: Date | null
    createdAt: Date | null
    userId: string | null
  }

  export type RewardMaxAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    description: string | null
    content: string | null
    points: number | null
    category: string | null
    isClaimed: boolean | null
    claimedAt: Date | null
    createdAt: Date | null
    userId: string | null
  }

  export type RewardCountAggregateOutputType = {
    id: number
    type: number
    title: number
    description: number
    content: number
    points: number
    category: number
    isClaimed: number
    claimedAt: number
    createdAt: number
    userId: number
    _all: number
  }


  export type RewardAvgAggregateInputType = {
    points?: true
  }

  export type RewardSumAggregateInputType = {
    points?: true
  }

  export type RewardMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    content?: true
    points?: true
    category?: true
    isClaimed?: true
    claimedAt?: true
    createdAt?: true
    userId?: true
  }

  export type RewardMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    content?: true
    points?: true
    category?: true
    isClaimed?: true
    claimedAt?: true
    createdAt?: true
    userId?: true
  }

  export type RewardCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    content?: true
    points?: true
    category?: true
    isClaimed?: true
    claimedAt?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type RewardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reward to aggregate.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rewards
    **/
    _count?: true | RewardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RewardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RewardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RewardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RewardMaxAggregateInputType
  }

  export type GetRewardAggregateType<T extends RewardAggregateArgs> = {
        [P in keyof T & keyof AggregateReward]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReward[P]>
      : GetScalarType<T[P], AggregateReward[P]>
  }




  export type RewardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RewardWhereInput
    orderBy?: RewardOrderByWithAggregationInput | RewardOrderByWithAggregationInput[]
    by: RewardScalarFieldEnum[] | RewardScalarFieldEnum
    having?: RewardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RewardCountAggregateInputType | true
    _avg?: RewardAvgAggregateInputType
    _sum?: RewardSumAggregateInputType
    _min?: RewardMinAggregateInputType
    _max?: RewardMaxAggregateInputType
  }

  export type RewardGroupByOutputType = {
    id: string
    type: string
    title: string
    description: string
    content: string | null
    points: number
    category: string
    isClaimed: boolean
    claimedAt: Date | null
    createdAt: Date
    userId: string
    _count: RewardCountAggregateOutputType | null
    _avg: RewardAvgAggregateOutputType | null
    _sum: RewardSumAggregateOutputType | null
    _min: RewardMinAggregateOutputType | null
    _max: RewardMaxAggregateOutputType | null
  }

  type GetRewardGroupByPayload<T extends RewardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RewardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RewardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RewardGroupByOutputType[P]>
            : GetScalarType<T[P], RewardGroupByOutputType[P]>
        }
      >
    >


  export type RewardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    points?: boolean
    category?: boolean
    isClaimed?: boolean
    claimedAt?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reward"]>

  export type RewardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    points?: boolean
    category?: boolean
    isClaimed?: boolean
    claimedAt?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reward"]>

  export type RewardSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    points?: boolean
    category?: boolean
    isClaimed?: boolean
    claimedAt?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type RewardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RewardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RewardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reward"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      title: string
      description: string
      content: string | null
      points: number
      category: string
      isClaimed: boolean
      claimedAt: Date | null
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["reward"]>
    composites: {}
  }

  type RewardGetPayload<S extends boolean | null | undefined | RewardDefaultArgs> = $Result.GetResult<Prisma.$RewardPayload, S>

  type RewardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RewardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RewardCountAggregateInputType | true
    }

  export interface RewardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reward'], meta: { name: 'Reward' } }
    /**
     * Find zero or one Reward that matches the filter.
     * @param {RewardFindUniqueArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RewardFindUniqueArgs>(args: SelectSubset<T, RewardFindUniqueArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Reward that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RewardFindUniqueOrThrowArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RewardFindUniqueOrThrowArgs>(args: SelectSubset<T, RewardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Reward that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardFindFirstArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RewardFindFirstArgs>(args?: SelectSubset<T, RewardFindFirstArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Reward that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardFindFirstOrThrowArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RewardFindFirstOrThrowArgs>(args?: SelectSubset<T, RewardFindFirstOrThrowArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Rewards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rewards
     * const rewards = await prisma.reward.findMany()
     * 
     * // Get first 10 Rewards
     * const rewards = await prisma.reward.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rewardWithIdOnly = await prisma.reward.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RewardFindManyArgs>(args?: SelectSubset<T, RewardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Reward.
     * @param {RewardCreateArgs} args - Arguments to create a Reward.
     * @example
     * // Create one Reward
     * const Reward = await prisma.reward.create({
     *   data: {
     *     // ... data to create a Reward
     *   }
     * })
     * 
     */
    create<T extends RewardCreateArgs>(args: SelectSubset<T, RewardCreateArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Rewards.
     * @param {RewardCreateManyArgs} args - Arguments to create many Rewards.
     * @example
     * // Create many Rewards
     * const reward = await prisma.reward.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RewardCreateManyArgs>(args?: SelectSubset<T, RewardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rewards and returns the data saved in the database.
     * @param {RewardCreateManyAndReturnArgs} args - Arguments to create many Rewards.
     * @example
     * // Create many Rewards
     * const reward = await prisma.reward.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rewards and only return the `id`
     * const rewardWithIdOnly = await prisma.reward.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RewardCreateManyAndReturnArgs>(args?: SelectSubset<T, RewardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Reward.
     * @param {RewardDeleteArgs} args - Arguments to delete one Reward.
     * @example
     * // Delete one Reward
     * const Reward = await prisma.reward.delete({
     *   where: {
     *     // ... filter to delete one Reward
     *   }
     * })
     * 
     */
    delete<T extends RewardDeleteArgs>(args: SelectSubset<T, RewardDeleteArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Reward.
     * @param {RewardUpdateArgs} args - Arguments to update one Reward.
     * @example
     * // Update one Reward
     * const reward = await prisma.reward.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RewardUpdateArgs>(args: SelectSubset<T, RewardUpdateArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Rewards.
     * @param {RewardDeleteManyArgs} args - Arguments to filter Rewards to delete.
     * @example
     * // Delete a few Rewards
     * const { count } = await prisma.reward.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RewardDeleteManyArgs>(args?: SelectSubset<T, RewardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rewards
     * const reward = await prisma.reward.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RewardUpdateManyArgs>(args: SelectSubset<T, RewardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reward.
     * @param {RewardUpsertArgs} args - Arguments to update or create a Reward.
     * @example
     * // Update or create a Reward
     * const reward = await prisma.reward.upsert({
     *   create: {
     *     // ... data to create a Reward
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reward we want to update
     *   }
     * })
     */
    upsert<T extends RewardUpsertArgs>(args: SelectSubset<T, RewardUpsertArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Rewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardCountArgs} args - Arguments to filter Rewards to count.
     * @example
     * // Count the number of Rewards
     * const count = await prisma.reward.count({
     *   where: {
     *     // ... the filter for the Rewards we want to count
     *   }
     * })
    **/
    count<T extends RewardCountArgs>(
      args?: Subset<T, RewardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RewardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RewardAggregateArgs>(args: Subset<T, RewardAggregateArgs>): Prisma.PrismaPromise<GetRewardAggregateType<T>>

    /**
     * Group by Reward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RewardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RewardGroupByArgs['orderBy'] }
        : { orderBy?: RewardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RewardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRewardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reward model
   */
  readonly fields: RewardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reward.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RewardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reward model
   */ 
  interface RewardFieldRefs {
    readonly id: FieldRef<"Reward", 'String'>
    readonly type: FieldRef<"Reward", 'String'>
    readonly title: FieldRef<"Reward", 'String'>
    readonly description: FieldRef<"Reward", 'String'>
    readonly content: FieldRef<"Reward", 'String'>
    readonly points: FieldRef<"Reward", 'Int'>
    readonly category: FieldRef<"Reward", 'String'>
    readonly isClaimed: FieldRef<"Reward", 'Boolean'>
    readonly claimedAt: FieldRef<"Reward", 'DateTime'>
    readonly createdAt: FieldRef<"Reward", 'DateTime'>
    readonly userId: FieldRef<"Reward", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Reward findUnique
   */
  export type RewardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward findUniqueOrThrow
   */
  export type RewardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward findFirst
   */
  export type RewardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rewards.
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rewards.
     */
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * Reward findFirstOrThrow
   */
  export type RewardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rewards.
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rewards.
     */
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * Reward findMany
   */
  export type RewardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Rewards to fetch.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rewards.
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * Reward create
   */
  export type RewardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * The data needed to create a Reward.
     */
    data: XOR<RewardCreateInput, RewardUncheckedCreateInput>
  }

  /**
   * Reward createMany
   */
  export type RewardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rewards.
     */
    data: RewardCreateManyInput | RewardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reward createManyAndReturn
   */
  export type RewardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Rewards.
     */
    data: RewardCreateManyInput | RewardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reward update
   */
  export type RewardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * The data needed to update a Reward.
     */
    data: XOR<RewardUpdateInput, RewardUncheckedUpdateInput>
    /**
     * Choose, which Reward to update.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward updateMany
   */
  export type RewardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rewards.
     */
    data: XOR<RewardUpdateManyMutationInput, RewardUncheckedUpdateManyInput>
    /**
     * Filter which Rewards to update
     */
    where?: RewardWhereInput
  }

  /**
   * Reward upsert
   */
  export type RewardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * The filter to search for the Reward to update in case it exists.
     */
    where: RewardWhereUniqueInput
    /**
     * In case the Reward found by the `where` argument doesn't exist, create a new Reward with this data.
     */
    create: XOR<RewardCreateInput, RewardUncheckedCreateInput>
    /**
     * In case the Reward was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RewardUpdateInput, RewardUncheckedUpdateInput>
  }

  /**
   * Reward delete
   */
  export type RewardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter which Reward to delete.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward deleteMany
   */
  export type RewardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rewards to delete
     */
    where?: RewardWhereInput
  }

  /**
   * Reward without action
   */
  export type RewardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
  }


  /**
   * Model GrowthPoint
   */

  export type AggregateGrowthPoint = {
    _count: GrowthPointCountAggregateOutputType | null
    _avg: GrowthPointAvgAggregateOutputType | null
    _sum: GrowthPointSumAggregateOutputType | null
    _min: GrowthPointMinAggregateOutputType | null
    _max: GrowthPointMaxAggregateOutputType | null
  }

  export type GrowthPointAvgAggregateOutputType = {
    points: number | null
  }

  export type GrowthPointSumAggregateOutputType = {
    points: number | null
  }

  export type GrowthPointMinAggregateOutputType = {
    id: string | null
    points: number | null
    source: string | null
    sourceId: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type GrowthPointMaxAggregateOutputType = {
    id: string | null
    points: number | null
    source: string | null
    sourceId: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type GrowthPointCountAggregateOutputType = {
    id: number
    points: number
    source: number
    sourceId: number
    createdAt: number
    userId: number
    _all: number
  }


  export type GrowthPointAvgAggregateInputType = {
    points?: true
  }

  export type GrowthPointSumAggregateInputType = {
    points?: true
  }

  export type GrowthPointMinAggregateInputType = {
    id?: true
    points?: true
    source?: true
    sourceId?: true
    createdAt?: true
    userId?: true
  }

  export type GrowthPointMaxAggregateInputType = {
    id?: true
    points?: true
    source?: true
    sourceId?: true
    createdAt?: true
    userId?: true
  }

  export type GrowthPointCountAggregateInputType = {
    id?: true
    points?: true
    source?: true
    sourceId?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type GrowthPointAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrowthPoint to aggregate.
     */
    where?: GrowthPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrowthPoints to fetch.
     */
    orderBy?: GrowthPointOrderByWithRelationInput | GrowthPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GrowthPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrowthPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrowthPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GrowthPoints
    **/
    _count?: true | GrowthPointCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GrowthPointAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GrowthPointSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrowthPointMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrowthPointMaxAggregateInputType
  }

  export type GetGrowthPointAggregateType<T extends GrowthPointAggregateArgs> = {
        [P in keyof T & keyof AggregateGrowthPoint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrowthPoint[P]>
      : GetScalarType<T[P], AggregateGrowthPoint[P]>
  }




  export type GrowthPointGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrowthPointWhereInput
    orderBy?: GrowthPointOrderByWithAggregationInput | GrowthPointOrderByWithAggregationInput[]
    by: GrowthPointScalarFieldEnum[] | GrowthPointScalarFieldEnum
    having?: GrowthPointScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrowthPointCountAggregateInputType | true
    _avg?: GrowthPointAvgAggregateInputType
    _sum?: GrowthPointSumAggregateInputType
    _min?: GrowthPointMinAggregateInputType
    _max?: GrowthPointMaxAggregateInputType
  }

  export type GrowthPointGroupByOutputType = {
    id: string
    points: number
    source: string
    sourceId: string | null
    createdAt: Date
    userId: string
    _count: GrowthPointCountAggregateOutputType | null
    _avg: GrowthPointAvgAggregateOutputType | null
    _sum: GrowthPointSumAggregateOutputType | null
    _min: GrowthPointMinAggregateOutputType | null
    _max: GrowthPointMaxAggregateOutputType | null
  }

  type GetGrowthPointGroupByPayload<T extends GrowthPointGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GrowthPointGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrowthPointGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrowthPointGroupByOutputType[P]>
            : GetScalarType<T[P], GrowthPointGroupByOutputType[P]>
        }
      >
    >


  export type GrowthPointSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    points?: boolean
    source?: boolean
    sourceId?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["growthPoint"]>

  export type GrowthPointSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    points?: boolean
    source?: boolean
    sourceId?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["growthPoint"]>

  export type GrowthPointSelectScalar = {
    id?: boolean
    points?: boolean
    source?: boolean
    sourceId?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type GrowthPointInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GrowthPointIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GrowthPointPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GrowthPoint"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      points: number
      source: string
      sourceId: string | null
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["growthPoint"]>
    composites: {}
  }

  type GrowthPointGetPayload<S extends boolean | null | undefined | GrowthPointDefaultArgs> = $Result.GetResult<Prisma.$GrowthPointPayload, S>

  type GrowthPointCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GrowthPointFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GrowthPointCountAggregateInputType | true
    }

  export interface GrowthPointDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GrowthPoint'], meta: { name: 'GrowthPoint' } }
    /**
     * Find zero or one GrowthPoint that matches the filter.
     * @param {GrowthPointFindUniqueArgs} args - Arguments to find a GrowthPoint
     * @example
     * // Get one GrowthPoint
     * const growthPoint = await prisma.growthPoint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GrowthPointFindUniqueArgs>(args: SelectSubset<T, GrowthPointFindUniqueArgs<ExtArgs>>): Prisma__GrowthPointClient<$Result.GetResult<Prisma.$GrowthPointPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GrowthPoint that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GrowthPointFindUniqueOrThrowArgs} args - Arguments to find a GrowthPoint
     * @example
     * // Get one GrowthPoint
     * const growthPoint = await prisma.growthPoint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GrowthPointFindUniqueOrThrowArgs>(args: SelectSubset<T, GrowthPointFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GrowthPointClient<$Result.GetResult<Prisma.$GrowthPointPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GrowthPoint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrowthPointFindFirstArgs} args - Arguments to find a GrowthPoint
     * @example
     * // Get one GrowthPoint
     * const growthPoint = await prisma.growthPoint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GrowthPointFindFirstArgs>(args?: SelectSubset<T, GrowthPointFindFirstArgs<ExtArgs>>): Prisma__GrowthPointClient<$Result.GetResult<Prisma.$GrowthPointPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GrowthPoint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrowthPointFindFirstOrThrowArgs} args - Arguments to find a GrowthPoint
     * @example
     * // Get one GrowthPoint
     * const growthPoint = await prisma.growthPoint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GrowthPointFindFirstOrThrowArgs>(args?: SelectSubset<T, GrowthPointFindFirstOrThrowArgs<ExtArgs>>): Prisma__GrowthPointClient<$Result.GetResult<Prisma.$GrowthPointPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GrowthPoints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrowthPointFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GrowthPoints
     * const growthPoints = await prisma.growthPoint.findMany()
     * 
     * // Get first 10 GrowthPoints
     * const growthPoints = await prisma.growthPoint.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const growthPointWithIdOnly = await prisma.growthPoint.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GrowthPointFindManyArgs>(args?: SelectSubset<T, GrowthPointFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrowthPointPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GrowthPoint.
     * @param {GrowthPointCreateArgs} args - Arguments to create a GrowthPoint.
     * @example
     * // Create one GrowthPoint
     * const GrowthPoint = await prisma.growthPoint.create({
     *   data: {
     *     // ... data to create a GrowthPoint
     *   }
     * })
     * 
     */
    create<T extends GrowthPointCreateArgs>(args: SelectSubset<T, GrowthPointCreateArgs<ExtArgs>>): Prisma__GrowthPointClient<$Result.GetResult<Prisma.$GrowthPointPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GrowthPoints.
     * @param {GrowthPointCreateManyArgs} args - Arguments to create many GrowthPoints.
     * @example
     * // Create many GrowthPoints
     * const growthPoint = await prisma.growthPoint.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GrowthPointCreateManyArgs>(args?: SelectSubset<T, GrowthPointCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GrowthPoints and returns the data saved in the database.
     * @param {GrowthPointCreateManyAndReturnArgs} args - Arguments to create many GrowthPoints.
     * @example
     * // Create many GrowthPoints
     * const growthPoint = await prisma.growthPoint.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GrowthPoints and only return the `id`
     * const growthPointWithIdOnly = await prisma.growthPoint.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GrowthPointCreateManyAndReturnArgs>(args?: SelectSubset<T, GrowthPointCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrowthPointPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GrowthPoint.
     * @param {GrowthPointDeleteArgs} args - Arguments to delete one GrowthPoint.
     * @example
     * // Delete one GrowthPoint
     * const GrowthPoint = await prisma.growthPoint.delete({
     *   where: {
     *     // ... filter to delete one GrowthPoint
     *   }
     * })
     * 
     */
    delete<T extends GrowthPointDeleteArgs>(args: SelectSubset<T, GrowthPointDeleteArgs<ExtArgs>>): Prisma__GrowthPointClient<$Result.GetResult<Prisma.$GrowthPointPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GrowthPoint.
     * @param {GrowthPointUpdateArgs} args - Arguments to update one GrowthPoint.
     * @example
     * // Update one GrowthPoint
     * const growthPoint = await prisma.growthPoint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GrowthPointUpdateArgs>(args: SelectSubset<T, GrowthPointUpdateArgs<ExtArgs>>): Prisma__GrowthPointClient<$Result.GetResult<Prisma.$GrowthPointPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GrowthPoints.
     * @param {GrowthPointDeleteManyArgs} args - Arguments to filter GrowthPoints to delete.
     * @example
     * // Delete a few GrowthPoints
     * const { count } = await prisma.growthPoint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GrowthPointDeleteManyArgs>(args?: SelectSubset<T, GrowthPointDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GrowthPoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrowthPointUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GrowthPoints
     * const growthPoint = await prisma.growthPoint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GrowthPointUpdateManyArgs>(args: SelectSubset<T, GrowthPointUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GrowthPoint.
     * @param {GrowthPointUpsertArgs} args - Arguments to update or create a GrowthPoint.
     * @example
     * // Update or create a GrowthPoint
     * const growthPoint = await prisma.growthPoint.upsert({
     *   create: {
     *     // ... data to create a GrowthPoint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GrowthPoint we want to update
     *   }
     * })
     */
    upsert<T extends GrowthPointUpsertArgs>(args: SelectSubset<T, GrowthPointUpsertArgs<ExtArgs>>): Prisma__GrowthPointClient<$Result.GetResult<Prisma.$GrowthPointPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GrowthPoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrowthPointCountArgs} args - Arguments to filter GrowthPoints to count.
     * @example
     * // Count the number of GrowthPoints
     * const count = await prisma.growthPoint.count({
     *   where: {
     *     // ... the filter for the GrowthPoints we want to count
     *   }
     * })
    **/
    count<T extends GrowthPointCountArgs>(
      args?: Subset<T, GrowthPointCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrowthPointCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GrowthPoint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrowthPointAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrowthPointAggregateArgs>(args: Subset<T, GrowthPointAggregateArgs>): Prisma.PrismaPromise<GetGrowthPointAggregateType<T>>

    /**
     * Group by GrowthPoint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrowthPointGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrowthPointGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrowthPointGroupByArgs['orderBy'] }
        : { orderBy?: GrowthPointGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrowthPointGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrowthPointGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GrowthPoint model
   */
  readonly fields: GrowthPointFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GrowthPoint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GrowthPointClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GrowthPoint model
   */ 
  interface GrowthPointFieldRefs {
    readonly id: FieldRef<"GrowthPoint", 'String'>
    readonly points: FieldRef<"GrowthPoint", 'Int'>
    readonly source: FieldRef<"GrowthPoint", 'String'>
    readonly sourceId: FieldRef<"GrowthPoint", 'String'>
    readonly createdAt: FieldRef<"GrowthPoint", 'DateTime'>
    readonly userId: FieldRef<"GrowthPoint", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GrowthPoint findUnique
   */
  export type GrowthPointFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthPoint
     */
    select?: GrowthPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrowthPointInclude<ExtArgs> | null
    /**
     * Filter, which GrowthPoint to fetch.
     */
    where: GrowthPointWhereUniqueInput
  }

  /**
   * GrowthPoint findUniqueOrThrow
   */
  export type GrowthPointFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthPoint
     */
    select?: GrowthPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrowthPointInclude<ExtArgs> | null
    /**
     * Filter, which GrowthPoint to fetch.
     */
    where: GrowthPointWhereUniqueInput
  }

  /**
   * GrowthPoint findFirst
   */
  export type GrowthPointFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthPoint
     */
    select?: GrowthPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrowthPointInclude<ExtArgs> | null
    /**
     * Filter, which GrowthPoint to fetch.
     */
    where?: GrowthPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrowthPoints to fetch.
     */
    orderBy?: GrowthPointOrderByWithRelationInput | GrowthPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrowthPoints.
     */
    cursor?: GrowthPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrowthPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrowthPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrowthPoints.
     */
    distinct?: GrowthPointScalarFieldEnum | GrowthPointScalarFieldEnum[]
  }

  /**
   * GrowthPoint findFirstOrThrow
   */
  export type GrowthPointFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthPoint
     */
    select?: GrowthPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrowthPointInclude<ExtArgs> | null
    /**
     * Filter, which GrowthPoint to fetch.
     */
    where?: GrowthPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrowthPoints to fetch.
     */
    orderBy?: GrowthPointOrderByWithRelationInput | GrowthPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrowthPoints.
     */
    cursor?: GrowthPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrowthPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrowthPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrowthPoints.
     */
    distinct?: GrowthPointScalarFieldEnum | GrowthPointScalarFieldEnum[]
  }

  /**
   * GrowthPoint findMany
   */
  export type GrowthPointFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthPoint
     */
    select?: GrowthPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrowthPointInclude<ExtArgs> | null
    /**
     * Filter, which GrowthPoints to fetch.
     */
    where?: GrowthPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrowthPoints to fetch.
     */
    orderBy?: GrowthPointOrderByWithRelationInput | GrowthPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GrowthPoints.
     */
    cursor?: GrowthPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrowthPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrowthPoints.
     */
    skip?: number
    distinct?: GrowthPointScalarFieldEnum | GrowthPointScalarFieldEnum[]
  }

  /**
   * GrowthPoint create
   */
  export type GrowthPointCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthPoint
     */
    select?: GrowthPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrowthPointInclude<ExtArgs> | null
    /**
     * The data needed to create a GrowthPoint.
     */
    data: XOR<GrowthPointCreateInput, GrowthPointUncheckedCreateInput>
  }

  /**
   * GrowthPoint createMany
   */
  export type GrowthPointCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GrowthPoints.
     */
    data: GrowthPointCreateManyInput | GrowthPointCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GrowthPoint createManyAndReturn
   */
  export type GrowthPointCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthPoint
     */
    select?: GrowthPointSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GrowthPoints.
     */
    data: GrowthPointCreateManyInput | GrowthPointCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrowthPointIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GrowthPoint update
   */
  export type GrowthPointUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthPoint
     */
    select?: GrowthPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrowthPointInclude<ExtArgs> | null
    /**
     * The data needed to update a GrowthPoint.
     */
    data: XOR<GrowthPointUpdateInput, GrowthPointUncheckedUpdateInput>
    /**
     * Choose, which GrowthPoint to update.
     */
    where: GrowthPointWhereUniqueInput
  }

  /**
   * GrowthPoint updateMany
   */
  export type GrowthPointUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GrowthPoints.
     */
    data: XOR<GrowthPointUpdateManyMutationInput, GrowthPointUncheckedUpdateManyInput>
    /**
     * Filter which GrowthPoints to update
     */
    where?: GrowthPointWhereInput
  }

  /**
   * GrowthPoint upsert
   */
  export type GrowthPointUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthPoint
     */
    select?: GrowthPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrowthPointInclude<ExtArgs> | null
    /**
     * The filter to search for the GrowthPoint to update in case it exists.
     */
    where: GrowthPointWhereUniqueInput
    /**
     * In case the GrowthPoint found by the `where` argument doesn't exist, create a new GrowthPoint with this data.
     */
    create: XOR<GrowthPointCreateInput, GrowthPointUncheckedCreateInput>
    /**
     * In case the GrowthPoint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GrowthPointUpdateInput, GrowthPointUncheckedUpdateInput>
  }

  /**
   * GrowthPoint delete
   */
  export type GrowthPointDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthPoint
     */
    select?: GrowthPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrowthPointInclude<ExtArgs> | null
    /**
     * Filter which GrowthPoint to delete.
     */
    where: GrowthPointWhereUniqueInput
  }

  /**
   * GrowthPoint deleteMany
   */
  export type GrowthPointDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrowthPoints to delete
     */
    where?: GrowthPointWhereInput
  }

  /**
   * GrowthPoint without action
   */
  export type GrowthPointDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthPoint
     */
    select?: GrowthPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrowthPointInclude<ExtArgs> | null
  }


  /**
   * Model AIInteraction
   */

  export type AggregateAIInteraction = {
    _count: AIInteractionCountAggregateOutputType | null
    _avg: AIInteractionAvgAggregateOutputType | null
    _sum: AIInteractionSumAggregateOutputType | null
    _min: AIInteractionMinAggregateOutputType | null
    _max: AIInteractionMaxAggregateOutputType | null
  }

  export type AIInteractionAvgAggregateOutputType = {
    tokensUsed: number | null
    cost: number | null
  }

  export type AIInteractionSumAggregateOutputType = {
    tokensUsed: number | null
    cost: number | null
  }

  export type AIInteractionMinAggregateOutputType = {
    id: string | null
    type: string | null
    input: string | null
    output: string | null
    tokensUsed: number | null
    cost: number | null
    createdAt: Date | null
  }

  export type AIInteractionMaxAggregateOutputType = {
    id: string | null
    type: string | null
    input: string | null
    output: string | null
    tokensUsed: number | null
    cost: number | null
    createdAt: Date | null
  }

  export type AIInteractionCountAggregateOutputType = {
    id: number
    type: number
    input: number
    output: number
    tokensUsed: number
    cost: number
    createdAt: number
    _all: number
  }


  export type AIInteractionAvgAggregateInputType = {
    tokensUsed?: true
    cost?: true
  }

  export type AIInteractionSumAggregateInputType = {
    tokensUsed?: true
    cost?: true
  }

  export type AIInteractionMinAggregateInputType = {
    id?: true
    type?: true
    input?: true
    output?: true
    tokensUsed?: true
    cost?: true
    createdAt?: true
  }

  export type AIInteractionMaxAggregateInputType = {
    id?: true
    type?: true
    input?: true
    output?: true
    tokensUsed?: true
    cost?: true
    createdAt?: true
  }

  export type AIInteractionCountAggregateInputType = {
    id?: true
    type?: true
    input?: true
    output?: true
    tokensUsed?: true
    cost?: true
    createdAt?: true
    _all?: true
  }

  export type AIInteractionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIInteraction to aggregate.
     */
    where?: AIInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIInteractions to fetch.
     */
    orderBy?: AIInteractionOrderByWithRelationInput | AIInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AIInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AIInteractions
    **/
    _count?: true | AIInteractionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AIInteractionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AIInteractionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AIInteractionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AIInteractionMaxAggregateInputType
  }

  export type GetAIInteractionAggregateType<T extends AIInteractionAggregateArgs> = {
        [P in keyof T & keyof AggregateAIInteraction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAIInteraction[P]>
      : GetScalarType<T[P], AggregateAIInteraction[P]>
  }




  export type AIInteractionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIInteractionWhereInput
    orderBy?: AIInteractionOrderByWithAggregationInput | AIInteractionOrderByWithAggregationInput[]
    by: AIInteractionScalarFieldEnum[] | AIInteractionScalarFieldEnum
    having?: AIInteractionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AIInteractionCountAggregateInputType | true
    _avg?: AIInteractionAvgAggregateInputType
    _sum?: AIInteractionSumAggregateInputType
    _min?: AIInteractionMinAggregateInputType
    _max?: AIInteractionMaxAggregateInputType
  }

  export type AIInteractionGroupByOutputType = {
    id: string
    type: string
    input: string
    output: string
    tokensUsed: number | null
    cost: number | null
    createdAt: Date
    _count: AIInteractionCountAggregateOutputType | null
    _avg: AIInteractionAvgAggregateOutputType | null
    _sum: AIInteractionSumAggregateOutputType | null
    _min: AIInteractionMinAggregateOutputType | null
    _max: AIInteractionMaxAggregateOutputType | null
  }

  type GetAIInteractionGroupByPayload<T extends AIInteractionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AIInteractionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AIInteractionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AIInteractionGroupByOutputType[P]>
            : GetScalarType<T[P], AIInteractionGroupByOutputType[P]>
        }
      >
    >


  export type AIInteractionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    input?: boolean
    output?: boolean
    tokensUsed?: boolean
    cost?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["aIInteraction"]>

  export type AIInteractionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    input?: boolean
    output?: boolean
    tokensUsed?: boolean
    cost?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["aIInteraction"]>

  export type AIInteractionSelectScalar = {
    id?: boolean
    type?: boolean
    input?: boolean
    output?: boolean
    tokensUsed?: boolean
    cost?: boolean
    createdAt?: boolean
  }


  export type $AIInteractionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AIInteraction"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      input: string
      output: string
      tokensUsed: number | null
      cost: number | null
      createdAt: Date
    }, ExtArgs["result"]["aIInteraction"]>
    composites: {}
  }

  type AIInteractionGetPayload<S extends boolean | null | undefined | AIInteractionDefaultArgs> = $Result.GetResult<Prisma.$AIInteractionPayload, S>

  type AIInteractionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AIInteractionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AIInteractionCountAggregateInputType | true
    }

  export interface AIInteractionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AIInteraction'], meta: { name: 'AIInteraction' } }
    /**
     * Find zero or one AIInteraction that matches the filter.
     * @param {AIInteractionFindUniqueArgs} args - Arguments to find a AIInteraction
     * @example
     * // Get one AIInteraction
     * const aIInteraction = await prisma.aIInteraction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AIInteractionFindUniqueArgs>(args: SelectSubset<T, AIInteractionFindUniqueArgs<ExtArgs>>): Prisma__AIInteractionClient<$Result.GetResult<Prisma.$AIInteractionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AIInteraction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AIInteractionFindUniqueOrThrowArgs} args - Arguments to find a AIInteraction
     * @example
     * // Get one AIInteraction
     * const aIInteraction = await prisma.aIInteraction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AIInteractionFindUniqueOrThrowArgs>(args: SelectSubset<T, AIInteractionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AIInteractionClient<$Result.GetResult<Prisma.$AIInteractionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AIInteraction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInteractionFindFirstArgs} args - Arguments to find a AIInteraction
     * @example
     * // Get one AIInteraction
     * const aIInteraction = await prisma.aIInteraction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AIInteractionFindFirstArgs>(args?: SelectSubset<T, AIInteractionFindFirstArgs<ExtArgs>>): Prisma__AIInteractionClient<$Result.GetResult<Prisma.$AIInteractionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AIInteraction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInteractionFindFirstOrThrowArgs} args - Arguments to find a AIInteraction
     * @example
     * // Get one AIInteraction
     * const aIInteraction = await prisma.aIInteraction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AIInteractionFindFirstOrThrowArgs>(args?: SelectSubset<T, AIInteractionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AIInteractionClient<$Result.GetResult<Prisma.$AIInteractionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AIInteractions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInteractionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AIInteractions
     * const aIInteractions = await prisma.aIInteraction.findMany()
     * 
     * // Get first 10 AIInteractions
     * const aIInteractions = await prisma.aIInteraction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aIInteractionWithIdOnly = await prisma.aIInteraction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AIInteractionFindManyArgs>(args?: SelectSubset<T, AIInteractionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIInteractionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AIInteraction.
     * @param {AIInteractionCreateArgs} args - Arguments to create a AIInteraction.
     * @example
     * // Create one AIInteraction
     * const AIInteraction = await prisma.aIInteraction.create({
     *   data: {
     *     // ... data to create a AIInteraction
     *   }
     * })
     * 
     */
    create<T extends AIInteractionCreateArgs>(args: SelectSubset<T, AIInteractionCreateArgs<ExtArgs>>): Prisma__AIInteractionClient<$Result.GetResult<Prisma.$AIInteractionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AIInteractions.
     * @param {AIInteractionCreateManyArgs} args - Arguments to create many AIInteractions.
     * @example
     * // Create many AIInteractions
     * const aIInteraction = await prisma.aIInteraction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AIInteractionCreateManyArgs>(args?: SelectSubset<T, AIInteractionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AIInteractions and returns the data saved in the database.
     * @param {AIInteractionCreateManyAndReturnArgs} args - Arguments to create many AIInteractions.
     * @example
     * // Create many AIInteractions
     * const aIInteraction = await prisma.aIInteraction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AIInteractions and only return the `id`
     * const aIInteractionWithIdOnly = await prisma.aIInteraction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AIInteractionCreateManyAndReturnArgs>(args?: SelectSubset<T, AIInteractionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIInteractionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AIInteraction.
     * @param {AIInteractionDeleteArgs} args - Arguments to delete one AIInteraction.
     * @example
     * // Delete one AIInteraction
     * const AIInteraction = await prisma.aIInteraction.delete({
     *   where: {
     *     // ... filter to delete one AIInteraction
     *   }
     * })
     * 
     */
    delete<T extends AIInteractionDeleteArgs>(args: SelectSubset<T, AIInteractionDeleteArgs<ExtArgs>>): Prisma__AIInteractionClient<$Result.GetResult<Prisma.$AIInteractionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AIInteraction.
     * @param {AIInteractionUpdateArgs} args - Arguments to update one AIInteraction.
     * @example
     * // Update one AIInteraction
     * const aIInteraction = await prisma.aIInteraction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AIInteractionUpdateArgs>(args: SelectSubset<T, AIInteractionUpdateArgs<ExtArgs>>): Prisma__AIInteractionClient<$Result.GetResult<Prisma.$AIInteractionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AIInteractions.
     * @param {AIInteractionDeleteManyArgs} args - Arguments to filter AIInteractions to delete.
     * @example
     * // Delete a few AIInteractions
     * const { count } = await prisma.aIInteraction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AIInteractionDeleteManyArgs>(args?: SelectSubset<T, AIInteractionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIInteractions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInteractionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AIInteractions
     * const aIInteraction = await prisma.aIInteraction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AIInteractionUpdateManyArgs>(args: SelectSubset<T, AIInteractionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AIInteraction.
     * @param {AIInteractionUpsertArgs} args - Arguments to update or create a AIInteraction.
     * @example
     * // Update or create a AIInteraction
     * const aIInteraction = await prisma.aIInteraction.upsert({
     *   create: {
     *     // ... data to create a AIInteraction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AIInteraction we want to update
     *   }
     * })
     */
    upsert<T extends AIInteractionUpsertArgs>(args: SelectSubset<T, AIInteractionUpsertArgs<ExtArgs>>): Prisma__AIInteractionClient<$Result.GetResult<Prisma.$AIInteractionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AIInteractions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInteractionCountArgs} args - Arguments to filter AIInteractions to count.
     * @example
     * // Count the number of AIInteractions
     * const count = await prisma.aIInteraction.count({
     *   where: {
     *     // ... the filter for the AIInteractions we want to count
     *   }
     * })
    **/
    count<T extends AIInteractionCountArgs>(
      args?: Subset<T, AIInteractionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AIInteractionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AIInteraction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInteractionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AIInteractionAggregateArgs>(args: Subset<T, AIInteractionAggregateArgs>): Prisma.PrismaPromise<GetAIInteractionAggregateType<T>>

    /**
     * Group by AIInteraction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInteractionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AIInteractionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AIInteractionGroupByArgs['orderBy'] }
        : { orderBy?: AIInteractionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AIInteractionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAIInteractionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AIInteraction model
   */
  readonly fields: AIInteractionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AIInteraction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AIInteractionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AIInteraction model
   */ 
  interface AIInteractionFieldRefs {
    readonly id: FieldRef<"AIInteraction", 'String'>
    readonly type: FieldRef<"AIInteraction", 'String'>
    readonly input: FieldRef<"AIInteraction", 'String'>
    readonly output: FieldRef<"AIInteraction", 'String'>
    readonly tokensUsed: FieldRef<"AIInteraction", 'Int'>
    readonly cost: FieldRef<"AIInteraction", 'Float'>
    readonly createdAt: FieldRef<"AIInteraction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AIInteraction findUnique
   */
  export type AIInteractionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteraction
     */
    select?: AIInteractionSelect<ExtArgs> | null
    /**
     * Filter, which AIInteraction to fetch.
     */
    where: AIInteractionWhereUniqueInput
  }

  /**
   * AIInteraction findUniqueOrThrow
   */
  export type AIInteractionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteraction
     */
    select?: AIInteractionSelect<ExtArgs> | null
    /**
     * Filter, which AIInteraction to fetch.
     */
    where: AIInteractionWhereUniqueInput
  }

  /**
   * AIInteraction findFirst
   */
  export type AIInteractionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteraction
     */
    select?: AIInteractionSelect<ExtArgs> | null
    /**
     * Filter, which AIInteraction to fetch.
     */
    where?: AIInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIInteractions to fetch.
     */
    orderBy?: AIInteractionOrderByWithRelationInput | AIInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIInteractions.
     */
    cursor?: AIInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIInteractions.
     */
    distinct?: AIInteractionScalarFieldEnum | AIInteractionScalarFieldEnum[]
  }

  /**
   * AIInteraction findFirstOrThrow
   */
  export type AIInteractionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteraction
     */
    select?: AIInteractionSelect<ExtArgs> | null
    /**
     * Filter, which AIInteraction to fetch.
     */
    where?: AIInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIInteractions to fetch.
     */
    orderBy?: AIInteractionOrderByWithRelationInput | AIInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIInteractions.
     */
    cursor?: AIInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIInteractions.
     */
    distinct?: AIInteractionScalarFieldEnum | AIInteractionScalarFieldEnum[]
  }

  /**
   * AIInteraction findMany
   */
  export type AIInteractionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteraction
     */
    select?: AIInteractionSelect<ExtArgs> | null
    /**
     * Filter, which AIInteractions to fetch.
     */
    where?: AIInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIInteractions to fetch.
     */
    orderBy?: AIInteractionOrderByWithRelationInput | AIInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AIInteractions.
     */
    cursor?: AIInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIInteractions.
     */
    skip?: number
    distinct?: AIInteractionScalarFieldEnum | AIInteractionScalarFieldEnum[]
  }

  /**
   * AIInteraction create
   */
  export type AIInteractionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteraction
     */
    select?: AIInteractionSelect<ExtArgs> | null
    /**
     * The data needed to create a AIInteraction.
     */
    data: XOR<AIInteractionCreateInput, AIInteractionUncheckedCreateInput>
  }

  /**
   * AIInteraction createMany
   */
  export type AIInteractionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AIInteractions.
     */
    data: AIInteractionCreateManyInput | AIInteractionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AIInteraction createManyAndReturn
   */
  export type AIInteractionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteraction
     */
    select?: AIInteractionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AIInteractions.
     */
    data: AIInteractionCreateManyInput | AIInteractionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AIInteraction update
   */
  export type AIInteractionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteraction
     */
    select?: AIInteractionSelect<ExtArgs> | null
    /**
     * The data needed to update a AIInteraction.
     */
    data: XOR<AIInteractionUpdateInput, AIInteractionUncheckedUpdateInput>
    /**
     * Choose, which AIInteraction to update.
     */
    where: AIInteractionWhereUniqueInput
  }

  /**
   * AIInteraction updateMany
   */
  export type AIInteractionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AIInteractions.
     */
    data: XOR<AIInteractionUpdateManyMutationInput, AIInteractionUncheckedUpdateManyInput>
    /**
     * Filter which AIInteractions to update
     */
    where?: AIInteractionWhereInput
  }

  /**
   * AIInteraction upsert
   */
  export type AIInteractionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteraction
     */
    select?: AIInteractionSelect<ExtArgs> | null
    /**
     * The filter to search for the AIInteraction to update in case it exists.
     */
    where: AIInteractionWhereUniqueInput
    /**
     * In case the AIInteraction found by the `where` argument doesn't exist, create a new AIInteraction with this data.
     */
    create: XOR<AIInteractionCreateInput, AIInteractionUncheckedCreateInput>
    /**
     * In case the AIInteraction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AIInteractionUpdateInput, AIInteractionUncheckedUpdateInput>
  }

  /**
   * AIInteraction delete
   */
  export type AIInteractionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteraction
     */
    select?: AIInteractionSelect<ExtArgs> | null
    /**
     * Filter which AIInteraction to delete.
     */
    where: AIInteractionWhereUniqueInput
  }

  /**
   * AIInteraction deleteMany
   */
  export type AIInteractionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIInteractions to delete
     */
    where?: AIInteractionWhereInput
  }

  /**
   * AIInteraction without action
   */
  export type AIInteractionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteraction
     */
    select?: AIInteractionSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    avatar: 'avatar',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WishScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    category: 'category',
    isOptimized: 'isOptimized',
    optimizedText: 'optimizedText',
    keywords: 'keywords',
    status: 'status',
    priority: 'priority',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type WishScalarFieldEnum = (typeof WishScalarFieldEnum)[keyof typeof WishScalarFieldEnum]


  export const GoalScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    type: 'type',
    status: 'status',
    priority: 'priority',
    dueDate: 'dueDate',
    completedAt: 'completedAt',
    progress: 'progress',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    specific: 'specific',
    measurable: 'measurable',
    achievable: 'achievable',
    relevant: 'relevant',
    timeBound: 'timeBound',
    wishId: 'wishId',
    userId: 'userId'
  };

  export type GoalScalarFieldEnum = (typeof GoalScalarFieldEnum)[keyof typeof GoalScalarFieldEnum]


  export const CheckInScalarFieldEnum: {
    id: 'id',
    type: 'type',
    content: 'content',
    mediaUrl: 'mediaUrl',
    notes: 'notes',
    mood: 'mood',
    progress: 'progress',
    createdAt: 'createdAt',
    goalId: 'goalId',
    userId: 'userId'
  };

  export type CheckInScalarFieldEnum = (typeof CheckInScalarFieldEnum)[keyof typeof CheckInScalarFieldEnum]


  export const GratitudeScalarFieldEnum: {
    id: 'id',
    content: 'content',
    type: 'type',
    mediaUrl: 'mediaUrl',
    tags: 'tags',
    mood: 'mood',
    aiQuote: 'aiQuote',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type GratitudeScalarFieldEnum = (typeof GratitudeScalarFieldEnum)[keyof typeof GratitudeScalarFieldEnum]


  export const VisionBoardScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    isPublic: 'isPublic',
    layout: 'layout',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type VisionBoardScalarFieldEnum = (typeof VisionBoardScalarFieldEnum)[keyof typeof VisionBoardScalarFieldEnum]


  export const VisionBoardItemScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    content: 'content',
    imageUrl: 'imageUrl',
    positionX: 'positionX',
    positionY: 'positionY',
    width: 'width',
    height: 'height',
    order: 'order',
    createdAt: 'createdAt',
    visionBoardId: 'visionBoardId',
    wishId: 'wishId'
  };

  export type VisionBoardItemScalarFieldEnum = (typeof VisionBoardItemScalarFieldEnum)[keyof typeof VisionBoardItemScalarFieldEnum]


  export const RewardScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    description: 'description',
    content: 'content',
    points: 'points',
    category: 'category',
    isClaimed: 'isClaimed',
    claimedAt: 'claimedAt',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type RewardScalarFieldEnum = (typeof RewardScalarFieldEnum)[keyof typeof RewardScalarFieldEnum]


  export const GrowthPointScalarFieldEnum: {
    id: 'id',
    points: 'points',
    source: 'source',
    sourceId: 'sourceId',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type GrowthPointScalarFieldEnum = (typeof GrowthPointScalarFieldEnum)[keyof typeof GrowthPointScalarFieldEnum]


  export const AIInteractionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    input: 'input',
    output: 'output',
    tokensUsed: 'tokensUsed',
    cost: 'cost',
    createdAt: 'createdAt'
  };

  export type AIInteractionScalarFieldEnum = (typeof AIInteractionScalarFieldEnum)[keyof typeof AIInteractionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    wishes?: WishListRelationFilter
    goals?: GoalListRelationFilter
    gratitudes?: GratitudeListRelationFilter
    checkIns?: CheckInListRelationFilter
    rewards?: RewardListRelationFilter
    growthPoints?: GrowthPointListRelationFilter
    visionBoards?: VisionBoardListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    wishes?: WishOrderByRelationAggregateInput
    goals?: GoalOrderByRelationAggregateInput
    gratitudes?: GratitudeOrderByRelationAggregateInput
    checkIns?: CheckInOrderByRelationAggregateInput
    rewards?: RewardOrderByRelationAggregateInput
    growthPoints?: GrowthPointOrderByRelationAggregateInput
    visionBoards?: VisionBoardOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    wishes?: WishListRelationFilter
    goals?: GoalListRelationFilter
    gratitudes?: GratitudeListRelationFilter
    checkIns?: CheckInListRelationFilter
    rewards?: RewardListRelationFilter
    growthPoints?: GrowthPointListRelationFilter
    visionBoards?: VisionBoardListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type WishWhereInput = {
    AND?: WishWhereInput | WishWhereInput[]
    OR?: WishWhereInput[]
    NOT?: WishWhereInput | WishWhereInput[]
    id?: StringFilter<"Wish"> | string
    title?: StringFilter<"Wish"> | string
    description?: StringNullableFilter<"Wish"> | string | null
    category?: StringFilter<"Wish"> | string
    isOptimized?: BoolFilter<"Wish"> | boolean
    optimizedText?: StringNullableFilter<"Wish"> | string | null
    keywords?: StringNullableListFilter<"Wish">
    status?: StringFilter<"Wish"> | string
    priority?: StringFilter<"Wish"> | string
    createdAt?: DateTimeFilter<"Wish"> | Date | string
    updatedAt?: DateTimeFilter<"Wish"> | Date | string
    userId?: StringFilter<"Wish"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    goals?: GoalListRelationFilter
    visionBoardItems?: VisionBoardItemListRelationFilter
  }

  export type WishOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    isOptimized?: SortOrder
    optimizedText?: SortOrderInput | SortOrder
    keywords?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    goals?: GoalOrderByRelationAggregateInput
    visionBoardItems?: VisionBoardItemOrderByRelationAggregateInput
  }

  export type WishWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WishWhereInput | WishWhereInput[]
    OR?: WishWhereInput[]
    NOT?: WishWhereInput | WishWhereInput[]
    title?: StringFilter<"Wish"> | string
    description?: StringNullableFilter<"Wish"> | string | null
    category?: StringFilter<"Wish"> | string
    isOptimized?: BoolFilter<"Wish"> | boolean
    optimizedText?: StringNullableFilter<"Wish"> | string | null
    keywords?: StringNullableListFilter<"Wish">
    status?: StringFilter<"Wish"> | string
    priority?: StringFilter<"Wish"> | string
    createdAt?: DateTimeFilter<"Wish"> | Date | string
    updatedAt?: DateTimeFilter<"Wish"> | Date | string
    userId?: StringFilter<"Wish"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    goals?: GoalListRelationFilter
    visionBoardItems?: VisionBoardItemListRelationFilter
  }, "id">

  export type WishOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    isOptimized?: SortOrder
    optimizedText?: SortOrderInput | SortOrder
    keywords?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: WishCountOrderByAggregateInput
    _max?: WishMaxOrderByAggregateInput
    _min?: WishMinOrderByAggregateInput
  }

  export type WishScalarWhereWithAggregatesInput = {
    AND?: WishScalarWhereWithAggregatesInput | WishScalarWhereWithAggregatesInput[]
    OR?: WishScalarWhereWithAggregatesInput[]
    NOT?: WishScalarWhereWithAggregatesInput | WishScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Wish"> | string
    title?: StringWithAggregatesFilter<"Wish"> | string
    description?: StringNullableWithAggregatesFilter<"Wish"> | string | null
    category?: StringWithAggregatesFilter<"Wish"> | string
    isOptimized?: BoolWithAggregatesFilter<"Wish"> | boolean
    optimizedText?: StringNullableWithAggregatesFilter<"Wish"> | string | null
    keywords?: StringNullableListFilter<"Wish">
    status?: StringWithAggregatesFilter<"Wish"> | string
    priority?: StringWithAggregatesFilter<"Wish"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Wish"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Wish"> | Date | string
    userId?: StringWithAggregatesFilter<"Wish"> | string
  }

  export type GoalWhereInput = {
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    id?: StringFilter<"Goal"> | string
    title?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    type?: StringFilter<"Goal"> | string
    status?: StringFilter<"Goal"> | string
    priority?: StringFilter<"Goal"> | string
    dueDate?: DateTimeNullableFilter<"Goal"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Goal"> | Date | string | null
    progress?: IntFilter<"Goal"> | number
    order?: IntFilter<"Goal"> | number
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    specific?: StringNullableFilter<"Goal"> | string | null
    measurable?: StringNullableFilter<"Goal"> | string | null
    achievable?: StringNullableFilter<"Goal"> | string | null
    relevant?: StringNullableFilter<"Goal"> | string | null
    timeBound?: StringNullableFilter<"Goal"> | string | null
    wishId?: StringFilter<"Goal"> | string
    userId?: StringFilter<"Goal"> | string
    wish?: XOR<WishRelationFilter, WishWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    checkIns?: CheckInListRelationFilter
  }

  export type GoalOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    progress?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    specific?: SortOrderInput | SortOrder
    measurable?: SortOrderInput | SortOrder
    achievable?: SortOrderInput | SortOrder
    relevant?: SortOrderInput | SortOrder
    timeBound?: SortOrderInput | SortOrder
    wishId?: SortOrder
    userId?: SortOrder
    wish?: WishOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    checkIns?: CheckInOrderByRelationAggregateInput
  }

  export type GoalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    title?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    type?: StringFilter<"Goal"> | string
    status?: StringFilter<"Goal"> | string
    priority?: StringFilter<"Goal"> | string
    dueDate?: DateTimeNullableFilter<"Goal"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Goal"> | Date | string | null
    progress?: IntFilter<"Goal"> | number
    order?: IntFilter<"Goal"> | number
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    specific?: StringNullableFilter<"Goal"> | string | null
    measurable?: StringNullableFilter<"Goal"> | string | null
    achievable?: StringNullableFilter<"Goal"> | string | null
    relevant?: StringNullableFilter<"Goal"> | string | null
    timeBound?: StringNullableFilter<"Goal"> | string | null
    wishId?: StringFilter<"Goal"> | string
    userId?: StringFilter<"Goal"> | string
    wish?: XOR<WishRelationFilter, WishWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    checkIns?: CheckInListRelationFilter
  }, "id">

  export type GoalOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    progress?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    specific?: SortOrderInput | SortOrder
    measurable?: SortOrderInput | SortOrder
    achievable?: SortOrderInput | SortOrder
    relevant?: SortOrderInput | SortOrder
    timeBound?: SortOrderInput | SortOrder
    wishId?: SortOrder
    userId?: SortOrder
    _count?: GoalCountOrderByAggregateInput
    _avg?: GoalAvgOrderByAggregateInput
    _max?: GoalMaxOrderByAggregateInput
    _min?: GoalMinOrderByAggregateInput
    _sum?: GoalSumOrderByAggregateInput
  }

  export type GoalScalarWhereWithAggregatesInput = {
    AND?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    OR?: GoalScalarWhereWithAggregatesInput[]
    NOT?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Goal"> | string
    title?: StringWithAggregatesFilter<"Goal"> | string
    description?: StringNullableWithAggregatesFilter<"Goal"> | string | null
    type?: StringWithAggregatesFilter<"Goal"> | string
    status?: StringWithAggregatesFilter<"Goal"> | string
    priority?: StringWithAggregatesFilter<"Goal"> | string
    dueDate?: DateTimeNullableWithAggregatesFilter<"Goal"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"Goal"> | Date | string | null
    progress?: IntWithAggregatesFilter<"Goal"> | number
    order?: IntWithAggregatesFilter<"Goal"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    specific?: StringNullableWithAggregatesFilter<"Goal"> | string | null
    measurable?: StringNullableWithAggregatesFilter<"Goal"> | string | null
    achievable?: StringNullableWithAggregatesFilter<"Goal"> | string | null
    relevant?: StringNullableWithAggregatesFilter<"Goal"> | string | null
    timeBound?: StringNullableWithAggregatesFilter<"Goal"> | string | null
    wishId?: StringWithAggregatesFilter<"Goal"> | string
    userId?: StringWithAggregatesFilter<"Goal"> | string
  }

  export type CheckInWhereInput = {
    AND?: CheckInWhereInput | CheckInWhereInput[]
    OR?: CheckInWhereInput[]
    NOT?: CheckInWhereInput | CheckInWhereInput[]
    id?: StringFilter<"CheckIn"> | string
    type?: StringFilter<"CheckIn"> | string
    content?: StringFilter<"CheckIn"> | string
    mediaUrl?: StringNullableFilter<"CheckIn"> | string | null
    notes?: StringNullableFilter<"CheckIn"> | string | null
    mood?: StringNullableFilter<"CheckIn"> | string | null
    progress?: IntFilter<"CheckIn"> | number
    createdAt?: DateTimeFilter<"CheckIn"> | Date | string
    goalId?: StringFilter<"CheckIn"> | string
    userId?: StringFilter<"CheckIn"> | string
    goal?: XOR<GoalRelationFilter, GoalWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CheckInOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    mood?: SortOrderInput | SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    goal?: GoalOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CheckInWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CheckInWhereInput | CheckInWhereInput[]
    OR?: CheckInWhereInput[]
    NOT?: CheckInWhereInput | CheckInWhereInput[]
    type?: StringFilter<"CheckIn"> | string
    content?: StringFilter<"CheckIn"> | string
    mediaUrl?: StringNullableFilter<"CheckIn"> | string | null
    notes?: StringNullableFilter<"CheckIn"> | string | null
    mood?: StringNullableFilter<"CheckIn"> | string | null
    progress?: IntFilter<"CheckIn"> | number
    createdAt?: DateTimeFilter<"CheckIn"> | Date | string
    goalId?: StringFilter<"CheckIn"> | string
    userId?: StringFilter<"CheckIn"> | string
    goal?: XOR<GoalRelationFilter, GoalWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CheckInOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    mood?: SortOrderInput | SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    _count?: CheckInCountOrderByAggregateInput
    _avg?: CheckInAvgOrderByAggregateInput
    _max?: CheckInMaxOrderByAggregateInput
    _min?: CheckInMinOrderByAggregateInput
    _sum?: CheckInSumOrderByAggregateInput
  }

  export type CheckInScalarWhereWithAggregatesInput = {
    AND?: CheckInScalarWhereWithAggregatesInput | CheckInScalarWhereWithAggregatesInput[]
    OR?: CheckInScalarWhereWithAggregatesInput[]
    NOT?: CheckInScalarWhereWithAggregatesInput | CheckInScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CheckIn"> | string
    type?: StringWithAggregatesFilter<"CheckIn"> | string
    content?: StringWithAggregatesFilter<"CheckIn"> | string
    mediaUrl?: StringNullableWithAggregatesFilter<"CheckIn"> | string | null
    notes?: StringNullableWithAggregatesFilter<"CheckIn"> | string | null
    mood?: StringNullableWithAggregatesFilter<"CheckIn"> | string | null
    progress?: IntWithAggregatesFilter<"CheckIn"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CheckIn"> | Date | string
    goalId?: StringWithAggregatesFilter<"CheckIn"> | string
    userId?: StringWithAggregatesFilter<"CheckIn"> | string
  }

  export type GratitudeWhereInput = {
    AND?: GratitudeWhereInput | GratitudeWhereInput[]
    OR?: GratitudeWhereInput[]
    NOT?: GratitudeWhereInput | GratitudeWhereInput[]
    id?: StringFilter<"Gratitude"> | string
    content?: StringFilter<"Gratitude"> | string
    type?: StringFilter<"Gratitude"> | string
    mediaUrl?: StringNullableFilter<"Gratitude"> | string | null
    tags?: StringNullableListFilter<"Gratitude">
    mood?: StringNullableFilter<"Gratitude"> | string | null
    aiQuote?: StringNullableFilter<"Gratitude"> | string | null
    createdAt?: DateTimeFilter<"Gratitude"> | Date | string
    userId?: StringFilter<"Gratitude"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GratitudeOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    type?: SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    tags?: SortOrder
    mood?: SortOrderInput | SortOrder
    aiQuote?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type GratitudeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GratitudeWhereInput | GratitudeWhereInput[]
    OR?: GratitudeWhereInput[]
    NOT?: GratitudeWhereInput | GratitudeWhereInput[]
    content?: StringFilter<"Gratitude"> | string
    type?: StringFilter<"Gratitude"> | string
    mediaUrl?: StringNullableFilter<"Gratitude"> | string | null
    tags?: StringNullableListFilter<"Gratitude">
    mood?: StringNullableFilter<"Gratitude"> | string | null
    aiQuote?: StringNullableFilter<"Gratitude"> | string | null
    createdAt?: DateTimeFilter<"Gratitude"> | Date | string
    userId?: StringFilter<"Gratitude"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type GratitudeOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    type?: SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    tags?: SortOrder
    mood?: SortOrderInput | SortOrder
    aiQuote?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: GratitudeCountOrderByAggregateInput
    _max?: GratitudeMaxOrderByAggregateInput
    _min?: GratitudeMinOrderByAggregateInput
  }

  export type GratitudeScalarWhereWithAggregatesInput = {
    AND?: GratitudeScalarWhereWithAggregatesInput | GratitudeScalarWhereWithAggregatesInput[]
    OR?: GratitudeScalarWhereWithAggregatesInput[]
    NOT?: GratitudeScalarWhereWithAggregatesInput | GratitudeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Gratitude"> | string
    content?: StringWithAggregatesFilter<"Gratitude"> | string
    type?: StringWithAggregatesFilter<"Gratitude"> | string
    mediaUrl?: StringNullableWithAggregatesFilter<"Gratitude"> | string | null
    tags?: StringNullableListFilter<"Gratitude">
    mood?: StringNullableWithAggregatesFilter<"Gratitude"> | string | null
    aiQuote?: StringNullableWithAggregatesFilter<"Gratitude"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Gratitude"> | Date | string
    userId?: StringWithAggregatesFilter<"Gratitude"> | string
  }

  export type VisionBoardWhereInput = {
    AND?: VisionBoardWhereInput | VisionBoardWhereInput[]
    OR?: VisionBoardWhereInput[]
    NOT?: VisionBoardWhereInput | VisionBoardWhereInput[]
    id?: StringFilter<"VisionBoard"> | string
    title?: StringFilter<"VisionBoard"> | string
    description?: StringNullableFilter<"VisionBoard"> | string | null
    isPublic?: BoolFilter<"VisionBoard"> | boolean
    layout?: StringFilter<"VisionBoard"> | string
    createdAt?: DateTimeFilter<"VisionBoard"> | Date | string
    updatedAt?: DateTimeFilter<"VisionBoard"> | Date | string
    userId?: StringFilter<"VisionBoard"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    items?: VisionBoardItemListRelationFilter
  }

  export type VisionBoardOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    layout?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    items?: VisionBoardItemOrderByRelationAggregateInput
  }

  export type VisionBoardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VisionBoardWhereInput | VisionBoardWhereInput[]
    OR?: VisionBoardWhereInput[]
    NOT?: VisionBoardWhereInput | VisionBoardWhereInput[]
    title?: StringFilter<"VisionBoard"> | string
    description?: StringNullableFilter<"VisionBoard"> | string | null
    isPublic?: BoolFilter<"VisionBoard"> | boolean
    layout?: StringFilter<"VisionBoard"> | string
    createdAt?: DateTimeFilter<"VisionBoard"> | Date | string
    updatedAt?: DateTimeFilter<"VisionBoard"> | Date | string
    userId?: StringFilter<"VisionBoard"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    items?: VisionBoardItemListRelationFilter
  }, "id">

  export type VisionBoardOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    layout?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: VisionBoardCountOrderByAggregateInput
    _max?: VisionBoardMaxOrderByAggregateInput
    _min?: VisionBoardMinOrderByAggregateInput
  }

  export type VisionBoardScalarWhereWithAggregatesInput = {
    AND?: VisionBoardScalarWhereWithAggregatesInput | VisionBoardScalarWhereWithAggregatesInput[]
    OR?: VisionBoardScalarWhereWithAggregatesInput[]
    NOT?: VisionBoardScalarWhereWithAggregatesInput | VisionBoardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VisionBoard"> | string
    title?: StringWithAggregatesFilter<"VisionBoard"> | string
    description?: StringNullableWithAggregatesFilter<"VisionBoard"> | string | null
    isPublic?: BoolWithAggregatesFilter<"VisionBoard"> | boolean
    layout?: StringWithAggregatesFilter<"VisionBoard"> | string
    createdAt?: DateTimeWithAggregatesFilter<"VisionBoard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VisionBoard"> | Date | string
    userId?: StringWithAggregatesFilter<"VisionBoard"> | string
  }

  export type VisionBoardItemWhereInput = {
    AND?: VisionBoardItemWhereInput | VisionBoardItemWhereInput[]
    OR?: VisionBoardItemWhereInput[]
    NOT?: VisionBoardItemWhereInput | VisionBoardItemWhereInput[]
    id?: StringFilter<"VisionBoardItem"> | string
    type?: StringFilter<"VisionBoardItem"> | string
    title?: StringNullableFilter<"VisionBoardItem"> | string | null
    content?: StringFilter<"VisionBoardItem"> | string
    imageUrl?: StringNullableFilter<"VisionBoardItem"> | string | null
    positionX?: IntFilter<"VisionBoardItem"> | number
    positionY?: IntFilter<"VisionBoardItem"> | number
    width?: IntFilter<"VisionBoardItem"> | number
    height?: IntFilter<"VisionBoardItem"> | number
    order?: IntFilter<"VisionBoardItem"> | number
    createdAt?: DateTimeFilter<"VisionBoardItem"> | Date | string
    visionBoardId?: StringFilter<"VisionBoardItem"> | string
    wishId?: StringNullableFilter<"VisionBoardItem"> | string | null
    visionBoard?: XOR<VisionBoardRelationFilter, VisionBoardWhereInput>
    wish?: XOR<WishNullableRelationFilter, WishWhereInput> | null
  }

  export type VisionBoardItemOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrderInput | SortOrder
    content?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    positionX?: SortOrder
    positionY?: SortOrder
    width?: SortOrder
    height?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    visionBoardId?: SortOrder
    wishId?: SortOrderInput | SortOrder
    visionBoard?: VisionBoardOrderByWithRelationInput
    wish?: WishOrderByWithRelationInput
  }

  export type VisionBoardItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VisionBoardItemWhereInput | VisionBoardItemWhereInput[]
    OR?: VisionBoardItemWhereInput[]
    NOT?: VisionBoardItemWhereInput | VisionBoardItemWhereInput[]
    type?: StringFilter<"VisionBoardItem"> | string
    title?: StringNullableFilter<"VisionBoardItem"> | string | null
    content?: StringFilter<"VisionBoardItem"> | string
    imageUrl?: StringNullableFilter<"VisionBoardItem"> | string | null
    positionX?: IntFilter<"VisionBoardItem"> | number
    positionY?: IntFilter<"VisionBoardItem"> | number
    width?: IntFilter<"VisionBoardItem"> | number
    height?: IntFilter<"VisionBoardItem"> | number
    order?: IntFilter<"VisionBoardItem"> | number
    createdAt?: DateTimeFilter<"VisionBoardItem"> | Date | string
    visionBoardId?: StringFilter<"VisionBoardItem"> | string
    wishId?: StringNullableFilter<"VisionBoardItem"> | string | null
    visionBoard?: XOR<VisionBoardRelationFilter, VisionBoardWhereInput>
    wish?: XOR<WishNullableRelationFilter, WishWhereInput> | null
  }, "id">

  export type VisionBoardItemOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrderInput | SortOrder
    content?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    positionX?: SortOrder
    positionY?: SortOrder
    width?: SortOrder
    height?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    visionBoardId?: SortOrder
    wishId?: SortOrderInput | SortOrder
    _count?: VisionBoardItemCountOrderByAggregateInput
    _avg?: VisionBoardItemAvgOrderByAggregateInput
    _max?: VisionBoardItemMaxOrderByAggregateInput
    _min?: VisionBoardItemMinOrderByAggregateInput
    _sum?: VisionBoardItemSumOrderByAggregateInput
  }

  export type VisionBoardItemScalarWhereWithAggregatesInput = {
    AND?: VisionBoardItemScalarWhereWithAggregatesInput | VisionBoardItemScalarWhereWithAggregatesInput[]
    OR?: VisionBoardItemScalarWhereWithAggregatesInput[]
    NOT?: VisionBoardItemScalarWhereWithAggregatesInput | VisionBoardItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VisionBoardItem"> | string
    type?: StringWithAggregatesFilter<"VisionBoardItem"> | string
    title?: StringNullableWithAggregatesFilter<"VisionBoardItem"> | string | null
    content?: StringWithAggregatesFilter<"VisionBoardItem"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"VisionBoardItem"> | string | null
    positionX?: IntWithAggregatesFilter<"VisionBoardItem"> | number
    positionY?: IntWithAggregatesFilter<"VisionBoardItem"> | number
    width?: IntWithAggregatesFilter<"VisionBoardItem"> | number
    height?: IntWithAggregatesFilter<"VisionBoardItem"> | number
    order?: IntWithAggregatesFilter<"VisionBoardItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"VisionBoardItem"> | Date | string
    visionBoardId?: StringWithAggregatesFilter<"VisionBoardItem"> | string
    wishId?: StringNullableWithAggregatesFilter<"VisionBoardItem"> | string | null
  }

  export type RewardWhereInput = {
    AND?: RewardWhereInput | RewardWhereInput[]
    OR?: RewardWhereInput[]
    NOT?: RewardWhereInput | RewardWhereInput[]
    id?: StringFilter<"Reward"> | string
    type?: StringFilter<"Reward"> | string
    title?: StringFilter<"Reward"> | string
    description?: StringFilter<"Reward"> | string
    content?: StringNullableFilter<"Reward"> | string | null
    points?: IntFilter<"Reward"> | number
    category?: StringFilter<"Reward"> | string
    isClaimed?: BoolFilter<"Reward"> | boolean
    claimedAt?: DateTimeNullableFilter<"Reward"> | Date | string | null
    createdAt?: DateTimeFilter<"Reward"> | Date | string
    userId?: StringFilter<"Reward"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RewardOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrderInput | SortOrder
    points?: SortOrder
    category?: SortOrder
    isClaimed?: SortOrder
    claimedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RewardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RewardWhereInput | RewardWhereInput[]
    OR?: RewardWhereInput[]
    NOT?: RewardWhereInput | RewardWhereInput[]
    type?: StringFilter<"Reward"> | string
    title?: StringFilter<"Reward"> | string
    description?: StringFilter<"Reward"> | string
    content?: StringNullableFilter<"Reward"> | string | null
    points?: IntFilter<"Reward"> | number
    category?: StringFilter<"Reward"> | string
    isClaimed?: BoolFilter<"Reward"> | boolean
    claimedAt?: DateTimeNullableFilter<"Reward"> | Date | string | null
    createdAt?: DateTimeFilter<"Reward"> | Date | string
    userId?: StringFilter<"Reward"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type RewardOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrderInput | SortOrder
    points?: SortOrder
    category?: SortOrder
    isClaimed?: SortOrder
    claimedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: RewardCountOrderByAggregateInput
    _avg?: RewardAvgOrderByAggregateInput
    _max?: RewardMaxOrderByAggregateInput
    _min?: RewardMinOrderByAggregateInput
    _sum?: RewardSumOrderByAggregateInput
  }

  export type RewardScalarWhereWithAggregatesInput = {
    AND?: RewardScalarWhereWithAggregatesInput | RewardScalarWhereWithAggregatesInput[]
    OR?: RewardScalarWhereWithAggregatesInput[]
    NOT?: RewardScalarWhereWithAggregatesInput | RewardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Reward"> | string
    type?: StringWithAggregatesFilter<"Reward"> | string
    title?: StringWithAggregatesFilter<"Reward"> | string
    description?: StringWithAggregatesFilter<"Reward"> | string
    content?: StringNullableWithAggregatesFilter<"Reward"> | string | null
    points?: IntWithAggregatesFilter<"Reward"> | number
    category?: StringWithAggregatesFilter<"Reward"> | string
    isClaimed?: BoolWithAggregatesFilter<"Reward"> | boolean
    claimedAt?: DateTimeNullableWithAggregatesFilter<"Reward"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Reward"> | Date | string
    userId?: StringWithAggregatesFilter<"Reward"> | string
  }

  export type GrowthPointWhereInput = {
    AND?: GrowthPointWhereInput | GrowthPointWhereInput[]
    OR?: GrowthPointWhereInput[]
    NOT?: GrowthPointWhereInput | GrowthPointWhereInput[]
    id?: StringFilter<"GrowthPoint"> | string
    points?: IntFilter<"GrowthPoint"> | number
    source?: StringFilter<"GrowthPoint"> | string
    sourceId?: StringNullableFilter<"GrowthPoint"> | string | null
    createdAt?: DateTimeFilter<"GrowthPoint"> | Date | string
    userId?: StringFilter<"GrowthPoint"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GrowthPointOrderByWithRelationInput = {
    id?: SortOrder
    points?: SortOrder
    source?: SortOrder
    sourceId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type GrowthPointWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GrowthPointWhereInput | GrowthPointWhereInput[]
    OR?: GrowthPointWhereInput[]
    NOT?: GrowthPointWhereInput | GrowthPointWhereInput[]
    points?: IntFilter<"GrowthPoint"> | number
    source?: StringFilter<"GrowthPoint"> | string
    sourceId?: StringNullableFilter<"GrowthPoint"> | string | null
    createdAt?: DateTimeFilter<"GrowthPoint"> | Date | string
    userId?: StringFilter<"GrowthPoint"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type GrowthPointOrderByWithAggregationInput = {
    id?: SortOrder
    points?: SortOrder
    source?: SortOrder
    sourceId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: GrowthPointCountOrderByAggregateInput
    _avg?: GrowthPointAvgOrderByAggregateInput
    _max?: GrowthPointMaxOrderByAggregateInput
    _min?: GrowthPointMinOrderByAggregateInput
    _sum?: GrowthPointSumOrderByAggregateInput
  }

  export type GrowthPointScalarWhereWithAggregatesInput = {
    AND?: GrowthPointScalarWhereWithAggregatesInput | GrowthPointScalarWhereWithAggregatesInput[]
    OR?: GrowthPointScalarWhereWithAggregatesInput[]
    NOT?: GrowthPointScalarWhereWithAggregatesInput | GrowthPointScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GrowthPoint"> | string
    points?: IntWithAggregatesFilter<"GrowthPoint"> | number
    source?: StringWithAggregatesFilter<"GrowthPoint"> | string
    sourceId?: StringNullableWithAggregatesFilter<"GrowthPoint"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"GrowthPoint"> | Date | string
    userId?: StringWithAggregatesFilter<"GrowthPoint"> | string
  }

  export type AIInteractionWhereInput = {
    AND?: AIInteractionWhereInput | AIInteractionWhereInput[]
    OR?: AIInteractionWhereInput[]
    NOT?: AIInteractionWhereInput | AIInteractionWhereInput[]
    id?: StringFilter<"AIInteraction"> | string
    type?: StringFilter<"AIInteraction"> | string
    input?: StringFilter<"AIInteraction"> | string
    output?: StringFilter<"AIInteraction"> | string
    tokensUsed?: IntNullableFilter<"AIInteraction"> | number | null
    cost?: FloatNullableFilter<"AIInteraction"> | number | null
    createdAt?: DateTimeFilter<"AIInteraction"> | Date | string
  }

  export type AIInteractionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    input?: SortOrder
    output?: SortOrder
    tokensUsed?: SortOrderInput | SortOrder
    cost?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type AIInteractionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AIInteractionWhereInput | AIInteractionWhereInput[]
    OR?: AIInteractionWhereInput[]
    NOT?: AIInteractionWhereInput | AIInteractionWhereInput[]
    type?: StringFilter<"AIInteraction"> | string
    input?: StringFilter<"AIInteraction"> | string
    output?: StringFilter<"AIInteraction"> | string
    tokensUsed?: IntNullableFilter<"AIInteraction"> | number | null
    cost?: FloatNullableFilter<"AIInteraction"> | number | null
    createdAt?: DateTimeFilter<"AIInteraction"> | Date | string
  }, "id">

  export type AIInteractionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    input?: SortOrder
    output?: SortOrder
    tokensUsed?: SortOrderInput | SortOrder
    cost?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AIInteractionCountOrderByAggregateInput
    _avg?: AIInteractionAvgOrderByAggregateInput
    _max?: AIInteractionMaxOrderByAggregateInput
    _min?: AIInteractionMinOrderByAggregateInput
    _sum?: AIInteractionSumOrderByAggregateInput
  }

  export type AIInteractionScalarWhereWithAggregatesInput = {
    AND?: AIInteractionScalarWhereWithAggregatesInput | AIInteractionScalarWhereWithAggregatesInput[]
    OR?: AIInteractionScalarWhereWithAggregatesInput[]
    NOT?: AIInteractionScalarWhereWithAggregatesInput | AIInteractionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AIInteraction"> | string
    type?: StringWithAggregatesFilter<"AIInteraction"> | string
    input?: StringWithAggregatesFilter<"AIInteraction"> | string
    output?: StringWithAggregatesFilter<"AIInteraction"> | string
    tokensUsed?: IntNullableWithAggregatesFilter<"AIInteraction"> | number | null
    cost?: FloatNullableWithAggregatesFilter<"AIInteraction"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"AIInteraction"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wishes?: WishCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    gratitudes?: GratitudeCreateNestedManyWithoutUserInput
    checkIns?: CheckInCreateNestedManyWithoutUserInput
    rewards?: RewardCreateNestedManyWithoutUserInput
    growthPoints?: GrowthPointCreateNestedManyWithoutUserInput
    visionBoards?: VisionBoardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wishes?: WishUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    gratitudes?: GratitudeUncheckedCreateNestedManyWithoutUserInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutUserInput
    rewards?: RewardUncheckedCreateNestedManyWithoutUserInput
    growthPoints?: GrowthPointUncheckedCreateNestedManyWithoutUserInput
    visionBoards?: VisionBoardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishes?: WishUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    gratitudes?: GratitudeUpdateManyWithoutUserNestedInput
    checkIns?: CheckInUpdateManyWithoutUserNestedInput
    rewards?: RewardUpdateManyWithoutUserNestedInput
    growthPoints?: GrowthPointUpdateManyWithoutUserNestedInput
    visionBoards?: VisionBoardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishes?: WishUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    gratitudes?: GratitudeUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutUserNestedInput
    rewards?: RewardUncheckedUpdateManyWithoutUserNestedInput
    growthPoints?: GrowthPointUncheckedUpdateManyWithoutUserNestedInput
    visionBoards?: VisionBoardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishCreateInput = {
    id?: string
    title: string
    description?: string | null
    category: string
    isOptimized?: boolean
    optimizedText?: string | null
    keywords?: WishCreatekeywordsInput | string[]
    status?: string
    priority?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWishesInput
    goals?: GoalCreateNestedManyWithoutWishInput
    visionBoardItems?: VisionBoardItemCreateNestedManyWithoutWishInput
  }

  export type WishUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    category: string
    isOptimized?: boolean
    optimizedText?: string | null
    keywords?: WishCreatekeywordsInput | string[]
    status?: string
    priority?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    goals?: GoalUncheckedCreateNestedManyWithoutWishInput
    visionBoardItems?: VisionBoardItemUncheckedCreateNestedManyWithoutWishInput
  }

  export type WishUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isOptimized?: BoolFieldUpdateOperationsInput | boolean
    optimizedText?: NullableStringFieldUpdateOperationsInput | string | null
    keywords?: WishUpdatekeywordsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWishesNestedInput
    goals?: GoalUpdateManyWithoutWishNestedInput
    visionBoardItems?: VisionBoardItemUpdateManyWithoutWishNestedInput
  }

  export type WishUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isOptimized?: BoolFieldUpdateOperationsInput | boolean
    optimizedText?: NullableStringFieldUpdateOperationsInput | string | null
    keywords?: WishUpdatekeywordsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    goals?: GoalUncheckedUpdateManyWithoutWishNestedInput
    visionBoardItems?: VisionBoardItemUncheckedUpdateManyWithoutWishNestedInput
  }

  export type WishCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    category: string
    isOptimized?: boolean
    optimizedText?: string | null
    keywords?: WishCreatekeywordsInput | string[]
    status?: string
    priority?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type WishUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isOptimized?: BoolFieldUpdateOperationsInput | boolean
    optimizedText?: NullableStringFieldUpdateOperationsInput | string | null
    keywords?: WishUpdatekeywordsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isOptimized?: BoolFieldUpdateOperationsInput | boolean
    optimizedText?: NullableStringFieldUpdateOperationsInput | string | null
    keywords?: WishUpdatekeywordsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type GoalCreateInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    status?: string
    priority?: string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    progress?: number
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    specific?: string | null
    measurable?: string | null
    achievable?: string | null
    relevant?: string | null
    timeBound?: string | null
    wish: WishCreateNestedOneWithoutGoalsInput
    user: UserCreateNestedOneWithoutGoalsInput
    checkIns?: CheckInCreateNestedManyWithoutGoalInput
  }

  export type GoalUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    status?: string
    priority?: string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    progress?: number
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    specific?: string | null
    measurable?: string | null
    achievable?: string | null
    relevant?: string | null
    timeBound?: string | null
    wishId: string
    userId: string
    checkIns?: CheckInUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specific?: NullableStringFieldUpdateOperationsInput | string | null
    measurable?: NullableStringFieldUpdateOperationsInput | string | null
    achievable?: NullableStringFieldUpdateOperationsInput | string | null
    relevant?: NullableStringFieldUpdateOperationsInput | string | null
    timeBound?: NullableStringFieldUpdateOperationsInput | string | null
    wish?: WishUpdateOneRequiredWithoutGoalsNestedInput
    user?: UserUpdateOneRequiredWithoutGoalsNestedInput
    checkIns?: CheckInUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specific?: NullableStringFieldUpdateOperationsInput | string | null
    measurable?: NullableStringFieldUpdateOperationsInput | string | null
    achievable?: NullableStringFieldUpdateOperationsInput | string | null
    relevant?: NullableStringFieldUpdateOperationsInput | string | null
    timeBound?: NullableStringFieldUpdateOperationsInput | string | null
    wishId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    checkIns?: CheckInUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type GoalCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    status?: string
    priority?: string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    progress?: number
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    specific?: string | null
    measurable?: string | null
    achievable?: string | null
    relevant?: string | null
    timeBound?: string | null
    wishId: string
    userId: string
  }

  export type GoalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specific?: NullableStringFieldUpdateOperationsInput | string | null
    measurable?: NullableStringFieldUpdateOperationsInput | string | null
    achievable?: NullableStringFieldUpdateOperationsInput | string | null
    relevant?: NullableStringFieldUpdateOperationsInput | string | null
    timeBound?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specific?: NullableStringFieldUpdateOperationsInput | string | null
    measurable?: NullableStringFieldUpdateOperationsInput | string | null
    achievable?: NullableStringFieldUpdateOperationsInput | string | null
    relevant?: NullableStringFieldUpdateOperationsInput | string | null
    timeBound?: NullableStringFieldUpdateOperationsInput | string | null
    wishId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CheckInCreateInput = {
    id?: string
    type: string
    content: string
    mediaUrl?: string | null
    notes?: string | null
    mood?: string | null
    progress?: number
    createdAt?: Date | string
    goal: GoalCreateNestedOneWithoutCheckInsInput
    user: UserCreateNestedOneWithoutCheckInsInput
  }

  export type CheckInUncheckedCreateInput = {
    id?: string
    type: string
    content: string
    mediaUrl?: string | null
    notes?: string | null
    mood?: string | null
    progress?: number
    createdAt?: Date | string
    goalId: string
    userId: string
  }

  export type CheckInUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneRequiredWithoutCheckInsNestedInput
    user?: UserUpdateOneRequiredWithoutCheckInsNestedInput
  }

  export type CheckInUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goalId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CheckInCreateManyInput = {
    id?: string
    type: string
    content: string
    mediaUrl?: string | null
    notes?: string | null
    mood?: string | null
    progress?: number
    createdAt?: Date | string
    goalId: string
    userId: string
  }

  export type CheckInUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckInUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goalId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type GratitudeCreateInput = {
    id?: string
    content: string
    type?: string
    mediaUrl?: string | null
    tags?: GratitudeCreatetagsInput | string[]
    mood?: string | null
    aiQuote?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutGratitudesInput
  }

  export type GratitudeUncheckedCreateInput = {
    id?: string
    content: string
    type?: string
    mediaUrl?: string | null
    tags?: GratitudeCreatetagsInput | string[]
    mood?: string | null
    aiQuote?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type GratitudeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: GratitudeUpdatetagsInput | string[]
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    aiQuote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGratitudesNestedInput
  }

  export type GratitudeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: GratitudeUpdatetagsInput | string[]
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    aiQuote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type GratitudeCreateManyInput = {
    id?: string
    content: string
    type?: string
    mediaUrl?: string | null
    tags?: GratitudeCreatetagsInput | string[]
    mood?: string | null
    aiQuote?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type GratitudeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: GratitudeUpdatetagsInput | string[]
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    aiQuote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GratitudeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: GratitudeUpdatetagsInput | string[]
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    aiQuote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type VisionBoardCreateInput = {
    id?: string
    title: string
    description?: string | null
    isPublic?: boolean
    layout: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutVisionBoardsInput
    items?: VisionBoardItemCreateNestedManyWithoutVisionBoardInput
  }

  export type VisionBoardUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    isPublic?: boolean
    layout: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    items?: VisionBoardItemUncheckedCreateNestedManyWithoutVisionBoardInput
  }

  export type VisionBoardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    layout?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVisionBoardsNestedInput
    items?: VisionBoardItemUpdateManyWithoutVisionBoardNestedInput
  }

  export type VisionBoardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    layout?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    items?: VisionBoardItemUncheckedUpdateManyWithoutVisionBoardNestedInput
  }

  export type VisionBoardCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    isPublic?: boolean
    layout: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type VisionBoardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    layout?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisionBoardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    layout?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type VisionBoardItemCreateInput = {
    id?: string
    type: string
    title?: string | null
    content: string
    imageUrl?: string | null
    positionX?: number
    positionY?: number
    width?: number
    height?: number
    order: number
    createdAt?: Date | string
    visionBoard: VisionBoardCreateNestedOneWithoutItemsInput
    wish?: WishCreateNestedOneWithoutVisionBoardItemsInput
  }

  export type VisionBoardItemUncheckedCreateInput = {
    id?: string
    type: string
    title?: string | null
    content: string
    imageUrl?: string | null
    positionX?: number
    positionY?: number
    width?: number
    height?: number
    order: number
    createdAt?: Date | string
    visionBoardId: string
    wishId?: string | null
  }

  export type VisionBoardItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visionBoard?: VisionBoardUpdateOneRequiredWithoutItemsNestedInput
    wish?: WishUpdateOneWithoutVisionBoardItemsNestedInput
  }

  export type VisionBoardItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visionBoardId?: StringFieldUpdateOperationsInput | string
    wishId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VisionBoardItemCreateManyInput = {
    id?: string
    type: string
    title?: string | null
    content: string
    imageUrl?: string | null
    positionX?: number
    positionY?: number
    width?: number
    height?: number
    order: number
    createdAt?: Date | string
    visionBoardId: string
    wishId?: string | null
  }

  export type VisionBoardItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisionBoardItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visionBoardId?: StringFieldUpdateOperationsInput | string
    wishId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RewardCreateInput = {
    id?: string
    type: string
    title: string
    description: string
    content?: string | null
    points?: number
    category: string
    isClaimed?: boolean
    claimedAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRewardsInput
  }

  export type RewardUncheckedCreateInput = {
    id?: string
    type: string
    title: string
    description: string
    content?: string | null
    points?: number
    category: string
    isClaimed?: boolean
    claimedAt?: Date | string | null
    createdAt?: Date | string
    userId: string
  }

  export type RewardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    isClaimed?: BoolFieldUpdateOperationsInput | boolean
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRewardsNestedInput
  }

  export type RewardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    isClaimed?: BoolFieldUpdateOperationsInput | boolean
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type RewardCreateManyInput = {
    id?: string
    type: string
    title: string
    description: string
    content?: string | null
    points?: number
    category: string
    isClaimed?: boolean
    claimedAt?: Date | string | null
    createdAt?: Date | string
    userId: string
  }

  export type RewardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    isClaimed?: BoolFieldUpdateOperationsInput | boolean
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    isClaimed?: BoolFieldUpdateOperationsInput | boolean
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type GrowthPointCreateInput = {
    id?: string
    points: number
    source: string
    sourceId?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutGrowthPointsInput
  }

  export type GrowthPointUncheckedCreateInput = {
    id?: string
    points: number
    source: string
    sourceId?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type GrowthPointUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGrowthPointsNestedInput
  }

  export type GrowthPointUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type GrowthPointCreateManyInput = {
    id?: string
    points: number
    source: string
    sourceId?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type GrowthPointUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrowthPointUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type AIInteractionCreateInput = {
    id?: string
    type: string
    input: string
    output: string
    tokensUsed?: number | null
    cost?: number | null
    createdAt?: Date | string
  }

  export type AIInteractionUncheckedCreateInput = {
    id?: string
    type: string
    input: string
    output: string
    tokensUsed?: number | null
    cost?: number | null
    createdAt?: Date | string
  }

  export type AIInteractionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: StringFieldUpdateOperationsInput | string
    tokensUsed?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIInteractionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: StringFieldUpdateOperationsInput | string
    tokensUsed?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIInteractionCreateManyInput = {
    id?: string
    type: string
    input: string
    output: string
    tokensUsed?: number | null
    cost?: number | null
    createdAt?: Date | string
  }

  export type AIInteractionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: StringFieldUpdateOperationsInput | string
    tokensUsed?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIInteractionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: StringFieldUpdateOperationsInput | string
    tokensUsed?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type WishListRelationFilter = {
    every?: WishWhereInput
    some?: WishWhereInput
    none?: WishWhereInput
  }

  export type GoalListRelationFilter = {
    every?: GoalWhereInput
    some?: GoalWhereInput
    none?: GoalWhereInput
  }

  export type GratitudeListRelationFilter = {
    every?: GratitudeWhereInput
    some?: GratitudeWhereInput
    none?: GratitudeWhereInput
  }

  export type CheckInListRelationFilter = {
    every?: CheckInWhereInput
    some?: CheckInWhereInput
    none?: CheckInWhereInput
  }

  export type RewardListRelationFilter = {
    every?: RewardWhereInput
    some?: RewardWhereInput
    none?: RewardWhereInput
  }

  export type GrowthPointListRelationFilter = {
    every?: GrowthPointWhereInput
    some?: GrowthPointWhereInput
    none?: GrowthPointWhereInput
  }

  export type VisionBoardListRelationFilter = {
    every?: VisionBoardWhereInput
    some?: VisionBoardWhereInput
    none?: VisionBoardWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type WishOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GoalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GratitudeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CheckInOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RewardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GrowthPointOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VisionBoardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type VisionBoardItemListRelationFilter = {
    every?: VisionBoardItemWhereInput
    some?: VisionBoardItemWhereInput
    none?: VisionBoardItemWhereInput
  }

  export type VisionBoardItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WishCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    isOptimized?: SortOrder
    optimizedText?: SortOrder
    keywords?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type WishMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    isOptimized?: SortOrder
    optimizedText?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type WishMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    isOptimized?: SortOrder
    optimizedText?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type WishRelationFilter = {
    is?: WishWhereInput
    isNot?: WishWhereInput
  }

  export type GoalCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    completedAt?: SortOrder
    progress?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    specific?: SortOrder
    measurable?: SortOrder
    achievable?: SortOrder
    relevant?: SortOrder
    timeBound?: SortOrder
    wishId?: SortOrder
    userId?: SortOrder
  }

  export type GoalAvgOrderByAggregateInput = {
    progress?: SortOrder
    order?: SortOrder
  }

  export type GoalMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    completedAt?: SortOrder
    progress?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    specific?: SortOrder
    measurable?: SortOrder
    achievable?: SortOrder
    relevant?: SortOrder
    timeBound?: SortOrder
    wishId?: SortOrder
    userId?: SortOrder
  }

  export type GoalMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    completedAt?: SortOrder
    progress?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    specific?: SortOrder
    measurable?: SortOrder
    achievable?: SortOrder
    relevant?: SortOrder
    timeBound?: SortOrder
    wishId?: SortOrder
    userId?: SortOrder
  }

  export type GoalSumOrderByAggregateInput = {
    progress?: SortOrder
    order?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type GoalRelationFilter = {
    is?: GoalWhereInput
    isNot?: GoalWhereInput
  }

  export type CheckInCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrder
    notes?: SortOrder
    mood?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
  }

  export type CheckInAvgOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type CheckInMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrder
    notes?: SortOrder
    mood?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
  }

  export type CheckInMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrder
    notes?: SortOrder
    mood?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
  }

  export type CheckInSumOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type GratitudeCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    type?: SortOrder
    mediaUrl?: SortOrder
    tags?: SortOrder
    mood?: SortOrder
    aiQuote?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type GratitudeMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    type?: SortOrder
    mediaUrl?: SortOrder
    mood?: SortOrder
    aiQuote?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type GratitudeMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    type?: SortOrder
    mediaUrl?: SortOrder
    mood?: SortOrder
    aiQuote?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type VisionBoardCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    layout?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type VisionBoardMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    layout?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type VisionBoardMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    layout?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type VisionBoardRelationFilter = {
    is?: VisionBoardWhereInput
    isNot?: VisionBoardWhereInput
  }

  export type WishNullableRelationFilter = {
    is?: WishWhereInput | null
    isNot?: WishWhereInput | null
  }

  export type VisionBoardItemCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    positionX?: SortOrder
    positionY?: SortOrder
    width?: SortOrder
    height?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    visionBoardId?: SortOrder
    wishId?: SortOrder
  }

  export type VisionBoardItemAvgOrderByAggregateInput = {
    positionX?: SortOrder
    positionY?: SortOrder
    width?: SortOrder
    height?: SortOrder
    order?: SortOrder
  }

  export type VisionBoardItemMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    positionX?: SortOrder
    positionY?: SortOrder
    width?: SortOrder
    height?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    visionBoardId?: SortOrder
    wishId?: SortOrder
  }

  export type VisionBoardItemMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    positionX?: SortOrder
    positionY?: SortOrder
    width?: SortOrder
    height?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    visionBoardId?: SortOrder
    wishId?: SortOrder
  }

  export type VisionBoardItemSumOrderByAggregateInput = {
    positionX?: SortOrder
    positionY?: SortOrder
    width?: SortOrder
    height?: SortOrder
    order?: SortOrder
  }

  export type RewardCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    points?: SortOrder
    category?: SortOrder
    isClaimed?: SortOrder
    claimedAt?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type RewardAvgOrderByAggregateInput = {
    points?: SortOrder
  }

  export type RewardMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    points?: SortOrder
    category?: SortOrder
    isClaimed?: SortOrder
    claimedAt?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type RewardMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    points?: SortOrder
    category?: SortOrder
    isClaimed?: SortOrder
    claimedAt?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type RewardSumOrderByAggregateInput = {
    points?: SortOrder
  }

  export type GrowthPointCountOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    source?: SortOrder
    sourceId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type GrowthPointAvgOrderByAggregateInput = {
    points?: SortOrder
  }

  export type GrowthPointMaxOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    source?: SortOrder
    sourceId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type GrowthPointMinOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    source?: SortOrder
    sourceId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type GrowthPointSumOrderByAggregateInput = {
    points?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type AIInteractionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    input?: SortOrder
    output?: SortOrder
    tokensUsed?: SortOrder
    cost?: SortOrder
    createdAt?: SortOrder
  }

  export type AIInteractionAvgOrderByAggregateInput = {
    tokensUsed?: SortOrder
    cost?: SortOrder
  }

  export type AIInteractionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    input?: SortOrder
    output?: SortOrder
    tokensUsed?: SortOrder
    cost?: SortOrder
    createdAt?: SortOrder
  }

  export type AIInteractionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    input?: SortOrder
    output?: SortOrder
    tokensUsed?: SortOrder
    cost?: SortOrder
    createdAt?: SortOrder
  }

  export type AIInteractionSumOrderByAggregateInput = {
    tokensUsed?: SortOrder
    cost?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type WishCreateNestedManyWithoutUserInput = {
    create?: XOR<WishCreateWithoutUserInput, WishUncheckedCreateWithoutUserInput> | WishCreateWithoutUserInput[] | WishUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WishCreateOrConnectWithoutUserInput | WishCreateOrConnectWithoutUserInput[]
    createMany?: WishCreateManyUserInputEnvelope
    connect?: WishWhereUniqueInput | WishWhereUniqueInput[]
  }

  export type GoalCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type GratitudeCreateNestedManyWithoutUserInput = {
    create?: XOR<GratitudeCreateWithoutUserInput, GratitudeUncheckedCreateWithoutUserInput> | GratitudeCreateWithoutUserInput[] | GratitudeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GratitudeCreateOrConnectWithoutUserInput | GratitudeCreateOrConnectWithoutUserInput[]
    createMany?: GratitudeCreateManyUserInputEnvelope
    connect?: GratitudeWhereUniqueInput | GratitudeWhereUniqueInput[]
  }

  export type CheckInCreateNestedManyWithoutUserInput = {
    create?: XOR<CheckInCreateWithoutUserInput, CheckInUncheckedCreateWithoutUserInput> | CheckInCreateWithoutUserInput[] | CheckInUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CheckInCreateOrConnectWithoutUserInput | CheckInCreateOrConnectWithoutUserInput[]
    createMany?: CheckInCreateManyUserInputEnvelope
    connect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
  }

  export type RewardCreateNestedManyWithoutUserInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
  }

  export type GrowthPointCreateNestedManyWithoutUserInput = {
    create?: XOR<GrowthPointCreateWithoutUserInput, GrowthPointUncheckedCreateWithoutUserInput> | GrowthPointCreateWithoutUserInput[] | GrowthPointUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrowthPointCreateOrConnectWithoutUserInput | GrowthPointCreateOrConnectWithoutUserInput[]
    createMany?: GrowthPointCreateManyUserInputEnvelope
    connect?: GrowthPointWhereUniqueInput | GrowthPointWhereUniqueInput[]
  }

  export type VisionBoardCreateNestedManyWithoutUserInput = {
    create?: XOR<VisionBoardCreateWithoutUserInput, VisionBoardUncheckedCreateWithoutUserInput> | VisionBoardCreateWithoutUserInput[] | VisionBoardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VisionBoardCreateOrConnectWithoutUserInput | VisionBoardCreateOrConnectWithoutUserInput[]
    createMany?: VisionBoardCreateManyUserInputEnvelope
    connect?: VisionBoardWhereUniqueInput | VisionBoardWhereUniqueInput[]
  }

  export type WishUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WishCreateWithoutUserInput, WishUncheckedCreateWithoutUserInput> | WishCreateWithoutUserInput[] | WishUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WishCreateOrConnectWithoutUserInput | WishCreateOrConnectWithoutUserInput[]
    createMany?: WishCreateManyUserInputEnvelope
    connect?: WishWhereUniqueInput | WishWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type GratitudeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GratitudeCreateWithoutUserInput, GratitudeUncheckedCreateWithoutUserInput> | GratitudeCreateWithoutUserInput[] | GratitudeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GratitudeCreateOrConnectWithoutUserInput | GratitudeCreateOrConnectWithoutUserInput[]
    createMany?: GratitudeCreateManyUserInputEnvelope
    connect?: GratitudeWhereUniqueInput | GratitudeWhereUniqueInput[]
  }

  export type CheckInUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CheckInCreateWithoutUserInput, CheckInUncheckedCreateWithoutUserInput> | CheckInCreateWithoutUserInput[] | CheckInUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CheckInCreateOrConnectWithoutUserInput | CheckInCreateOrConnectWithoutUserInput[]
    createMany?: CheckInCreateManyUserInputEnvelope
    connect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
  }

  export type RewardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
  }

  export type GrowthPointUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GrowthPointCreateWithoutUserInput, GrowthPointUncheckedCreateWithoutUserInput> | GrowthPointCreateWithoutUserInput[] | GrowthPointUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrowthPointCreateOrConnectWithoutUserInput | GrowthPointCreateOrConnectWithoutUserInput[]
    createMany?: GrowthPointCreateManyUserInputEnvelope
    connect?: GrowthPointWhereUniqueInput | GrowthPointWhereUniqueInput[]
  }

  export type VisionBoardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VisionBoardCreateWithoutUserInput, VisionBoardUncheckedCreateWithoutUserInput> | VisionBoardCreateWithoutUserInput[] | VisionBoardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VisionBoardCreateOrConnectWithoutUserInput | VisionBoardCreateOrConnectWithoutUserInput[]
    createMany?: VisionBoardCreateManyUserInputEnvelope
    connect?: VisionBoardWhereUniqueInput | VisionBoardWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type WishUpdateManyWithoutUserNestedInput = {
    create?: XOR<WishCreateWithoutUserInput, WishUncheckedCreateWithoutUserInput> | WishCreateWithoutUserInput[] | WishUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WishCreateOrConnectWithoutUserInput | WishCreateOrConnectWithoutUserInput[]
    upsert?: WishUpsertWithWhereUniqueWithoutUserInput | WishUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WishCreateManyUserInputEnvelope
    set?: WishWhereUniqueInput | WishWhereUniqueInput[]
    disconnect?: WishWhereUniqueInput | WishWhereUniqueInput[]
    delete?: WishWhereUniqueInput | WishWhereUniqueInput[]
    connect?: WishWhereUniqueInput | WishWhereUniqueInput[]
    update?: WishUpdateWithWhereUniqueWithoutUserInput | WishUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WishUpdateManyWithWhereWithoutUserInput | WishUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WishScalarWhereInput | WishScalarWhereInput[]
  }

  export type GoalUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutUserInput | GoalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutUserInput | GoalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutUserInput | GoalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type GratitudeUpdateManyWithoutUserNestedInput = {
    create?: XOR<GratitudeCreateWithoutUserInput, GratitudeUncheckedCreateWithoutUserInput> | GratitudeCreateWithoutUserInput[] | GratitudeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GratitudeCreateOrConnectWithoutUserInput | GratitudeCreateOrConnectWithoutUserInput[]
    upsert?: GratitudeUpsertWithWhereUniqueWithoutUserInput | GratitudeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GratitudeCreateManyUserInputEnvelope
    set?: GratitudeWhereUniqueInput | GratitudeWhereUniqueInput[]
    disconnect?: GratitudeWhereUniqueInput | GratitudeWhereUniqueInput[]
    delete?: GratitudeWhereUniqueInput | GratitudeWhereUniqueInput[]
    connect?: GratitudeWhereUniqueInput | GratitudeWhereUniqueInput[]
    update?: GratitudeUpdateWithWhereUniqueWithoutUserInput | GratitudeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GratitudeUpdateManyWithWhereWithoutUserInput | GratitudeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GratitudeScalarWhereInput | GratitudeScalarWhereInput[]
  }

  export type CheckInUpdateManyWithoutUserNestedInput = {
    create?: XOR<CheckInCreateWithoutUserInput, CheckInUncheckedCreateWithoutUserInput> | CheckInCreateWithoutUserInput[] | CheckInUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CheckInCreateOrConnectWithoutUserInput | CheckInCreateOrConnectWithoutUserInput[]
    upsert?: CheckInUpsertWithWhereUniqueWithoutUserInput | CheckInUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CheckInCreateManyUserInputEnvelope
    set?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    disconnect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    delete?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    connect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    update?: CheckInUpdateWithWhereUniqueWithoutUserInput | CheckInUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CheckInUpdateManyWithWhereWithoutUserInput | CheckInUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CheckInScalarWhereInput | CheckInScalarWhereInput[]
  }

  export type RewardUpdateManyWithoutUserNestedInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    upsert?: RewardUpsertWithWhereUniqueWithoutUserInput | RewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    set?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    disconnect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    delete?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    update?: RewardUpdateWithWhereUniqueWithoutUserInput | RewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RewardUpdateManyWithWhereWithoutUserInput | RewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RewardScalarWhereInput | RewardScalarWhereInput[]
  }

  export type GrowthPointUpdateManyWithoutUserNestedInput = {
    create?: XOR<GrowthPointCreateWithoutUserInput, GrowthPointUncheckedCreateWithoutUserInput> | GrowthPointCreateWithoutUserInput[] | GrowthPointUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrowthPointCreateOrConnectWithoutUserInput | GrowthPointCreateOrConnectWithoutUserInput[]
    upsert?: GrowthPointUpsertWithWhereUniqueWithoutUserInput | GrowthPointUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GrowthPointCreateManyUserInputEnvelope
    set?: GrowthPointWhereUniqueInput | GrowthPointWhereUniqueInput[]
    disconnect?: GrowthPointWhereUniqueInput | GrowthPointWhereUniqueInput[]
    delete?: GrowthPointWhereUniqueInput | GrowthPointWhereUniqueInput[]
    connect?: GrowthPointWhereUniqueInput | GrowthPointWhereUniqueInput[]
    update?: GrowthPointUpdateWithWhereUniqueWithoutUserInput | GrowthPointUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GrowthPointUpdateManyWithWhereWithoutUserInput | GrowthPointUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GrowthPointScalarWhereInput | GrowthPointScalarWhereInput[]
  }

  export type VisionBoardUpdateManyWithoutUserNestedInput = {
    create?: XOR<VisionBoardCreateWithoutUserInput, VisionBoardUncheckedCreateWithoutUserInput> | VisionBoardCreateWithoutUserInput[] | VisionBoardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VisionBoardCreateOrConnectWithoutUserInput | VisionBoardCreateOrConnectWithoutUserInput[]
    upsert?: VisionBoardUpsertWithWhereUniqueWithoutUserInput | VisionBoardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VisionBoardCreateManyUserInputEnvelope
    set?: VisionBoardWhereUniqueInput | VisionBoardWhereUniqueInput[]
    disconnect?: VisionBoardWhereUniqueInput | VisionBoardWhereUniqueInput[]
    delete?: VisionBoardWhereUniqueInput | VisionBoardWhereUniqueInput[]
    connect?: VisionBoardWhereUniqueInput | VisionBoardWhereUniqueInput[]
    update?: VisionBoardUpdateWithWhereUniqueWithoutUserInput | VisionBoardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VisionBoardUpdateManyWithWhereWithoutUserInput | VisionBoardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VisionBoardScalarWhereInput | VisionBoardScalarWhereInput[]
  }

  export type WishUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WishCreateWithoutUserInput, WishUncheckedCreateWithoutUserInput> | WishCreateWithoutUserInput[] | WishUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WishCreateOrConnectWithoutUserInput | WishCreateOrConnectWithoutUserInput[]
    upsert?: WishUpsertWithWhereUniqueWithoutUserInput | WishUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WishCreateManyUserInputEnvelope
    set?: WishWhereUniqueInput | WishWhereUniqueInput[]
    disconnect?: WishWhereUniqueInput | WishWhereUniqueInput[]
    delete?: WishWhereUniqueInput | WishWhereUniqueInput[]
    connect?: WishWhereUniqueInput | WishWhereUniqueInput[]
    update?: WishUpdateWithWhereUniqueWithoutUserInput | WishUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WishUpdateManyWithWhereWithoutUserInput | WishUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WishScalarWhereInput | WishScalarWhereInput[]
  }

  export type GoalUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutUserInput | GoalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutUserInput | GoalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutUserInput | GoalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type GratitudeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GratitudeCreateWithoutUserInput, GratitudeUncheckedCreateWithoutUserInput> | GratitudeCreateWithoutUserInput[] | GratitudeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GratitudeCreateOrConnectWithoutUserInput | GratitudeCreateOrConnectWithoutUserInput[]
    upsert?: GratitudeUpsertWithWhereUniqueWithoutUserInput | GratitudeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GratitudeCreateManyUserInputEnvelope
    set?: GratitudeWhereUniqueInput | GratitudeWhereUniqueInput[]
    disconnect?: GratitudeWhereUniqueInput | GratitudeWhereUniqueInput[]
    delete?: GratitudeWhereUniqueInput | GratitudeWhereUniqueInput[]
    connect?: GratitudeWhereUniqueInput | GratitudeWhereUniqueInput[]
    update?: GratitudeUpdateWithWhereUniqueWithoutUserInput | GratitudeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GratitudeUpdateManyWithWhereWithoutUserInput | GratitudeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GratitudeScalarWhereInput | GratitudeScalarWhereInput[]
  }

  export type CheckInUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CheckInCreateWithoutUserInput, CheckInUncheckedCreateWithoutUserInput> | CheckInCreateWithoutUserInput[] | CheckInUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CheckInCreateOrConnectWithoutUserInput | CheckInCreateOrConnectWithoutUserInput[]
    upsert?: CheckInUpsertWithWhereUniqueWithoutUserInput | CheckInUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CheckInCreateManyUserInputEnvelope
    set?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    disconnect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    delete?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    connect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    update?: CheckInUpdateWithWhereUniqueWithoutUserInput | CheckInUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CheckInUpdateManyWithWhereWithoutUserInput | CheckInUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CheckInScalarWhereInput | CheckInScalarWhereInput[]
  }

  export type RewardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    upsert?: RewardUpsertWithWhereUniqueWithoutUserInput | RewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    set?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    disconnect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    delete?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    update?: RewardUpdateWithWhereUniqueWithoutUserInput | RewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RewardUpdateManyWithWhereWithoutUserInput | RewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RewardScalarWhereInput | RewardScalarWhereInput[]
  }

  export type GrowthPointUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GrowthPointCreateWithoutUserInput, GrowthPointUncheckedCreateWithoutUserInput> | GrowthPointCreateWithoutUserInput[] | GrowthPointUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrowthPointCreateOrConnectWithoutUserInput | GrowthPointCreateOrConnectWithoutUserInput[]
    upsert?: GrowthPointUpsertWithWhereUniqueWithoutUserInput | GrowthPointUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GrowthPointCreateManyUserInputEnvelope
    set?: GrowthPointWhereUniqueInput | GrowthPointWhereUniqueInput[]
    disconnect?: GrowthPointWhereUniqueInput | GrowthPointWhereUniqueInput[]
    delete?: GrowthPointWhereUniqueInput | GrowthPointWhereUniqueInput[]
    connect?: GrowthPointWhereUniqueInput | GrowthPointWhereUniqueInput[]
    update?: GrowthPointUpdateWithWhereUniqueWithoutUserInput | GrowthPointUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GrowthPointUpdateManyWithWhereWithoutUserInput | GrowthPointUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GrowthPointScalarWhereInput | GrowthPointScalarWhereInput[]
  }

  export type VisionBoardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VisionBoardCreateWithoutUserInput, VisionBoardUncheckedCreateWithoutUserInput> | VisionBoardCreateWithoutUserInput[] | VisionBoardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VisionBoardCreateOrConnectWithoutUserInput | VisionBoardCreateOrConnectWithoutUserInput[]
    upsert?: VisionBoardUpsertWithWhereUniqueWithoutUserInput | VisionBoardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VisionBoardCreateManyUserInputEnvelope
    set?: VisionBoardWhereUniqueInput | VisionBoardWhereUniqueInput[]
    disconnect?: VisionBoardWhereUniqueInput | VisionBoardWhereUniqueInput[]
    delete?: VisionBoardWhereUniqueInput | VisionBoardWhereUniqueInput[]
    connect?: VisionBoardWhereUniqueInput | VisionBoardWhereUniqueInput[]
    update?: VisionBoardUpdateWithWhereUniqueWithoutUserInput | VisionBoardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VisionBoardUpdateManyWithWhereWithoutUserInput | VisionBoardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VisionBoardScalarWhereInput | VisionBoardScalarWhereInput[]
  }

  export type WishCreatekeywordsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutWishesInput = {
    create?: XOR<UserCreateWithoutWishesInput, UserUncheckedCreateWithoutWishesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWishesInput
    connect?: UserWhereUniqueInput
  }

  export type GoalCreateNestedManyWithoutWishInput = {
    create?: XOR<GoalCreateWithoutWishInput, GoalUncheckedCreateWithoutWishInput> | GoalCreateWithoutWishInput[] | GoalUncheckedCreateWithoutWishInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutWishInput | GoalCreateOrConnectWithoutWishInput[]
    createMany?: GoalCreateManyWishInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type VisionBoardItemCreateNestedManyWithoutWishInput = {
    create?: XOR<VisionBoardItemCreateWithoutWishInput, VisionBoardItemUncheckedCreateWithoutWishInput> | VisionBoardItemCreateWithoutWishInput[] | VisionBoardItemUncheckedCreateWithoutWishInput[]
    connectOrCreate?: VisionBoardItemCreateOrConnectWithoutWishInput | VisionBoardItemCreateOrConnectWithoutWishInput[]
    createMany?: VisionBoardItemCreateManyWishInputEnvelope
    connect?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutWishInput = {
    create?: XOR<GoalCreateWithoutWishInput, GoalUncheckedCreateWithoutWishInput> | GoalCreateWithoutWishInput[] | GoalUncheckedCreateWithoutWishInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutWishInput | GoalCreateOrConnectWithoutWishInput[]
    createMany?: GoalCreateManyWishInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type VisionBoardItemUncheckedCreateNestedManyWithoutWishInput = {
    create?: XOR<VisionBoardItemCreateWithoutWishInput, VisionBoardItemUncheckedCreateWithoutWishInput> | VisionBoardItemCreateWithoutWishInput[] | VisionBoardItemUncheckedCreateWithoutWishInput[]
    connectOrCreate?: VisionBoardItemCreateOrConnectWithoutWishInput | VisionBoardItemCreateOrConnectWithoutWishInput[]
    createMany?: VisionBoardItemCreateManyWishInputEnvelope
    connect?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type WishUpdatekeywordsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutWishesNestedInput = {
    create?: XOR<UserCreateWithoutWishesInput, UserUncheckedCreateWithoutWishesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWishesInput
    upsert?: UserUpsertWithoutWishesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWishesInput, UserUpdateWithoutWishesInput>, UserUncheckedUpdateWithoutWishesInput>
  }

  export type GoalUpdateManyWithoutWishNestedInput = {
    create?: XOR<GoalCreateWithoutWishInput, GoalUncheckedCreateWithoutWishInput> | GoalCreateWithoutWishInput[] | GoalUncheckedCreateWithoutWishInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutWishInput | GoalCreateOrConnectWithoutWishInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutWishInput | GoalUpsertWithWhereUniqueWithoutWishInput[]
    createMany?: GoalCreateManyWishInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutWishInput | GoalUpdateWithWhereUniqueWithoutWishInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutWishInput | GoalUpdateManyWithWhereWithoutWishInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type VisionBoardItemUpdateManyWithoutWishNestedInput = {
    create?: XOR<VisionBoardItemCreateWithoutWishInput, VisionBoardItemUncheckedCreateWithoutWishInput> | VisionBoardItemCreateWithoutWishInput[] | VisionBoardItemUncheckedCreateWithoutWishInput[]
    connectOrCreate?: VisionBoardItemCreateOrConnectWithoutWishInput | VisionBoardItemCreateOrConnectWithoutWishInput[]
    upsert?: VisionBoardItemUpsertWithWhereUniqueWithoutWishInput | VisionBoardItemUpsertWithWhereUniqueWithoutWishInput[]
    createMany?: VisionBoardItemCreateManyWishInputEnvelope
    set?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    disconnect?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    delete?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    connect?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    update?: VisionBoardItemUpdateWithWhereUniqueWithoutWishInput | VisionBoardItemUpdateWithWhereUniqueWithoutWishInput[]
    updateMany?: VisionBoardItemUpdateManyWithWhereWithoutWishInput | VisionBoardItemUpdateManyWithWhereWithoutWishInput[]
    deleteMany?: VisionBoardItemScalarWhereInput | VisionBoardItemScalarWhereInput[]
  }

  export type GoalUncheckedUpdateManyWithoutWishNestedInput = {
    create?: XOR<GoalCreateWithoutWishInput, GoalUncheckedCreateWithoutWishInput> | GoalCreateWithoutWishInput[] | GoalUncheckedCreateWithoutWishInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutWishInput | GoalCreateOrConnectWithoutWishInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutWishInput | GoalUpsertWithWhereUniqueWithoutWishInput[]
    createMany?: GoalCreateManyWishInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutWishInput | GoalUpdateWithWhereUniqueWithoutWishInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutWishInput | GoalUpdateManyWithWhereWithoutWishInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type VisionBoardItemUncheckedUpdateManyWithoutWishNestedInput = {
    create?: XOR<VisionBoardItemCreateWithoutWishInput, VisionBoardItemUncheckedCreateWithoutWishInput> | VisionBoardItemCreateWithoutWishInput[] | VisionBoardItemUncheckedCreateWithoutWishInput[]
    connectOrCreate?: VisionBoardItemCreateOrConnectWithoutWishInput | VisionBoardItemCreateOrConnectWithoutWishInput[]
    upsert?: VisionBoardItemUpsertWithWhereUniqueWithoutWishInput | VisionBoardItemUpsertWithWhereUniqueWithoutWishInput[]
    createMany?: VisionBoardItemCreateManyWishInputEnvelope
    set?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    disconnect?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    delete?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    connect?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    update?: VisionBoardItemUpdateWithWhereUniqueWithoutWishInput | VisionBoardItemUpdateWithWhereUniqueWithoutWishInput[]
    updateMany?: VisionBoardItemUpdateManyWithWhereWithoutWishInput | VisionBoardItemUpdateManyWithWhereWithoutWishInput[]
    deleteMany?: VisionBoardItemScalarWhereInput | VisionBoardItemScalarWhereInput[]
  }

  export type WishCreateNestedOneWithoutGoalsInput = {
    create?: XOR<WishCreateWithoutGoalsInput, WishUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: WishCreateOrConnectWithoutGoalsInput
    connect?: WishWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGoalsInput = {
    create?: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalsInput
    connect?: UserWhereUniqueInput
  }

  export type CheckInCreateNestedManyWithoutGoalInput = {
    create?: XOR<CheckInCreateWithoutGoalInput, CheckInUncheckedCreateWithoutGoalInput> | CheckInCreateWithoutGoalInput[] | CheckInUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: CheckInCreateOrConnectWithoutGoalInput | CheckInCreateOrConnectWithoutGoalInput[]
    createMany?: CheckInCreateManyGoalInputEnvelope
    connect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
  }

  export type CheckInUncheckedCreateNestedManyWithoutGoalInput = {
    create?: XOR<CheckInCreateWithoutGoalInput, CheckInUncheckedCreateWithoutGoalInput> | CheckInCreateWithoutGoalInput[] | CheckInUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: CheckInCreateOrConnectWithoutGoalInput | CheckInCreateOrConnectWithoutGoalInput[]
    createMany?: CheckInCreateManyGoalInputEnvelope
    connect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WishUpdateOneRequiredWithoutGoalsNestedInput = {
    create?: XOR<WishCreateWithoutGoalsInput, WishUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: WishCreateOrConnectWithoutGoalsInput
    upsert?: WishUpsertWithoutGoalsInput
    connect?: WishWhereUniqueInput
    update?: XOR<XOR<WishUpdateToOneWithWhereWithoutGoalsInput, WishUpdateWithoutGoalsInput>, WishUncheckedUpdateWithoutGoalsInput>
  }

  export type UserUpdateOneRequiredWithoutGoalsNestedInput = {
    create?: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalsInput
    upsert?: UserUpsertWithoutGoalsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGoalsInput, UserUpdateWithoutGoalsInput>, UserUncheckedUpdateWithoutGoalsInput>
  }

  export type CheckInUpdateManyWithoutGoalNestedInput = {
    create?: XOR<CheckInCreateWithoutGoalInput, CheckInUncheckedCreateWithoutGoalInput> | CheckInCreateWithoutGoalInput[] | CheckInUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: CheckInCreateOrConnectWithoutGoalInput | CheckInCreateOrConnectWithoutGoalInput[]
    upsert?: CheckInUpsertWithWhereUniqueWithoutGoalInput | CheckInUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: CheckInCreateManyGoalInputEnvelope
    set?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    disconnect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    delete?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    connect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    update?: CheckInUpdateWithWhereUniqueWithoutGoalInput | CheckInUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: CheckInUpdateManyWithWhereWithoutGoalInput | CheckInUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: CheckInScalarWhereInput | CheckInScalarWhereInput[]
  }

  export type CheckInUncheckedUpdateManyWithoutGoalNestedInput = {
    create?: XOR<CheckInCreateWithoutGoalInput, CheckInUncheckedCreateWithoutGoalInput> | CheckInCreateWithoutGoalInput[] | CheckInUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: CheckInCreateOrConnectWithoutGoalInput | CheckInCreateOrConnectWithoutGoalInput[]
    upsert?: CheckInUpsertWithWhereUniqueWithoutGoalInput | CheckInUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: CheckInCreateManyGoalInputEnvelope
    set?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    disconnect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    delete?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    connect?: CheckInWhereUniqueInput | CheckInWhereUniqueInput[]
    update?: CheckInUpdateWithWhereUniqueWithoutGoalInput | CheckInUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: CheckInUpdateManyWithWhereWithoutGoalInput | CheckInUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: CheckInScalarWhereInput | CheckInScalarWhereInput[]
  }

  export type GoalCreateNestedOneWithoutCheckInsInput = {
    create?: XOR<GoalCreateWithoutCheckInsInput, GoalUncheckedCreateWithoutCheckInsInput>
    connectOrCreate?: GoalCreateOrConnectWithoutCheckInsInput
    connect?: GoalWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCheckInsInput = {
    create?: XOR<UserCreateWithoutCheckInsInput, UserUncheckedCreateWithoutCheckInsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCheckInsInput
    connect?: UserWhereUniqueInput
  }

  export type GoalUpdateOneRequiredWithoutCheckInsNestedInput = {
    create?: XOR<GoalCreateWithoutCheckInsInput, GoalUncheckedCreateWithoutCheckInsInput>
    connectOrCreate?: GoalCreateOrConnectWithoutCheckInsInput
    upsert?: GoalUpsertWithoutCheckInsInput
    connect?: GoalWhereUniqueInput
    update?: XOR<XOR<GoalUpdateToOneWithWhereWithoutCheckInsInput, GoalUpdateWithoutCheckInsInput>, GoalUncheckedUpdateWithoutCheckInsInput>
  }

  export type UserUpdateOneRequiredWithoutCheckInsNestedInput = {
    create?: XOR<UserCreateWithoutCheckInsInput, UserUncheckedCreateWithoutCheckInsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCheckInsInput
    upsert?: UserUpsertWithoutCheckInsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCheckInsInput, UserUpdateWithoutCheckInsInput>, UserUncheckedUpdateWithoutCheckInsInput>
  }

  export type GratitudeCreatetagsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutGratitudesInput = {
    create?: XOR<UserCreateWithoutGratitudesInput, UserUncheckedCreateWithoutGratitudesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGratitudesInput
    connect?: UserWhereUniqueInput
  }

  export type GratitudeUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutGratitudesNestedInput = {
    create?: XOR<UserCreateWithoutGratitudesInput, UserUncheckedCreateWithoutGratitudesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGratitudesInput
    upsert?: UserUpsertWithoutGratitudesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGratitudesInput, UserUpdateWithoutGratitudesInput>, UserUncheckedUpdateWithoutGratitudesInput>
  }

  export type UserCreateNestedOneWithoutVisionBoardsInput = {
    create?: XOR<UserCreateWithoutVisionBoardsInput, UserUncheckedCreateWithoutVisionBoardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVisionBoardsInput
    connect?: UserWhereUniqueInput
  }

  export type VisionBoardItemCreateNestedManyWithoutVisionBoardInput = {
    create?: XOR<VisionBoardItemCreateWithoutVisionBoardInput, VisionBoardItemUncheckedCreateWithoutVisionBoardInput> | VisionBoardItemCreateWithoutVisionBoardInput[] | VisionBoardItemUncheckedCreateWithoutVisionBoardInput[]
    connectOrCreate?: VisionBoardItemCreateOrConnectWithoutVisionBoardInput | VisionBoardItemCreateOrConnectWithoutVisionBoardInput[]
    createMany?: VisionBoardItemCreateManyVisionBoardInputEnvelope
    connect?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
  }

  export type VisionBoardItemUncheckedCreateNestedManyWithoutVisionBoardInput = {
    create?: XOR<VisionBoardItemCreateWithoutVisionBoardInput, VisionBoardItemUncheckedCreateWithoutVisionBoardInput> | VisionBoardItemCreateWithoutVisionBoardInput[] | VisionBoardItemUncheckedCreateWithoutVisionBoardInput[]
    connectOrCreate?: VisionBoardItemCreateOrConnectWithoutVisionBoardInput | VisionBoardItemCreateOrConnectWithoutVisionBoardInput[]
    createMany?: VisionBoardItemCreateManyVisionBoardInputEnvelope
    connect?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutVisionBoardsNestedInput = {
    create?: XOR<UserCreateWithoutVisionBoardsInput, UserUncheckedCreateWithoutVisionBoardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVisionBoardsInput
    upsert?: UserUpsertWithoutVisionBoardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVisionBoardsInput, UserUpdateWithoutVisionBoardsInput>, UserUncheckedUpdateWithoutVisionBoardsInput>
  }

  export type VisionBoardItemUpdateManyWithoutVisionBoardNestedInput = {
    create?: XOR<VisionBoardItemCreateWithoutVisionBoardInput, VisionBoardItemUncheckedCreateWithoutVisionBoardInput> | VisionBoardItemCreateWithoutVisionBoardInput[] | VisionBoardItemUncheckedCreateWithoutVisionBoardInput[]
    connectOrCreate?: VisionBoardItemCreateOrConnectWithoutVisionBoardInput | VisionBoardItemCreateOrConnectWithoutVisionBoardInput[]
    upsert?: VisionBoardItemUpsertWithWhereUniqueWithoutVisionBoardInput | VisionBoardItemUpsertWithWhereUniqueWithoutVisionBoardInput[]
    createMany?: VisionBoardItemCreateManyVisionBoardInputEnvelope
    set?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    disconnect?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    delete?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    connect?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    update?: VisionBoardItemUpdateWithWhereUniqueWithoutVisionBoardInput | VisionBoardItemUpdateWithWhereUniqueWithoutVisionBoardInput[]
    updateMany?: VisionBoardItemUpdateManyWithWhereWithoutVisionBoardInput | VisionBoardItemUpdateManyWithWhereWithoutVisionBoardInput[]
    deleteMany?: VisionBoardItemScalarWhereInput | VisionBoardItemScalarWhereInput[]
  }

  export type VisionBoardItemUncheckedUpdateManyWithoutVisionBoardNestedInput = {
    create?: XOR<VisionBoardItemCreateWithoutVisionBoardInput, VisionBoardItemUncheckedCreateWithoutVisionBoardInput> | VisionBoardItemCreateWithoutVisionBoardInput[] | VisionBoardItemUncheckedCreateWithoutVisionBoardInput[]
    connectOrCreate?: VisionBoardItemCreateOrConnectWithoutVisionBoardInput | VisionBoardItemCreateOrConnectWithoutVisionBoardInput[]
    upsert?: VisionBoardItemUpsertWithWhereUniqueWithoutVisionBoardInput | VisionBoardItemUpsertWithWhereUniqueWithoutVisionBoardInput[]
    createMany?: VisionBoardItemCreateManyVisionBoardInputEnvelope
    set?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    disconnect?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    delete?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    connect?: VisionBoardItemWhereUniqueInput | VisionBoardItemWhereUniqueInput[]
    update?: VisionBoardItemUpdateWithWhereUniqueWithoutVisionBoardInput | VisionBoardItemUpdateWithWhereUniqueWithoutVisionBoardInput[]
    updateMany?: VisionBoardItemUpdateManyWithWhereWithoutVisionBoardInput | VisionBoardItemUpdateManyWithWhereWithoutVisionBoardInput[]
    deleteMany?: VisionBoardItemScalarWhereInput | VisionBoardItemScalarWhereInput[]
  }

  export type VisionBoardCreateNestedOneWithoutItemsInput = {
    create?: XOR<VisionBoardCreateWithoutItemsInput, VisionBoardUncheckedCreateWithoutItemsInput>
    connectOrCreate?: VisionBoardCreateOrConnectWithoutItemsInput
    connect?: VisionBoardWhereUniqueInput
  }

  export type WishCreateNestedOneWithoutVisionBoardItemsInput = {
    create?: XOR<WishCreateWithoutVisionBoardItemsInput, WishUncheckedCreateWithoutVisionBoardItemsInput>
    connectOrCreate?: WishCreateOrConnectWithoutVisionBoardItemsInput
    connect?: WishWhereUniqueInput
  }

  export type VisionBoardUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<VisionBoardCreateWithoutItemsInput, VisionBoardUncheckedCreateWithoutItemsInput>
    connectOrCreate?: VisionBoardCreateOrConnectWithoutItemsInput
    upsert?: VisionBoardUpsertWithoutItemsInput
    connect?: VisionBoardWhereUniqueInput
    update?: XOR<XOR<VisionBoardUpdateToOneWithWhereWithoutItemsInput, VisionBoardUpdateWithoutItemsInput>, VisionBoardUncheckedUpdateWithoutItemsInput>
  }

  export type WishUpdateOneWithoutVisionBoardItemsNestedInput = {
    create?: XOR<WishCreateWithoutVisionBoardItemsInput, WishUncheckedCreateWithoutVisionBoardItemsInput>
    connectOrCreate?: WishCreateOrConnectWithoutVisionBoardItemsInput
    upsert?: WishUpsertWithoutVisionBoardItemsInput
    disconnect?: WishWhereInput | boolean
    delete?: WishWhereInput | boolean
    connect?: WishWhereUniqueInput
    update?: XOR<XOR<WishUpdateToOneWithWhereWithoutVisionBoardItemsInput, WishUpdateWithoutVisionBoardItemsInput>, WishUncheckedUpdateWithoutVisionBoardItemsInput>
  }

  export type UserCreateNestedOneWithoutRewardsInput = {
    create?: XOR<UserCreateWithoutRewardsInput, UserUncheckedCreateWithoutRewardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRewardsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRewardsNestedInput = {
    create?: XOR<UserCreateWithoutRewardsInput, UserUncheckedCreateWithoutRewardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRewardsInput
    upsert?: UserUpsertWithoutRewardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRewardsInput, UserUpdateWithoutRewardsInput>, UserUncheckedUpdateWithoutRewardsInput>
  }

  export type UserCreateNestedOneWithoutGrowthPointsInput = {
    create?: XOR<UserCreateWithoutGrowthPointsInput, UserUncheckedCreateWithoutGrowthPointsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGrowthPointsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGrowthPointsNestedInput = {
    create?: XOR<UserCreateWithoutGrowthPointsInput, UserUncheckedCreateWithoutGrowthPointsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGrowthPointsInput
    upsert?: UserUpsertWithoutGrowthPointsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGrowthPointsInput, UserUpdateWithoutGrowthPointsInput>, UserUncheckedUpdateWithoutGrowthPointsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type WishCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    category: string
    isOptimized?: boolean
    optimizedText?: string | null
    keywords?: WishCreatekeywordsInput | string[]
    status?: string
    priority?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalCreateNestedManyWithoutWishInput
    visionBoardItems?: VisionBoardItemCreateNestedManyWithoutWishInput
  }

  export type WishUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    category: string
    isOptimized?: boolean
    optimizedText?: string | null
    keywords?: WishCreatekeywordsInput | string[]
    status?: string
    priority?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalUncheckedCreateNestedManyWithoutWishInput
    visionBoardItems?: VisionBoardItemUncheckedCreateNestedManyWithoutWishInput
  }

  export type WishCreateOrConnectWithoutUserInput = {
    where: WishWhereUniqueInput
    create: XOR<WishCreateWithoutUserInput, WishUncheckedCreateWithoutUserInput>
  }

  export type WishCreateManyUserInputEnvelope = {
    data: WishCreateManyUserInput | WishCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GoalCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    status?: string
    priority?: string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    progress?: number
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    specific?: string | null
    measurable?: string | null
    achievable?: string | null
    relevant?: string | null
    timeBound?: string | null
    wish: WishCreateNestedOneWithoutGoalsInput
    checkIns?: CheckInCreateNestedManyWithoutGoalInput
  }

  export type GoalUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    status?: string
    priority?: string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    progress?: number
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    specific?: string | null
    measurable?: string | null
    achievable?: string | null
    relevant?: string | null
    timeBound?: string | null
    wishId: string
    checkIns?: CheckInUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalCreateOrConnectWithoutUserInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput>
  }

  export type GoalCreateManyUserInputEnvelope = {
    data: GoalCreateManyUserInput | GoalCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GratitudeCreateWithoutUserInput = {
    id?: string
    content: string
    type?: string
    mediaUrl?: string | null
    tags?: GratitudeCreatetagsInput | string[]
    mood?: string | null
    aiQuote?: string | null
    createdAt?: Date | string
  }

  export type GratitudeUncheckedCreateWithoutUserInput = {
    id?: string
    content: string
    type?: string
    mediaUrl?: string | null
    tags?: GratitudeCreatetagsInput | string[]
    mood?: string | null
    aiQuote?: string | null
    createdAt?: Date | string
  }

  export type GratitudeCreateOrConnectWithoutUserInput = {
    where: GratitudeWhereUniqueInput
    create: XOR<GratitudeCreateWithoutUserInput, GratitudeUncheckedCreateWithoutUserInput>
  }

  export type GratitudeCreateManyUserInputEnvelope = {
    data: GratitudeCreateManyUserInput | GratitudeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CheckInCreateWithoutUserInput = {
    id?: string
    type: string
    content: string
    mediaUrl?: string | null
    notes?: string | null
    mood?: string | null
    progress?: number
    createdAt?: Date | string
    goal: GoalCreateNestedOneWithoutCheckInsInput
  }

  export type CheckInUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    content: string
    mediaUrl?: string | null
    notes?: string | null
    mood?: string | null
    progress?: number
    createdAt?: Date | string
    goalId: string
  }

  export type CheckInCreateOrConnectWithoutUserInput = {
    where: CheckInWhereUniqueInput
    create: XOR<CheckInCreateWithoutUserInput, CheckInUncheckedCreateWithoutUserInput>
  }

  export type CheckInCreateManyUserInputEnvelope = {
    data: CheckInCreateManyUserInput | CheckInCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RewardCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    description: string
    content?: string | null
    points?: number
    category: string
    isClaimed?: boolean
    claimedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type RewardUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    description: string
    content?: string | null
    points?: number
    category: string
    isClaimed?: boolean
    claimedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type RewardCreateOrConnectWithoutUserInput = {
    where: RewardWhereUniqueInput
    create: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput>
  }

  export type RewardCreateManyUserInputEnvelope = {
    data: RewardCreateManyUserInput | RewardCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GrowthPointCreateWithoutUserInput = {
    id?: string
    points: number
    source: string
    sourceId?: string | null
    createdAt?: Date | string
  }

  export type GrowthPointUncheckedCreateWithoutUserInput = {
    id?: string
    points: number
    source: string
    sourceId?: string | null
    createdAt?: Date | string
  }

  export type GrowthPointCreateOrConnectWithoutUserInput = {
    where: GrowthPointWhereUniqueInput
    create: XOR<GrowthPointCreateWithoutUserInput, GrowthPointUncheckedCreateWithoutUserInput>
  }

  export type GrowthPointCreateManyUserInputEnvelope = {
    data: GrowthPointCreateManyUserInput | GrowthPointCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VisionBoardCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    isPublic?: boolean
    layout: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: VisionBoardItemCreateNestedManyWithoutVisionBoardInput
  }

  export type VisionBoardUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    isPublic?: boolean
    layout: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: VisionBoardItemUncheckedCreateNestedManyWithoutVisionBoardInput
  }

  export type VisionBoardCreateOrConnectWithoutUserInput = {
    where: VisionBoardWhereUniqueInput
    create: XOR<VisionBoardCreateWithoutUserInput, VisionBoardUncheckedCreateWithoutUserInput>
  }

  export type VisionBoardCreateManyUserInputEnvelope = {
    data: VisionBoardCreateManyUserInput | VisionBoardCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WishUpsertWithWhereUniqueWithoutUserInput = {
    where: WishWhereUniqueInput
    update: XOR<WishUpdateWithoutUserInput, WishUncheckedUpdateWithoutUserInput>
    create: XOR<WishCreateWithoutUserInput, WishUncheckedCreateWithoutUserInput>
  }

  export type WishUpdateWithWhereUniqueWithoutUserInput = {
    where: WishWhereUniqueInput
    data: XOR<WishUpdateWithoutUserInput, WishUncheckedUpdateWithoutUserInput>
  }

  export type WishUpdateManyWithWhereWithoutUserInput = {
    where: WishScalarWhereInput
    data: XOR<WishUpdateManyMutationInput, WishUncheckedUpdateManyWithoutUserInput>
  }

  export type WishScalarWhereInput = {
    AND?: WishScalarWhereInput | WishScalarWhereInput[]
    OR?: WishScalarWhereInput[]
    NOT?: WishScalarWhereInput | WishScalarWhereInput[]
    id?: StringFilter<"Wish"> | string
    title?: StringFilter<"Wish"> | string
    description?: StringNullableFilter<"Wish"> | string | null
    category?: StringFilter<"Wish"> | string
    isOptimized?: BoolFilter<"Wish"> | boolean
    optimizedText?: StringNullableFilter<"Wish"> | string | null
    keywords?: StringNullableListFilter<"Wish">
    status?: StringFilter<"Wish"> | string
    priority?: StringFilter<"Wish"> | string
    createdAt?: DateTimeFilter<"Wish"> | Date | string
    updatedAt?: DateTimeFilter<"Wish"> | Date | string
    userId?: StringFilter<"Wish"> | string
  }

  export type GoalUpsertWithWhereUniqueWithoutUserInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutUserInput, GoalUncheckedUpdateWithoutUserInput>
    create: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutUserInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutUserInput, GoalUncheckedUpdateWithoutUserInput>
  }

  export type GoalUpdateManyWithWhereWithoutUserInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutUserInput>
  }

  export type GoalScalarWhereInput = {
    AND?: GoalScalarWhereInput | GoalScalarWhereInput[]
    OR?: GoalScalarWhereInput[]
    NOT?: GoalScalarWhereInput | GoalScalarWhereInput[]
    id?: StringFilter<"Goal"> | string
    title?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    type?: StringFilter<"Goal"> | string
    status?: StringFilter<"Goal"> | string
    priority?: StringFilter<"Goal"> | string
    dueDate?: DateTimeNullableFilter<"Goal"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Goal"> | Date | string | null
    progress?: IntFilter<"Goal"> | number
    order?: IntFilter<"Goal"> | number
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    specific?: StringNullableFilter<"Goal"> | string | null
    measurable?: StringNullableFilter<"Goal"> | string | null
    achievable?: StringNullableFilter<"Goal"> | string | null
    relevant?: StringNullableFilter<"Goal"> | string | null
    timeBound?: StringNullableFilter<"Goal"> | string | null
    wishId?: StringFilter<"Goal"> | string
    userId?: StringFilter<"Goal"> | string
  }

  export type GratitudeUpsertWithWhereUniqueWithoutUserInput = {
    where: GratitudeWhereUniqueInput
    update: XOR<GratitudeUpdateWithoutUserInput, GratitudeUncheckedUpdateWithoutUserInput>
    create: XOR<GratitudeCreateWithoutUserInput, GratitudeUncheckedCreateWithoutUserInput>
  }

  export type GratitudeUpdateWithWhereUniqueWithoutUserInput = {
    where: GratitudeWhereUniqueInput
    data: XOR<GratitudeUpdateWithoutUserInput, GratitudeUncheckedUpdateWithoutUserInput>
  }

  export type GratitudeUpdateManyWithWhereWithoutUserInput = {
    where: GratitudeScalarWhereInput
    data: XOR<GratitudeUpdateManyMutationInput, GratitudeUncheckedUpdateManyWithoutUserInput>
  }

  export type GratitudeScalarWhereInput = {
    AND?: GratitudeScalarWhereInput | GratitudeScalarWhereInput[]
    OR?: GratitudeScalarWhereInput[]
    NOT?: GratitudeScalarWhereInput | GratitudeScalarWhereInput[]
    id?: StringFilter<"Gratitude"> | string
    content?: StringFilter<"Gratitude"> | string
    type?: StringFilter<"Gratitude"> | string
    mediaUrl?: StringNullableFilter<"Gratitude"> | string | null
    tags?: StringNullableListFilter<"Gratitude">
    mood?: StringNullableFilter<"Gratitude"> | string | null
    aiQuote?: StringNullableFilter<"Gratitude"> | string | null
    createdAt?: DateTimeFilter<"Gratitude"> | Date | string
    userId?: StringFilter<"Gratitude"> | string
  }

  export type CheckInUpsertWithWhereUniqueWithoutUserInput = {
    where: CheckInWhereUniqueInput
    update: XOR<CheckInUpdateWithoutUserInput, CheckInUncheckedUpdateWithoutUserInput>
    create: XOR<CheckInCreateWithoutUserInput, CheckInUncheckedCreateWithoutUserInput>
  }

  export type CheckInUpdateWithWhereUniqueWithoutUserInput = {
    where: CheckInWhereUniqueInput
    data: XOR<CheckInUpdateWithoutUserInput, CheckInUncheckedUpdateWithoutUserInput>
  }

  export type CheckInUpdateManyWithWhereWithoutUserInput = {
    where: CheckInScalarWhereInput
    data: XOR<CheckInUpdateManyMutationInput, CheckInUncheckedUpdateManyWithoutUserInput>
  }

  export type CheckInScalarWhereInput = {
    AND?: CheckInScalarWhereInput | CheckInScalarWhereInput[]
    OR?: CheckInScalarWhereInput[]
    NOT?: CheckInScalarWhereInput | CheckInScalarWhereInput[]
    id?: StringFilter<"CheckIn"> | string
    type?: StringFilter<"CheckIn"> | string
    content?: StringFilter<"CheckIn"> | string
    mediaUrl?: StringNullableFilter<"CheckIn"> | string | null
    notes?: StringNullableFilter<"CheckIn"> | string | null
    mood?: StringNullableFilter<"CheckIn"> | string | null
    progress?: IntFilter<"CheckIn"> | number
    createdAt?: DateTimeFilter<"CheckIn"> | Date | string
    goalId?: StringFilter<"CheckIn"> | string
    userId?: StringFilter<"CheckIn"> | string
  }

  export type RewardUpsertWithWhereUniqueWithoutUserInput = {
    where: RewardWhereUniqueInput
    update: XOR<RewardUpdateWithoutUserInput, RewardUncheckedUpdateWithoutUserInput>
    create: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput>
  }

  export type RewardUpdateWithWhereUniqueWithoutUserInput = {
    where: RewardWhereUniqueInput
    data: XOR<RewardUpdateWithoutUserInput, RewardUncheckedUpdateWithoutUserInput>
  }

  export type RewardUpdateManyWithWhereWithoutUserInput = {
    where: RewardScalarWhereInput
    data: XOR<RewardUpdateManyMutationInput, RewardUncheckedUpdateManyWithoutUserInput>
  }

  export type RewardScalarWhereInput = {
    AND?: RewardScalarWhereInput | RewardScalarWhereInput[]
    OR?: RewardScalarWhereInput[]
    NOT?: RewardScalarWhereInput | RewardScalarWhereInput[]
    id?: StringFilter<"Reward"> | string
    type?: StringFilter<"Reward"> | string
    title?: StringFilter<"Reward"> | string
    description?: StringFilter<"Reward"> | string
    content?: StringNullableFilter<"Reward"> | string | null
    points?: IntFilter<"Reward"> | number
    category?: StringFilter<"Reward"> | string
    isClaimed?: BoolFilter<"Reward"> | boolean
    claimedAt?: DateTimeNullableFilter<"Reward"> | Date | string | null
    createdAt?: DateTimeFilter<"Reward"> | Date | string
    userId?: StringFilter<"Reward"> | string
  }

  export type GrowthPointUpsertWithWhereUniqueWithoutUserInput = {
    where: GrowthPointWhereUniqueInput
    update: XOR<GrowthPointUpdateWithoutUserInput, GrowthPointUncheckedUpdateWithoutUserInput>
    create: XOR<GrowthPointCreateWithoutUserInput, GrowthPointUncheckedCreateWithoutUserInput>
  }

  export type GrowthPointUpdateWithWhereUniqueWithoutUserInput = {
    where: GrowthPointWhereUniqueInput
    data: XOR<GrowthPointUpdateWithoutUserInput, GrowthPointUncheckedUpdateWithoutUserInput>
  }

  export type GrowthPointUpdateManyWithWhereWithoutUserInput = {
    where: GrowthPointScalarWhereInput
    data: XOR<GrowthPointUpdateManyMutationInput, GrowthPointUncheckedUpdateManyWithoutUserInput>
  }

  export type GrowthPointScalarWhereInput = {
    AND?: GrowthPointScalarWhereInput | GrowthPointScalarWhereInput[]
    OR?: GrowthPointScalarWhereInput[]
    NOT?: GrowthPointScalarWhereInput | GrowthPointScalarWhereInput[]
    id?: StringFilter<"GrowthPoint"> | string
    points?: IntFilter<"GrowthPoint"> | number
    source?: StringFilter<"GrowthPoint"> | string
    sourceId?: StringNullableFilter<"GrowthPoint"> | string | null
    createdAt?: DateTimeFilter<"GrowthPoint"> | Date | string
    userId?: StringFilter<"GrowthPoint"> | string
  }

  export type VisionBoardUpsertWithWhereUniqueWithoutUserInput = {
    where: VisionBoardWhereUniqueInput
    update: XOR<VisionBoardUpdateWithoutUserInput, VisionBoardUncheckedUpdateWithoutUserInput>
    create: XOR<VisionBoardCreateWithoutUserInput, VisionBoardUncheckedCreateWithoutUserInput>
  }

  export type VisionBoardUpdateWithWhereUniqueWithoutUserInput = {
    where: VisionBoardWhereUniqueInput
    data: XOR<VisionBoardUpdateWithoutUserInput, VisionBoardUncheckedUpdateWithoutUserInput>
  }

  export type VisionBoardUpdateManyWithWhereWithoutUserInput = {
    where: VisionBoardScalarWhereInput
    data: XOR<VisionBoardUpdateManyMutationInput, VisionBoardUncheckedUpdateManyWithoutUserInput>
  }

  export type VisionBoardScalarWhereInput = {
    AND?: VisionBoardScalarWhereInput | VisionBoardScalarWhereInput[]
    OR?: VisionBoardScalarWhereInput[]
    NOT?: VisionBoardScalarWhereInput | VisionBoardScalarWhereInput[]
    id?: StringFilter<"VisionBoard"> | string
    title?: StringFilter<"VisionBoard"> | string
    description?: StringNullableFilter<"VisionBoard"> | string | null
    isPublic?: BoolFilter<"VisionBoard"> | boolean
    layout?: StringFilter<"VisionBoard"> | string
    createdAt?: DateTimeFilter<"VisionBoard"> | Date | string
    updatedAt?: DateTimeFilter<"VisionBoard"> | Date | string
    userId?: StringFilter<"VisionBoard"> | string
  }

  export type UserCreateWithoutWishesInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalCreateNestedManyWithoutUserInput
    gratitudes?: GratitudeCreateNestedManyWithoutUserInput
    checkIns?: CheckInCreateNestedManyWithoutUserInput
    rewards?: RewardCreateNestedManyWithoutUserInput
    growthPoints?: GrowthPointCreateNestedManyWithoutUserInput
    visionBoards?: VisionBoardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWishesInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    gratitudes?: GratitudeUncheckedCreateNestedManyWithoutUserInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutUserInput
    rewards?: RewardUncheckedCreateNestedManyWithoutUserInput
    growthPoints?: GrowthPointUncheckedCreateNestedManyWithoutUserInput
    visionBoards?: VisionBoardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWishesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWishesInput, UserUncheckedCreateWithoutWishesInput>
  }

  export type GoalCreateWithoutWishInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    status?: string
    priority?: string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    progress?: number
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    specific?: string | null
    measurable?: string | null
    achievable?: string | null
    relevant?: string | null
    timeBound?: string | null
    user: UserCreateNestedOneWithoutGoalsInput
    checkIns?: CheckInCreateNestedManyWithoutGoalInput
  }

  export type GoalUncheckedCreateWithoutWishInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    status?: string
    priority?: string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    progress?: number
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    specific?: string | null
    measurable?: string | null
    achievable?: string | null
    relevant?: string | null
    timeBound?: string | null
    userId: string
    checkIns?: CheckInUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalCreateOrConnectWithoutWishInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutWishInput, GoalUncheckedCreateWithoutWishInput>
  }

  export type GoalCreateManyWishInputEnvelope = {
    data: GoalCreateManyWishInput | GoalCreateManyWishInput[]
    skipDuplicates?: boolean
  }

  export type VisionBoardItemCreateWithoutWishInput = {
    id?: string
    type: string
    title?: string | null
    content: string
    imageUrl?: string | null
    positionX?: number
    positionY?: number
    width?: number
    height?: number
    order: number
    createdAt?: Date | string
    visionBoard: VisionBoardCreateNestedOneWithoutItemsInput
  }

  export type VisionBoardItemUncheckedCreateWithoutWishInput = {
    id?: string
    type: string
    title?: string | null
    content: string
    imageUrl?: string | null
    positionX?: number
    positionY?: number
    width?: number
    height?: number
    order: number
    createdAt?: Date | string
    visionBoardId: string
  }

  export type VisionBoardItemCreateOrConnectWithoutWishInput = {
    where: VisionBoardItemWhereUniqueInput
    create: XOR<VisionBoardItemCreateWithoutWishInput, VisionBoardItemUncheckedCreateWithoutWishInput>
  }

  export type VisionBoardItemCreateManyWishInputEnvelope = {
    data: VisionBoardItemCreateManyWishInput | VisionBoardItemCreateManyWishInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWishesInput = {
    update: XOR<UserUpdateWithoutWishesInput, UserUncheckedUpdateWithoutWishesInput>
    create: XOR<UserCreateWithoutWishesInput, UserUncheckedCreateWithoutWishesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWishesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWishesInput, UserUncheckedUpdateWithoutWishesInput>
  }

  export type UserUpdateWithoutWishesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUpdateManyWithoutUserNestedInput
    gratitudes?: GratitudeUpdateManyWithoutUserNestedInput
    checkIns?: CheckInUpdateManyWithoutUserNestedInput
    rewards?: RewardUpdateManyWithoutUserNestedInput
    growthPoints?: GrowthPointUpdateManyWithoutUserNestedInput
    visionBoards?: VisionBoardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWishesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    gratitudes?: GratitudeUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutUserNestedInput
    rewards?: RewardUncheckedUpdateManyWithoutUserNestedInput
    growthPoints?: GrowthPointUncheckedUpdateManyWithoutUserNestedInput
    visionBoards?: VisionBoardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GoalUpsertWithWhereUniqueWithoutWishInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutWishInput, GoalUncheckedUpdateWithoutWishInput>
    create: XOR<GoalCreateWithoutWishInput, GoalUncheckedCreateWithoutWishInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutWishInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutWishInput, GoalUncheckedUpdateWithoutWishInput>
  }

  export type GoalUpdateManyWithWhereWithoutWishInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutWishInput>
  }

  export type VisionBoardItemUpsertWithWhereUniqueWithoutWishInput = {
    where: VisionBoardItemWhereUniqueInput
    update: XOR<VisionBoardItemUpdateWithoutWishInput, VisionBoardItemUncheckedUpdateWithoutWishInput>
    create: XOR<VisionBoardItemCreateWithoutWishInput, VisionBoardItemUncheckedCreateWithoutWishInput>
  }

  export type VisionBoardItemUpdateWithWhereUniqueWithoutWishInput = {
    where: VisionBoardItemWhereUniqueInput
    data: XOR<VisionBoardItemUpdateWithoutWishInput, VisionBoardItemUncheckedUpdateWithoutWishInput>
  }

  export type VisionBoardItemUpdateManyWithWhereWithoutWishInput = {
    where: VisionBoardItemScalarWhereInput
    data: XOR<VisionBoardItemUpdateManyMutationInput, VisionBoardItemUncheckedUpdateManyWithoutWishInput>
  }

  export type VisionBoardItemScalarWhereInput = {
    AND?: VisionBoardItemScalarWhereInput | VisionBoardItemScalarWhereInput[]
    OR?: VisionBoardItemScalarWhereInput[]
    NOT?: VisionBoardItemScalarWhereInput | VisionBoardItemScalarWhereInput[]
    id?: StringFilter<"VisionBoardItem"> | string
    type?: StringFilter<"VisionBoardItem"> | string
    title?: StringNullableFilter<"VisionBoardItem"> | string | null
    content?: StringFilter<"VisionBoardItem"> | string
    imageUrl?: StringNullableFilter<"VisionBoardItem"> | string | null
    positionX?: IntFilter<"VisionBoardItem"> | number
    positionY?: IntFilter<"VisionBoardItem"> | number
    width?: IntFilter<"VisionBoardItem"> | number
    height?: IntFilter<"VisionBoardItem"> | number
    order?: IntFilter<"VisionBoardItem"> | number
    createdAt?: DateTimeFilter<"VisionBoardItem"> | Date | string
    visionBoardId?: StringFilter<"VisionBoardItem"> | string
    wishId?: StringNullableFilter<"VisionBoardItem"> | string | null
  }

  export type WishCreateWithoutGoalsInput = {
    id?: string
    title: string
    description?: string | null
    category: string
    isOptimized?: boolean
    optimizedText?: string | null
    keywords?: WishCreatekeywordsInput | string[]
    status?: string
    priority?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWishesInput
    visionBoardItems?: VisionBoardItemCreateNestedManyWithoutWishInput
  }

  export type WishUncheckedCreateWithoutGoalsInput = {
    id?: string
    title: string
    description?: string | null
    category: string
    isOptimized?: boolean
    optimizedText?: string | null
    keywords?: WishCreatekeywordsInput | string[]
    status?: string
    priority?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    visionBoardItems?: VisionBoardItemUncheckedCreateNestedManyWithoutWishInput
  }

  export type WishCreateOrConnectWithoutGoalsInput = {
    where: WishWhereUniqueInput
    create: XOR<WishCreateWithoutGoalsInput, WishUncheckedCreateWithoutGoalsInput>
  }

  export type UserCreateWithoutGoalsInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wishes?: WishCreateNestedManyWithoutUserInput
    gratitudes?: GratitudeCreateNestedManyWithoutUserInput
    checkIns?: CheckInCreateNestedManyWithoutUserInput
    rewards?: RewardCreateNestedManyWithoutUserInput
    growthPoints?: GrowthPointCreateNestedManyWithoutUserInput
    visionBoards?: VisionBoardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGoalsInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wishes?: WishUncheckedCreateNestedManyWithoutUserInput
    gratitudes?: GratitudeUncheckedCreateNestedManyWithoutUserInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutUserInput
    rewards?: RewardUncheckedCreateNestedManyWithoutUserInput
    growthPoints?: GrowthPointUncheckedCreateNestedManyWithoutUserInput
    visionBoards?: VisionBoardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGoalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
  }

  export type CheckInCreateWithoutGoalInput = {
    id?: string
    type: string
    content: string
    mediaUrl?: string | null
    notes?: string | null
    mood?: string | null
    progress?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCheckInsInput
  }

  export type CheckInUncheckedCreateWithoutGoalInput = {
    id?: string
    type: string
    content: string
    mediaUrl?: string | null
    notes?: string | null
    mood?: string | null
    progress?: number
    createdAt?: Date | string
    userId: string
  }

  export type CheckInCreateOrConnectWithoutGoalInput = {
    where: CheckInWhereUniqueInput
    create: XOR<CheckInCreateWithoutGoalInput, CheckInUncheckedCreateWithoutGoalInput>
  }

  export type CheckInCreateManyGoalInputEnvelope = {
    data: CheckInCreateManyGoalInput | CheckInCreateManyGoalInput[]
    skipDuplicates?: boolean
  }

  export type WishUpsertWithoutGoalsInput = {
    update: XOR<WishUpdateWithoutGoalsInput, WishUncheckedUpdateWithoutGoalsInput>
    create: XOR<WishCreateWithoutGoalsInput, WishUncheckedCreateWithoutGoalsInput>
    where?: WishWhereInput
  }

  export type WishUpdateToOneWithWhereWithoutGoalsInput = {
    where?: WishWhereInput
    data: XOR<WishUpdateWithoutGoalsInput, WishUncheckedUpdateWithoutGoalsInput>
  }

  export type WishUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isOptimized?: BoolFieldUpdateOperationsInput | boolean
    optimizedText?: NullableStringFieldUpdateOperationsInput | string | null
    keywords?: WishUpdatekeywordsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWishesNestedInput
    visionBoardItems?: VisionBoardItemUpdateManyWithoutWishNestedInput
  }

  export type WishUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isOptimized?: BoolFieldUpdateOperationsInput | boolean
    optimizedText?: NullableStringFieldUpdateOperationsInput | string | null
    keywords?: WishUpdatekeywordsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    visionBoardItems?: VisionBoardItemUncheckedUpdateManyWithoutWishNestedInput
  }

  export type UserUpsertWithoutGoalsInput = {
    update: XOR<UserUpdateWithoutGoalsInput, UserUncheckedUpdateWithoutGoalsInput>
    create: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGoalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGoalsInput, UserUncheckedUpdateWithoutGoalsInput>
  }

  export type UserUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishes?: WishUpdateManyWithoutUserNestedInput
    gratitudes?: GratitudeUpdateManyWithoutUserNestedInput
    checkIns?: CheckInUpdateManyWithoutUserNestedInput
    rewards?: RewardUpdateManyWithoutUserNestedInput
    growthPoints?: GrowthPointUpdateManyWithoutUserNestedInput
    visionBoards?: VisionBoardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishes?: WishUncheckedUpdateManyWithoutUserNestedInput
    gratitudes?: GratitudeUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutUserNestedInput
    rewards?: RewardUncheckedUpdateManyWithoutUserNestedInput
    growthPoints?: GrowthPointUncheckedUpdateManyWithoutUserNestedInput
    visionBoards?: VisionBoardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CheckInUpsertWithWhereUniqueWithoutGoalInput = {
    where: CheckInWhereUniqueInput
    update: XOR<CheckInUpdateWithoutGoalInput, CheckInUncheckedUpdateWithoutGoalInput>
    create: XOR<CheckInCreateWithoutGoalInput, CheckInUncheckedCreateWithoutGoalInput>
  }

  export type CheckInUpdateWithWhereUniqueWithoutGoalInput = {
    where: CheckInWhereUniqueInput
    data: XOR<CheckInUpdateWithoutGoalInput, CheckInUncheckedUpdateWithoutGoalInput>
  }

  export type CheckInUpdateManyWithWhereWithoutGoalInput = {
    where: CheckInScalarWhereInput
    data: XOR<CheckInUpdateManyMutationInput, CheckInUncheckedUpdateManyWithoutGoalInput>
  }

  export type GoalCreateWithoutCheckInsInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    status?: string
    priority?: string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    progress?: number
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    specific?: string | null
    measurable?: string | null
    achievable?: string | null
    relevant?: string | null
    timeBound?: string | null
    wish: WishCreateNestedOneWithoutGoalsInput
    user: UserCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateWithoutCheckInsInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    status?: string
    priority?: string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    progress?: number
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    specific?: string | null
    measurable?: string | null
    achievable?: string | null
    relevant?: string | null
    timeBound?: string | null
    wishId: string
    userId: string
  }

  export type GoalCreateOrConnectWithoutCheckInsInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutCheckInsInput, GoalUncheckedCreateWithoutCheckInsInput>
  }

  export type UserCreateWithoutCheckInsInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wishes?: WishCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    gratitudes?: GratitudeCreateNestedManyWithoutUserInput
    rewards?: RewardCreateNestedManyWithoutUserInput
    growthPoints?: GrowthPointCreateNestedManyWithoutUserInput
    visionBoards?: VisionBoardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCheckInsInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wishes?: WishUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    gratitudes?: GratitudeUncheckedCreateNestedManyWithoutUserInput
    rewards?: RewardUncheckedCreateNestedManyWithoutUserInput
    growthPoints?: GrowthPointUncheckedCreateNestedManyWithoutUserInput
    visionBoards?: VisionBoardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCheckInsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCheckInsInput, UserUncheckedCreateWithoutCheckInsInput>
  }

  export type GoalUpsertWithoutCheckInsInput = {
    update: XOR<GoalUpdateWithoutCheckInsInput, GoalUncheckedUpdateWithoutCheckInsInput>
    create: XOR<GoalCreateWithoutCheckInsInput, GoalUncheckedCreateWithoutCheckInsInput>
    where?: GoalWhereInput
  }

  export type GoalUpdateToOneWithWhereWithoutCheckInsInput = {
    where?: GoalWhereInput
    data: XOR<GoalUpdateWithoutCheckInsInput, GoalUncheckedUpdateWithoutCheckInsInput>
  }

  export type GoalUpdateWithoutCheckInsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specific?: NullableStringFieldUpdateOperationsInput | string | null
    measurable?: NullableStringFieldUpdateOperationsInput | string | null
    achievable?: NullableStringFieldUpdateOperationsInput | string | null
    relevant?: NullableStringFieldUpdateOperationsInput | string | null
    timeBound?: NullableStringFieldUpdateOperationsInput | string | null
    wish?: WishUpdateOneRequiredWithoutGoalsNestedInput
    user?: UserUpdateOneRequiredWithoutGoalsNestedInput
  }

  export type GoalUncheckedUpdateWithoutCheckInsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specific?: NullableStringFieldUpdateOperationsInput | string | null
    measurable?: NullableStringFieldUpdateOperationsInput | string | null
    achievable?: NullableStringFieldUpdateOperationsInput | string | null
    relevant?: NullableStringFieldUpdateOperationsInput | string | null
    timeBound?: NullableStringFieldUpdateOperationsInput | string | null
    wishId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutCheckInsInput = {
    update: XOR<UserUpdateWithoutCheckInsInput, UserUncheckedUpdateWithoutCheckInsInput>
    create: XOR<UserCreateWithoutCheckInsInput, UserUncheckedCreateWithoutCheckInsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCheckInsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCheckInsInput, UserUncheckedUpdateWithoutCheckInsInput>
  }

  export type UserUpdateWithoutCheckInsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishes?: WishUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    gratitudes?: GratitudeUpdateManyWithoutUserNestedInput
    rewards?: RewardUpdateManyWithoutUserNestedInput
    growthPoints?: GrowthPointUpdateManyWithoutUserNestedInput
    visionBoards?: VisionBoardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCheckInsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishes?: WishUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    gratitudes?: GratitudeUncheckedUpdateManyWithoutUserNestedInput
    rewards?: RewardUncheckedUpdateManyWithoutUserNestedInput
    growthPoints?: GrowthPointUncheckedUpdateManyWithoutUserNestedInput
    visionBoards?: VisionBoardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutGratitudesInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wishes?: WishCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    checkIns?: CheckInCreateNestedManyWithoutUserInput
    rewards?: RewardCreateNestedManyWithoutUserInput
    growthPoints?: GrowthPointCreateNestedManyWithoutUserInput
    visionBoards?: VisionBoardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGratitudesInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wishes?: WishUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutUserInput
    rewards?: RewardUncheckedCreateNestedManyWithoutUserInput
    growthPoints?: GrowthPointUncheckedCreateNestedManyWithoutUserInput
    visionBoards?: VisionBoardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGratitudesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGratitudesInput, UserUncheckedCreateWithoutGratitudesInput>
  }

  export type UserUpsertWithoutGratitudesInput = {
    update: XOR<UserUpdateWithoutGratitudesInput, UserUncheckedUpdateWithoutGratitudesInput>
    create: XOR<UserCreateWithoutGratitudesInput, UserUncheckedCreateWithoutGratitudesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGratitudesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGratitudesInput, UserUncheckedUpdateWithoutGratitudesInput>
  }

  export type UserUpdateWithoutGratitudesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishes?: WishUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    checkIns?: CheckInUpdateManyWithoutUserNestedInput
    rewards?: RewardUpdateManyWithoutUserNestedInput
    growthPoints?: GrowthPointUpdateManyWithoutUserNestedInput
    visionBoards?: VisionBoardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGratitudesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishes?: WishUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutUserNestedInput
    rewards?: RewardUncheckedUpdateManyWithoutUserNestedInput
    growthPoints?: GrowthPointUncheckedUpdateManyWithoutUserNestedInput
    visionBoards?: VisionBoardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutVisionBoardsInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wishes?: WishCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    gratitudes?: GratitudeCreateNestedManyWithoutUserInput
    checkIns?: CheckInCreateNestedManyWithoutUserInput
    rewards?: RewardCreateNestedManyWithoutUserInput
    growthPoints?: GrowthPointCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVisionBoardsInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wishes?: WishUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    gratitudes?: GratitudeUncheckedCreateNestedManyWithoutUserInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutUserInput
    rewards?: RewardUncheckedCreateNestedManyWithoutUserInput
    growthPoints?: GrowthPointUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVisionBoardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVisionBoardsInput, UserUncheckedCreateWithoutVisionBoardsInput>
  }

  export type VisionBoardItemCreateWithoutVisionBoardInput = {
    id?: string
    type: string
    title?: string | null
    content: string
    imageUrl?: string | null
    positionX?: number
    positionY?: number
    width?: number
    height?: number
    order: number
    createdAt?: Date | string
    wish?: WishCreateNestedOneWithoutVisionBoardItemsInput
  }

  export type VisionBoardItemUncheckedCreateWithoutVisionBoardInput = {
    id?: string
    type: string
    title?: string | null
    content: string
    imageUrl?: string | null
    positionX?: number
    positionY?: number
    width?: number
    height?: number
    order: number
    createdAt?: Date | string
    wishId?: string | null
  }

  export type VisionBoardItemCreateOrConnectWithoutVisionBoardInput = {
    where: VisionBoardItemWhereUniqueInput
    create: XOR<VisionBoardItemCreateWithoutVisionBoardInput, VisionBoardItemUncheckedCreateWithoutVisionBoardInput>
  }

  export type VisionBoardItemCreateManyVisionBoardInputEnvelope = {
    data: VisionBoardItemCreateManyVisionBoardInput | VisionBoardItemCreateManyVisionBoardInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutVisionBoardsInput = {
    update: XOR<UserUpdateWithoutVisionBoardsInput, UserUncheckedUpdateWithoutVisionBoardsInput>
    create: XOR<UserCreateWithoutVisionBoardsInput, UserUncheckedCreateWithoutVisionBoardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVisionBoardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVisionBoardsInput, UserUncheckedUpdateWithoutVisionBoardsInput>
  }

  export type UserUpdateWithoutVisionBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishes?: WishUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    gratitudes?: GratitudeUpdateManyWithoutUserNestedInput
    checkIns?: CheckInUpdateManyWithoutUserNestedInput
    rewards?: RewardUpdateManyWithoutUserNestedInput
    growthPoints?: GrowthPointUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVisionBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishes?: WishUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    gratitudes?: GratitudeUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutUserNestedInput
    rewards?: RewardUncheckedUpdateManyWithoutUserNestedInput
    growthPoints?: GrowthPointUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VisionBoardItemUpsertWithWhereUniqueWithoutVisionBoardInput = {
    where: VisionBoardItemWhereUniqueInput
    update: XOR<VisionBoardItemUpdateWithoutVisionBoardInput, VisionBoardItemUncheckedUpdateWithoutVisionBoardInput>
    create: XOR<VisionBoardItemCreateWithoutVisionBoardInput, VisionBoardItemUncheckedCreateWithoutVisionBoardInput>
  }

  export type VisionBoardItemUpdateWithWhereUniqueWithoutVisionBoardInput = {
    where: VisionBoardItemWhereUniqueInput
    data: XOR<VisionBoardItemUpdateWithoutVisionBoardInput, VisionBoardItemUncheckedUpdateWithoutVisionBoardInput>
  }

  export type VisionBoardItemUpdateManyWithWhereWithoutVisionBoardInput = {
    where: VisionBoardItemScalarWhereInput
    data: XOR<VisionBoardItemUpdateManyMutationInput, VisionBoardItemUncheckedUpdateManyWithoutVisionBoardInput>
  }

  export type VisionBoardCreateWithoutItemsInput = {
    id?: string
    title: string
    description?: string | null
    isPublic?: boolean
    layout: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutVisionBoardsInput
  }

  export type VisionBoardUncheckedCreateWithoutItemsInput = {
    id?: string
    title: string
    description?: string | null
    isPublic?: boolean
    layout: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type VisionBoardCreateOrConnectWithoutItemsInput = {
    where: VisionBoardWhereUniqueInput
    create: XOR<VisionBoardCreateWithoutItemsInput, VisionBoardUncheckedCreateWithoutItemsInput>
  }

  export type WishCreateWithoutVisionBoardItemsInput = {
    id?: string
    title: string
    description?: string | null
    category: string
    isOptimized?: boolean
    optimizedText?: string | null
    keywords?: WishCreatekeywordsInput | string[]
    status?: string
    priority?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWishesInput
    goals?: GoalCreateNestedManyWithoutWishInput
  }

  export type WishUncheckedCreateWithoutVisionBoardItemsInput = {
    id?: string
    title: string
    description?: string | null
    category: string
    isOptimized?: boolean
    optimizedText?: string | null
    keywords?: WishCreatekeywordsInput | string[]
    status?: string
    priority?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    goals?: GoalUncheckedCreateNestedManyWithoutWishInput
  }

  export type WishCreateOrConnectWithoutVisionBoardItemsInput = {
    where: WishWhereUniqueInput
    create: XOR<WishCreateWithoutVisionBoardItemsInput, WishUncheckedCreateWithoutVisionBoardItemsInput>
  }

  export type VisionBoardUpsertWithoutItemsInput = {
    update: XOR<VisionBoardUpdateWithoutItemsInput, VisionBoardUncheckedUpdateWithoutItemsInput>
    create: XOR<VisionBoardCreateWithoutItemsInput, VisionBoardUncheckedCreateWithoutItemsInput>
    where?: VisionBoardWhereInput
  }

  export type VisionBoardUpdateToOneWithWhereWithoutItemsInput = {
    where?: VisionBoardWhereInput
    data: XOR<VisionBoardUpdateWithoutItemsInput, VisionBoardUncheckedUpdateWithoutItemsInput>
  }

  export type VisionBoardUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    layout?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVisionBoardsNestedInput
  }

  export type VisionBoardUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    layout?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type WishUpsertWithoutVisionBoardItemsInput = {
    update: XOR<WishUpdateWithoutVisionBoardItemsInput, WishUncheckedUpdateWithoutVisionBoardItemsInput>
    create: XOR<WishCreateWithoutVisionBoardItemsInput, WishUncheckedCreateWithoutVisionBoardItemsInput>
    where?: WishWhereInput
  }

  export type WishUpdateToOneWithWhereWithoutVisionBoardItemsInput = {
    where?: WishWhereInput
    data: XOR<WishUpdateWithoutVisionBoardItemsInput, WishUncheckedUpdateWithoutVisionBoardItemsInput>
  }

  export type WishUpdateWithoutVisionBoardItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isOptimized?: BoolFieldUpdateOperationsInput | boolean
    optimizedText?: NullableStringFieldUpdateOperationsInput | string | null
    keywords?: WishUpdatekeywordsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWishesNestedInput
    goals?: GoalUpdateManyWithoutWishNestedInput
  }

  export type WishUncheckedUpdateWithoutVisionBoardItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isOptimized?: BoolFieldUpdateOperationsInput | boolean
    optimizedText?: NullableStringFieldUpdateOperationsInput | string | null
    keywords?: WishUpdatekeywordsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    goals?: GoalUncheckedUpdateManyWithoutWishNestedInput
  }

  export type UserCreateWithoutRewardsInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wishes?: WishCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    gratitudes?: GratitudeCreateNestedManyWithoutUserInput
    checkIns?: CheckInCreateNestedManyWithoutUserInput
    growthPoints?: GrowthPointCreateNestedManyWithoutUserInput
    visionBoards?: VisionBoardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRewardsInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wishes?: WishUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    gratitudes?: GratitudeUncheckedCreateNestedManyWithoutUserInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutUserInput
    growthPoints?: GrowthPointUncheckedCreateNestedManyWithoutUserInput
    visionBoards?: VisionBoardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRewardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRewardsInput, UserUncheckedCreateWithoutRewardsInput>
  }

  export type UserUpsertWithoutRewardsInput = {
    update: XOR<UserUpdateWithoutRewardsInput, UserUncheckedUpdateWithoutRewardsInput>
    create: XOR<UserCreateWithoutRewardsInput, UserUncheckedCreateWithoutRewardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRewardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRewardsInput, UserUncheckedUpdateWithoutRewardsInput>
  }

  export type UserUpdateWithoutRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishes?: WishUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    gratitudes?: GratitudeUpdateManyWithoutUserNestedInput
    checkIns?: CheckInUpdateManyWithoutUserNestedInput
    growthPoints?: GrowthPointUpdateManyWithoutUserNestedInput
    visionBoards?: VisionBoardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishes?: WishUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    gratitudes?: GratitudeUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutUserNestedInput
    growthPoints?: GrowthPointUncheckedUpdateManyWithoutUserNestedInput
    visionBoards?: VisionBoardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutGrowthPointsInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wishes?: WishCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    gratitudes?: GratitudeCreateNestedManyWithoutUserInput
    checkIns?: CheckInCreateNestedManyWithoutUserInput
    rewards?: RewardCreateNestedManyWithoutUserInput
    visionBoards?: VisionBoardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGrowthPointsInput = {
    id?: string
    email: string
    username?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wishes?: WishUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    gratitudes?: GratitudeUncheckedCreateNestedManyWithoutUserInput
    checkIns?: CheckInUncheckedCreateNestedManyWithoutUserInput
    rewards?: RewardUncheckedCreateNestedManyWithoutUserInput
    visionBoards?: VisionBoardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGrowthPointsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGrowthPointsInput, UserUncheckedCreateWithoutGrowthPointsInput>
  }

  export type UserUpsertWithoutGrowthPointsInput = {
    update: XOR<UserUpdateWithoutGrowthPointsInput, UserUncheckedUpdateWithoutGrowthPointsInput>
    create: XOR<UserCreateWithoutGrowthPointsInput, UserUncheckedCreateWithoutGrowthPointsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGrowthPointsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGrowthPointsInput, UserUncheckedUpdateWithoutGrowthPointsInput>
  }

  export type UserUpdateWithoutGrowthPointsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishes?: WishUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    gratitudes?: GratitudeUpdateManyWithoutUserNestedInput
    checkIns?: CheckInUpdateManyWithoutUserNestedInput
    rewards?: RewardUpdateManyWithoutUserNestedInput
    visionBoards?: VisionBoardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGrowthPointsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishes?: WishUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    gratitudes?: GratitudeUncheckedUpdateManyWithoutUserNestedInput
    checkIns?: CheckInUncheckedUpdateManyWithoutUserNestedInput
    rewards?: RewardUncheckedUpdateManyWithoutUserNestedInput
    visionBoards?: VisionBoardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WishCreateManyUserInput = {
    id?: string
    title: string
    description?: string | null
    category: string
    isOptimized?: boolean
    optimizedText?: string | null
    keywords?: WishCreatekeywordsInput | string[]
    status?: string
    priority?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalCreateManyUserInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    status?: string
    priority?: string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    progress?: number
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    specific?: string | null
    measurable?: string | null
    achievable?: string | null
    relevant?: string | null
    timeBound?: string | null
    wishId: string
  }

  export type GratitudeCreateManyUserInput = {
    id?: string
    content: string
    type?: string
    mediaUrl?: string | null
    tags?: GratitudeCreatetagsInput | string[]
    mood?: string | null
    aiQuote?: string | null
    createdAt?: Date | string
  }

  export type CheckInCreateManyUserInput = {
    id?: string
    type: string
    content: string
    mediaUrl?: string | null
    notes?: string | null
    mood?: string | null
    progress?: number
    createdAt?: Date | string
    goalId: string
  }

  export type RewardCreateManyUserInput = {
    id?: string
    type: string
    title: string
    description: string
    content?: string | null
    points?: number
    category: string
    isClaimed?: boolean
    claimedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type GrowthPointCreateManyUserInput = {
    id?: string
    points: number
    source: string
    sourceId?: string | null
    createdAt?: Date | string
  }

  export type VisionBoardCreateManyUserInput = {
    id?: string
    title: string
    description?: string | null
    isPublic?: boolean
    layout: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WishUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isOptimized?: BoolFieldUpdateOperationsInput | boolean
    optimizedText?: NullableStringFieldUpdateOperationsInput | string | null
    keywords?: WishUpdatekeywordsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUpdateManyWithoutWishNestedInput
    visionBoardItems?: VisionBoardItemUpdateManyWithoutWishNestedInput
  }

  export type WishUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isOptimized?: BoolFieldUpdateOperationsInput | boolean
    optimizedText?: NullableStringFieldUpdateOperationsInput | string | null
    keywords?: WishUpdatekeywordsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUncheckedUpdateManyWithoutWishNestedInput
    visionBoardItems?: VisionBoardItemUncheckedUpdateManyWithoutWishNestedInput
  }

  export type WishUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isOptimized?: BoolFieldUpdateOperationsInput | boolean
    optimizedText?: NullableStringFieldUpdateOperationsInput | string | null
    keywords?: WishUpdatekeywordsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specific?: NullableStringFieldUpdateOperationsInput | string | null
    measurable?: NullableStringFieldUpdateOperationsInput | string | null
    achievable?: NullableStringFieldUpdateOperationsInput | string | null
    relevant?: NullableStringFieldUpdateOperationsInput | string | null
    timeBound?: NullableStringFieldUpdateOperationsInput | string | null
    wish?: WishUpdateOneRequiredWithoutGoalsNestedInput
    checkIns?: CheckInUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specific?: NullableStringFieldUpdateOperationsInput | string | null
    measurable?: NullableStringFieldUpdateOperationsInput | string | null
    achievable?: NullableStringFieldUpdateOperationsInput | string | null
    relevant?: NullableStringFieldUpdateOperationsInput | string | null
    timeBound?: NullableStringFieldUpdateOperationsInput | string | null
    wishId?: StringFieldUpdateOperationsInput | string
    checkIns?: CheckInUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specific?: NullableStringFieldUpdateOperationsInput | string | null
    measurable?: NullableStringFieldUpdateOperationsInput | string | null
    achievable?: NullableStringFieldUpdateOperationsInput | string | null
    relevant?: NullableStringFieldUpdateOperationsInput | string | null
    timeBound?: NullableStringFieldUpdateOperationsInput | string | null
    wishId?: StringFieldUpdateOperationsInput | string
  }

  export type GratitudeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: GratitudeUpdatetagsInput | string[]
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    aiQuote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GratitudeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: GratitudeUpdatetagsInput | string[]
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    aiQuote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GratitudeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: GratitudeUpdatetagsInput | string[]
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    aiQuote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckInUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneRequiredWithoutCheckInsNestedInput
  }

  export type CheckInUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goalId?: StringFieldUpdateOperationsInput | string
  }

  export type CheckInUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goalId?: StringFieldUpdateOperationsInput | string
  }

  export type RewardUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    isClaimed?: BoolFieldUpdateOperationsInput | boolean
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    isClaimed?: BoolFieldUpdateOperationsInput | boolean
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    isClaimed?: BoolFieldUpdateOperationsInput | boolean
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrowthPointUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrowthPointUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrowthPointUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisionBoardUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    layout?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: VisionBoardItemUpdateManyWithoutVisionBoardNestedInput
  }

  export type VisionBoardUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    layout?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: VisionBoardItemUncheckedUpdateManyWithoutVisionBoardNestedInput
  }

  export type VisionBoardUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    layout?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalCreateManyWishInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    status?: string
    priority?: string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    progress?: number
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    specific?: string | null
    measurable?: string | null
    achievable?: string | null
    relevant?: string | null
    timeBound?: string | null
    userId: string
  }

  export type VisionBoardItemCreateManyWishInput = {
    id?: string
    type: string
    title?: string | null
    content: string
    imageUrl?: string | null
    positionX?: number
    positionY?: number
    width?: number
    height?: number
    order: number
    createdAt?: Date | string
    visionBoardId: string
  }

  export type GoalUpdateWithoutWishInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specific?: NullableStringFieldUpdateOperationsInput | string | null
    measurable?: NullableStringFieldUpdateOperationsInput | string | null
    achievable?: NullableStringFieldUpdateOperationsInput | string | null
    relevant?: NullableStringFieldUpdateOperationsInput | string | null
    timeBound?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutGoalsNestedInput
    checkIns?: CheckInUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateWithoutWishInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specific?: NullableStringFieldUpdateOperationsInput | string | null
    measurable?: NullableStringFieldUpdateOperationsInput | string | null
    achievable?: NullableStringFieldUpdateOperationsInput | string | null
    relevant?: NullableStringFieldUpdateOperationsInput | string | null
    timeBound?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    checkIns?: CheckInUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateManyWithoutWishInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specific?: NullableStringFieldUpdateOperationsInput | string | null
    measurable?: NullableStringFieldUpdateOperationsInput | string | null
    achievable?: NullableStringFieldUpdateOperationsInput | string | null
    relevant?: NullableStringFieldUpdateOperationsInput | string | null
    timeBound?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type VisionBoardItemUpdateWithoutWishInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visionBoard?: VisionBoardUpdateOneRequiredWithoutItemsNestedInput
  }

  export type VisionBoardItemUncheckedUpdateWithoutWishInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visionBoardId?: StringFieldUpdateOperationsInput | string
  }

  export type VisionBoardItemUncheckedUpdateManyWithoutWishInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visionBoardId?: StringFieldUpdateOperationsInput | string
  }

  export type CheckInCreateManyGoalInput = {
    id?: string
    type: string
    content: string
    mediaUrl?: string | null
    notes?: string | null
    mood?: string | null
    progress?: number
    createdAt?: Date | string
    userId: string
  }

  export type CheckInUpdateWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCheckInsNestedInput
  }

  export type CheckInUncheckedUpdateWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CheckInUncheckedUpdateManyWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mood?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type VisionBoardItemCreateManyVisionBoardInput = {
    id?: string
    type: string
    title?: string | null
    content: string
    imageUrl?: string | null
    positionX?: number
    positionY?: number
    width?: number
    height?: number
    order: number
    createdAt?: Date | string
    wishId?: string | null
  }

  export type VisionBoardItemUpdateWithoutVisionBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wish?: WishUpdateOneWithoutVisionBoardItemsNestedInput
  }

  export type VisionBoardItemUncheckedUpdateWithoutVisionBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VisionBoardItemUncheckedUpdateManyWithoutVisionBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wishId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WishCountOutputTypeDefaultArgs instead
     */
    export type WishCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WishCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GoalCountOutputTypeDefaultArgs instead
     */
    export type GoalCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GoalCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VisionBoardCountOutputTypeDefaultArgs instead
     */
    export type VisionBoardCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VisionBoardCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WishDefaultArgs instead
     */
    export type WishArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WishDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GoalDefaultArgs instead
     */
    export type GoalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GoalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CheckInDefaultArgs instead
     */
    export type CheckInArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CheckInDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GratitudeDefaultArgs instead
     */
    export type GratitudeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GratitudeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VisionBoardDefaultArgs instead
     */
    export type VisionBoardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VisionBoardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VisionBoardItemDefaultArgs instead
     */
    export type VisionBoardItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VisionBoardItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RewardDefaultArgs instead
     */
    export type RewardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RewardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrowthPointDefaultArgs instead
     */
    export type GrowthPointArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrowthPointDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AIInteractionDefaultArgs instead
     */
    export type AIInteractionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AIInteractionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}