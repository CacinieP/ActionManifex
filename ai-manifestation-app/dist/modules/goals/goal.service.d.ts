import { PrismaService } from '../../prisma/prisma.service';
import { CreateGoalDto, UpdateGoalDto, GenerateGoalsDto } from '../../dto/goal.dto';
import { AIService } from '../../ai/ai.service';
export declare class GoalService {
    private prisma;
    private aiService;
    constructor(prisma: PrismaService, aiService: AIService);
    create(createGoalDto: CreateGoalDto, userId: string): Promise<{
        user: {
            email: string;
            username: string | null;
            avatar: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
        };
        wish: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            title: string;
            description: string | null;
            status: string;
            priority: string;
            category: string;
            isOptimized: boolean;
            optimizedText: string | null;
            keywords: string[];
        };
        checkIns: {
            id: string;
            createdAt: Date;
            userId: string;
            type: string;
            progress: number;
            content: string;
            mediaUrl: string | null;
            mood: string | null;
            notes: string | null;
            goalId: string;
        }[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        title: string;
        description: string | null;
        type: string;
        status: string;
        priority: string;
        dueDate: Date | null;
        completedAt: Date | null;
        progress: number;
        order: number;
        specific: string | null;
        measurable: string | null;
        achievable: string | null;
        relevant: string | null;
        timeBound: string | null;
        wishId: string;
    }>;
    findAll(userId: string): Promise<({
        user: {
            email: string;
            username: string | null;
            avatar: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
        };
        wish: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            title: string;
            description: string | null;
            status: string;
            priority: string;
            category: string;
            isOptimized: boolean;
            optimizedText: string | null;
            keywords: string[];
        };
        checkIns: {
            id: string;
            createdAt: Date;
            userId: string;
            type: string;
            progress: number;
            content: string;
            mediaUrl: string | null;
            mood: string | null;
            notes: string | null;
            goalId: string;
        }[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        title: string;
        description: string | null;
        type: string;
        status: string;
        priority: string;
        dueDate: Date | null;
        completedAt: Date | null;
        progress: number;
        order: number;
        specific: string | null;
        measurable: string | null;
        achievable: string | null;
        relevant: string | null;
        timeBound: string | null;
        wishId: string;
    })[]>;
    findOne(id: string, userId: string): Promise<{
        user: {
            email: string;
            username: string | null;
            avatar: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
        };
        wish: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            title: string;
            description: string | null;
            status: string;
            priority: string;
            category: string;
            isOptimized: boolean;
            optimizedText: string | null;
            keywords: string[];
        };
        checkIns: {
            id: string;
            createdAt: Date;
            userId: string;
            type: string;
            progress: number;
            content: string;
            mediaUrl: string | null;
            mood: string | null;
            notes: string | null;
            goalId: string;
        }[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        title: string;
        description: string | null;
        type: string;
        status: string;
        priority: string;
        dueDate: Date | null;
        completedAt: Date | null;
        progress: number;
        order: number;
        specific: string | null;
        measurable: string | null;
        achievable: string | null;
        relevant: string | null;
        timeBound: string | null;
        wishId: string;
    }>;
    update(id: string, updateGoalDto: UpdateGoalDto, userId: string): Promise<{
        user: {
            email: string;
            username: string | null;
            avatar: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
        };
        wish: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            title: string;
            description: string | null;
            status: string;
            priority: string;
            category: string;
            isOptimized: boolean;
            optimizedText: string | null;
            keywords: string[];
        };
        checkIns: {
            id: string;
            createdAt: Date;
            userId: string;
            type: string;
            progress: number;
            content: string;
            mediaUrl: string | null;
            mood: string | null;
            notes: string | null;
            goalId: string;
        }[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        title: string;
        description: string | null;
        type: string;
        status: string;
        priority: string;
        dueDate: Date | null;
        completedAt: Date | null;
        progress: number;
        order: number;
        specific: string | null;
        measurable: string | null;
        achievable: string | null;
        relevant: string | null;
        timeBound: string | null;
        wishId: string;
    }>;
    remove(id: string, userId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        title: string;
        description: string | null;
        type: string;
        status: string;
        priority: string;
        dueDate: Date | null;
        completedAt: Date | null;
        progress: number;
        order: number;
        specific: string | null;
        measurable: string | null;
        achievable: string | null;
        relevant: string | null;
        timeBound: string | null;
        wishId: string;
    }>;
    generateSMARTGoals(generateGoalsDto: GenerateGoalsDto, userId: string): Promise<any[]>;
    getGoalProgress(wishId: string, userId: string): Promise<{
        totalGoals: number;
        completedGoals: number;
        inProgressGoals: number;
        overallProgress: number;
        goalProgress: {
            id: string;
            title: string;
            status: string;
            progress: number;
            checkInCount: number;
            lastCheckIn: Date;
        }[];
    }>;
    getUpcomingGoals(userId: string): Promise<({
        wish: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            title: string;
            description: string | null;
            status: string;
            priority: string;
            category: string;
            isOptimized: boolean;
            optimizedText: string | null;
            keywords: string[];
        };
        checkIns: {
            id: string;
            createdAt: Date;
            userId: string;
            type: string;
            progress: number;
            content: string;
            mediaUrl: string | null;
            mood: string | null;
            notes: string | null;
            goalId: string;
        }[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        title: string;
        description: string | null;
        type: string;
        status: string;
        priority: string;
        dueDate: Date | null;
        completedAt: Date | null;
        progress: number;
        order: number;
        specific: string | null;
        measurable: string | null;
        achievable: string | null;
        relevant: string | null;
        timeBound: string | null;
        wishId: string;
    })[]>;
    reorderGoals(wishId: string, goalIds: string[], userId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        title: string;
        description: string | null;
        type: string;
        status: string;
        priority: string;
        dueDate: Date | null;
        completedAt: Date | null;
        progress: number;
        order: number;
        specific: string | null;
        measurable: string | null;
        achievable: string | null;
        relevant: string | null;
        timeBound: string | null;
        wishId: string;
    }[]>;
    private generateCompletionReward;
}
